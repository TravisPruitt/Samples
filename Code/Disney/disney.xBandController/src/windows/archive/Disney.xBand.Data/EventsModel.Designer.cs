//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("EventsModel", "FK_AbandonEvent_Event", "Event", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Disney.xBand.Data.Event), "AbandonEvent", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Disney.xBand.Data.AbandonEvent), true)]
[assembly: EdmRelationshipAttribute("EventsModel", "FK_Event_EventType", "EventType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Disney.xBand.Data.EventType), "Event", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Disney.xBand.Data.Event), true)]
[assembly: EdmRelationshipAttribute("EventsModel", "FK_ExitEvent_Event", "Event", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Disney.xBand.Data.Event), "ExitEvent", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Disney.xBand.Data.ExitEvent), true)]
[assembly: EdmRelationshipAttribute("EventsModel", "FK_LoadEvent_Event", "Event", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Disney.xBand.Data.Event), "LoadEvent", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Disney.xBand.Data.LoadEvent), true)]
[assembly: EdmRelationshipAttribute("EventsModel", "FK_Metric_MetricType", "MetricType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Disney.xBand.Data.MetricType), "Metric", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Disney.xBand.Data.Metric), true)]
[assembly: EdmRelationshipAttribute("EventsModel", "FK_Event_Facility", "Facility", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Disney.xBand.Data.Facility), "Event", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Disney.xBand.Data.Event), true)]
[assembly: EdmRelationshipAttribute("EventsModel", "FK_Facility_FacilityType", "FacilityType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Disney.xBand.Data.FacilityType), "Facility", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Disney.xBand.Data.Facility), true)]
[assembly: EdmRelationshipAttribute("EventsModel", "FK_Metric_Facility", "Facility", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Disney.xBand.Data.Facility), "Metric", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Disney.xBand.Data.Metric), true)]

#endregion

namespace Disney.xBand.Data
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class EventsEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new EventsEntities object using the connection string found in the 'EventsEntities' section of the application configuration file.
        /// </summary>
        public EventsEntities() : base("name=EventsEntities", "EventsEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new EventsEntities object.
        /// </summary>
        public EventsEntities(string connectionString) : base(connectionString, "EventsEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new EventsEntities object.
        /// </summary>
        public EventsEntities(EntityConnection connection) : base(connection, "EventsEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<AbandonEvent> AbandonEvents
        {
            get
            {
                if ((_AbandonEvents == null))
                {
                    _AbandonEvents = base.CreateObjectSet<AbandonEvent>("AbandonEvents");
                }
                return _AbandonEvents;
            }
        }
        private ObjectSet<AbandonEvent> _AbandonEvents;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Event> Events
        {
            get
            {
                if ((_Events == null))
                {
                    _Events = base.CreateObjectSet<Event>("Events");
                }
                return _Events;
            }
        }
        private ObjectSet<Event> _Events;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<EventType> EventTypes
        {
            get
            {
                if ((_EventTypes == null))
                {
                    _EventTypes = base.CreateObjectSet<EventType>("EventTypes");
                }
                return _EventTypes;
            }
        }
        private ObjectSet<EventType> _EventTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ExitEvent> ExitEvents
        {
            get
            {
                if ((_ExitEvents == null))
                {
                    _ExitEvents = base.CreateObjectSet<ExitEvent>("ExitEvents");
                }
                return _ExitEvents;
            }
        }
        private ObjectSet<ExitEvent> _ExitEvents;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LoadEvent> LoadEvents
        {
            get
            {
                if ((_LoadEvents == null))
                {
                    _LoadEvents = base.CreateObjectSet<LoadEvent>("LoadEvents");
                }
                return _LoadEvents;
            }
        }
        private ObjectSet<LoadEvent> _LoadEvents;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Metric> Metrics
        {
            get
            {
                if ((_Metrics == null))
                {
                    _Metrics = base.CreateObjectSet<Metric>("Metrics");
                }
                return _Metrics;
            }
        }
        private ObjectSet<Metric> _Metrics;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MetricType> MetricTypes
        {
            get
            {
                if ((_MetricTypes == null))
                {
                    _MetricTypes = base.CreateObjectSet<MetricType>("MetricTypes");
                }
                return _MetricTypes;
            }
        }
        private ObjectSet<MetricType> _MetricTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Facility> Facilities
        {
            get
            {
                if ((_Facilities == null))
                {
                    _Facilities = base.CreateObjectSet<Facility>("Facilities");
                }
                return _Facilities;
            }
        }
        private ObjectSet<Facility> _Facilities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FacilityType> FacilityTypes
        {
            get
            {
                if ((_FacilityTypes == null))
                {
                    _FacilityTypes = base.CreateObjectSet<FacilityType>("FacilityTypes");
                }
                return _FacilityTypes;
            }
        }
        private ObjectSet<FacilityType> _FacilityTypes;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the AbandonEvents EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAbandonEvents(AbandonEvent abandonEvent)
        {
            base.AddObject("AbandonEvents", abandonEvent);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Events EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEvents(Event @event)
        {
            base.AddObject("Events", @event);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the EventTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToEventTypes(EventType eventType)
        {
            base.AddObject("EventTypes", eventType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ExitEvents EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToExitEvents(ExitEvent exitEvent)
        {
            base.AddObject("ExitEvents", exitEvent);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LoadEvents EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLoadEvents(LoadEvent loadEvent)
        {
            base.AddObject("LoadEvents", loadEvent);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Metrics EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMetrics(Metric metric)
        {
            base.AddObject("Metrics", metric);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MetricTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMetricTypes(MetricType metricType)
        {
            base.AddObject("MetricTypes", metricType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Facilities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFacilities(Facility facility)
        {
            base.AddObject("Facilities", facility);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FacilityTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFacilityTypes(FacilityType facilityType)
        {
            base.AddObject("FacilityTypes", facilityType);
        }

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="guestID">No Metadata Documentation available.</param>
        /// <param name="xPass">No Metadata Documentation available.</param>
        /// <param name="facilityName">No Metadata Documentation available.</param>
        /// <param name="facilityTypeName">No Metadata Documentation available.</param>
        /// <param name="eventTypeName">No Metadata Documentation available.</param>
        /// <param name="readerLocation">No Metadata Documentation available.</param>
        /// <param name="timestamp">No Metadata Documentation available.</param>
        /// <param name="waitTime">No Metadata Documentation available.</param>
        /// <param name="mergeTime">No Metadata Documentation available.</param>
        /// <param name="carID">No Metadata Documentation available.</param>
        public int CreateLoadEvent(global::System.String guestID, Nullable<global::System.Boolean> xPass, global::System.String facilityName, global::System.String facilityTypeName, global::System.String eventTypeName, global::System.String readerLocation, global::System.String timestamp, Nullable<global::System.Int32> waitTime, Nullable<global::System.Int32> mergeTime, global::System.String carID)
        {
            ObjectParameter guestIDParameter;
            if (guestID != null)
            {
                guestIDParameter = new ObjectParameter("GuestID", guestID);
            }
            else
            {
                guestIDParameter = new ObjectParameter("GuestID", typeof(global::System.String));
            }
    
            ObjectParameter xPassParameter;
            if (xPass.HasValue)
            {
                xPassParameter = new ObjectParameter("xPass", xPass);
            }
            else
            {
                xPassParameter = new ObjectParameter("xPass", typeof(global::System.Boolean));
            }
    
            ObjectParameter facilityNameParameter;
            if (facilityName != null)
            {
                facilityNameParameter = new ObjectParameter("FacilityName", facilityName);
            }
            else
            {
                facilityNameParameter = new ObjectParameter("FacilityName", typeof(global::System.String));
            }
    
            ObjectParameter facilityTypeNameParameter;
            if (facilityTypeName != null)
            {
                facilityTypeNameParameter = new ObjectParameter("FacilityTypeName", facilityTypeName);
            }
            else
            {
                facilityTypeNameParameter = new ObjectParameter("FacilityTypeName", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeNameParameter;
            if (eventTypeName != null)
            {
                eventTypeNameParameter = new ObjectParameter("EventTypeName", eventTypeName);
            }
            else
            {
                eventTypeNameParameter = new ObjectParameter("EventTypeName", typeof(global::System.String));
            }
    
            ObjectParameter readerLocationParameter;
            if (readerLocation != null)
            {
                readerLocationParameter = new ObjectParameter("ReaderLocation", readerLocation);
            }
            else
            {
                readerLocationParameter = new ObjectParameter("ReaderLocation", typeof(global::System.String));
            }
    
            ObjectParameter timestampParameter;
            if (timestamp != null)
            {
                timestampParameter = new ObjectParameter("Timestamp", timestamp);
            }
            else
            {
                timestampParameter = new ObjectParameter("Timestamp", typeof(global::System.String));
            }
    
            ObjectParameter waitTimeParameter;
            if (waitTime.HasValue)
            {
                waitTimeParameter = new ObjectParameter("WaitTime", waitTime);
            }
            else
            {
                waitTimeParameter = new ObjectParameter("WaitTime", typeof(global::System.Int32));
            }
    
            ObjectParameter mergeTimeParameter;
            if (mergeTime.HasValue)
            {
                mergeTimeParameter = new ObjectParameter("MergeTime", mergeTime);
            }
            else
            {
                mergeTimeParameter = new ObjectParameter("MergeTime", typeof(global::System.Int32));
            }
    
            ObjectParameter carIDParameter;
            if (carID != null)
            {
                carIDParameter = new ObjectParameter("CarID", carID);
            }
            else
            {
                carIDParameter = new ObjectParameter("CarID", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("CreateLoadEvent", guestIDParameter, xPassParameter, facilityNameParameter, facilityTypeNameParameter, eventTypeNameParameter, readerLocationParameter, timestampParameter, waitTimeParameter, mergeTimeParameter, carIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="guestID">No Metadata Documentation available.</param>
        /// <param name="xPass">No Metadata Documentation available.</param>
        /// <param name="facilityName">No Metadata Documentation available.</param>
        /// <param name="facilityTypeName">No Metadata Documentation available.</param>
        /// <param name="eventTypeName">No Metadata Documentation available.</param>
        /// <param name="readerLocation">No Metadata Documentation available.</param>
        /// <param name="timestamp">No Metadata Documentation available.</param>
        /// <param name="waitTime">No Metadata Documentation available.</param>
        /// <param name="mergeTime">No Metadata Documentation available.</param>
        /// <param name="totalTime">No Metadata Documentation available.</param>
        /// <param name="carID">No Metadata Documentation available.</param>
        public int CreateExitEvent(global::System.String guestID, Nullable<global::System.Boolean> xPass, global::System.String facilityName, global::System.String facilityTypeName, global::System.String eventTypeName, global::System.String readerLocation, global::System.String timestamp, Nullable<global::System.Int32> waitTime, Nullable<global::System.Int32> mergeTime, Nullable<global::System.Int32> totalTime, global::System.String carID)
        {
            ObjectParameter guestIDParameter;
            if (guestID != null)
            {
                guestIDParameter = new ObjectParameter("GuestID", guestID);
            }
            else
            {
                guestIDParameter = new ObjectParameter("GuestID", typeof(global::System.String));
            }
    
            ObjectParameter xPassParameter;
            if (xPass.HasValue)
            {
                xPassParameter = new ObjectParameter("xPass", xPass);
            }
            else
            {
                xPassParameter = new ObjectParameter("xPass", typeof(global::System.Boolean));
            }
    
            ObjectParameter facilityNameParameter;
            if (facilityName != null)
            {
                facilityNameParameter = new ObjectParameter("FacilityName", facilityName);
            }
            else
            {
                facilityNameParameter = new ObjectParameter("FacilityName", typeof(global::System.String));
            }
    
            ObjectParameter facilityTypeNameParameter;
            if (facilityTypeName != null)
            {
                facilityTypeNameParameter = new ObjectParameter("FacilityTypeName", facilityTypeName);
            }
            else
            {
                facilityTypeNameParameter = new ObjectParameter("FacilityTypeName", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeNameParameter;
            if (eventTypeName != null)
            {
                eventTypeNameParameter = new ObjectParameter("EventTypeName", eventTypeName);
            }
            else
            {
                eventTypeNameParameter = new ObjectParameter("EventTypeName", typeof(global::System.String));
            }
    
            ObjectParameter readerLocationParameter;
            if (readerLocation != null)
            {
                readerLocationParameter = new ObjectParameter("ReaderLocation", readerLocation);
            }
            else
            {
                readerLocationParameter = new ObjectParameter("ReaderLocation", typeof(global::System.String));
            }
    
            ObjectParameter timestampParameter;
            if (timestamp != null)
            {
                timestampParameter = new ObjectParameter("Timestamp", timestamp);
            }
            else
            {
                timestampParameter = new ObjectParameter("Timestamp", typeof(global::System.String));
            }
    
            ObjectParameter waitTimeParameter;
            if (waitTime.HasValue)
            {
                waitTimeParameter = new ObjectParameter("WaitTime", waitTime);
            }
            else
            {
                waitTimeParameter = new ObjectParameter("WaitTime", typeof(global::System.Int32));
            }
    
            ObjectParameter mergeTimeParameter;
            if (mergeTime.HasValue)
            {
                mergeTimeParameter = new ObjectParameter("MergeTime", mergeTime);
            }
            else
            {
                mergeTimeParameter = new ObjectParameter("MergeTime", typeof(global::System.Int32));
            }
    
            ObjectParameter totalTimeParameter;
            if (totalTime.HasValue)
            {
                totalTimeParameter = new ObjectParameter("TotalTime", totalTime);
            }
            else
            {
                totalTimeParameter = new ObjectParameter("TotalTime", typeof(global::System.Int32));
            }
    
            ObjectParameter carIDParameter;
            if (carID != null)
            {
                carIDParameter = new ObjectParameter("CarID", carID);
            }
            else
            {
                carIDParameter = new ObjectParameter("CarID", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("CreateExitEvent", guestIDParameter, xPassParameter, facilityNameParameter, facilityTypeNameParameter, eventTypeNameParameter, readerLocationParameter, timestampParameter, waitTimeParameter, mergeTimeParameter, totalTimeParameter, carIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="guestID">No Metadata Documentation available.</param>
        /// <param name="xPass">No Metadata Documentation available.</param>
        /// <param name="facilityName">No Metadata Documentation available.</param>
        /// <param name="facilityTypeName">No Metadata Documentation available.</param>
        /// <param name="eventTypeName">No Metadata Documentation available.</param>
        /// <param name="readerLocation">No Metadata Documentation available.</param>
        /// <param name="timestamp">No Metadata Documentation available.</param>
        /// <param name="lastTransmit">No Metadata Documentation available.</param>
        public int CreateAbandonEvent(global::System.String guestID, Nullable<global::System.Boolean> xPass, global::System.String facilityName, global::System.String facilityTypeName, global::System.String eventTypeName, global::System.String readerLocation, global::System.String timestamp, global::System.String lastTransmit)
        {
            ObjectParameter guestIDParameter;
            if (guestID != null)
            {
                guestIDParameter = new ObjectParameter("GuestID", guestID);
            }
            else
            {
                guestIDParameter = new ObjectParameter("GuestID", typeof(global::System.String));
            }
    
            ObjectParameter xPassParameter;
            if (xPass.HasValue)
            {
                xPassParameter = new ObjectParameter("xPass", xPass);
            }
            else
            {
                xPassParameter = new ObjectParameter("xPass", typeof(global::System.Boolean));
            }
    
            ObjectParameter facilityNameParameter;
            if (facilityName != null)
            {
                facilityNameParameter = new ObjectParameter("FacilityName", facilityName);
            }
            else
            {
                facilityNameParameter = new ObjectParameter("FacilityName", typeof(global::System.String));
            }
    
            ObjectParameter facilityTypeNameParameter;
            if (facilityTypeName != null)
            {
                facilityTypeNameParameter = new ObjectParameter("FacilityTypeName", facilityTypeName);
            }
            else
            {
                facilityTypeNameParameter = new ObjectParameter("FacilityTypeName", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeNameParameter;
            if (eventTypeName != null)
            {
                eventTypeNameParameter = new ObjectParameter("EventTypeName", eventTypeName);
            }
            else
            {
                eventTypeNameParameter = new ObjectParameter("EventTypeName", typeof(global::System.String));
            }
    
            ObjectParameter readerLocationParameter;
            if (readerLocation != null)
            {
                readerLocationParameter = new ObjectParameter("ReaderLocation", readerLocation);
            }
            else
            {
                readerLocationParameter = new ObjectParameter("ReaderLocation", typeof(global::System.String));
            }
    
            ObjectParameter timestampParameter;
            if (timestamp != null)
            {
                timestampParameter = new ObjectParameter("Timestamp", timestamp);
            }
            else
            {
                timestampParameter = new ObjectParameter("Timestamp", typeof(global::System.String));
            }
    
            ObjectParameter lastTransmitParameter;
            if (lastTransmit != null)
            {
                lastTransmitParameter = new ObjectParameter("LastTransmit", lastTransmit);
            }
            else
            {
                lastTransmitParameter = new ObjectParameter("LastTransmit", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("CreateAbandonEvent", guestIDParameter, xPassParameter, facilityNameParameter, facilityTypeNameParameter, eventTypeNameParameter, readerLocationParameter, timestampParameter, lastTransmitParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="facilityName">No Metadata Documentation available.</param>
        /// <param name="facilityTypeName">No Metadata Documentation available.</param>
        /// <param name="startTime">No Metadata Documentation available.</param>
        /// <param name="endTime">No Metadata Documentation available.</param>
        /// <param name="metricTypeName">No Metadata Documentation available.</param>
        /// <param name="guests">No Metadata Documentation available.</param>
        /// <param name="abandonments">No Metadata Documentation available.</param>
        /// <param name="waitTime">No Metadata Documentation available.</param>
        /// <param name="mergeTime">No Metadata Documentation available.</param>
        /// <param name="totalTime">No Metadata Documentation available.</param>
        public int CreateMetric(global::System.String facilityName, global::System.String facilityTypeName, global::System.String startTime, global::System.String endTime, global::System.String metricTypeName, Nullable<global::System.Int32> guests, Nullable<global::System.Int32> abandonments, Nullable<global::System.Int32> waitTime, Nullable<global::System.Int32> mergeTime, Nullable<global::System.Int32> totalTime)
        {
            ObjectParameter facilityNameParameter;
            if (facilityName != null)
            {
                facilityNameParameter = new ObjectParameter("FacilityName", facilityName);
            }
            else
            {
                facilityNameParameter = new ObjectParameter("FacilityName", typeof(global::System.String));
            }
    
            ObjectParameter facilityTypeNameParameter;
            if (facilityTypeName != null)
            {
                facilityTypeNameParameter = new ObjectParameter("FacilityTypeName", facilityTypeName);
            }
            else
            {
                facilityTypeNameParameter = new ObjectParameter("FacilityTypeName", typeof(global::System.String));
            }
    
            ObjectParameter startTimeParameter;
            if (startTime != null)
            {
                startTimeParameter = new ObjectParameter("StartTime", startTime);
            }
            else
            {
                startTimeParameter = new ObjectParameter("StartTime", typeof(global::System.String));
            }
    
            ObjectParameter endTimeParameter;
            if (endTime != null)
            {
                endTimeParameter = new ObjectParameter("EndTime", endTime);
            }
            else
            {
                endTimeParameter = new ObjectParameter("EndTime", typeof(global::System.String));
            }
    
            ObjectParameter metricTypeNameParameter;
            if (metricTypeName != null)
            {
                metricTypeNameParameter = new ObjectParameter("MetricTypeName", metricTypeName);
            }
            else
            {
                metricTypeNameParameter = new ObjectParameter("MetricTypeName", typeof(global::System.String));
            }
    
            ObjectParameter guestsParameter;
            if (guests.HasValue)
            {
                guestsParameter = new ObjectParameter("Guests", guests);
            }
            else
            {
                guestsParameter = new ObjectParameter("Guests", typeof(global::System.Int32));
            }
    
            ObjectParameter abandonmentsParameter;
            if (abandonments.HasValue)
            {
                abandonmentsParameter = new ObjectParameter("Abandonments", abandonments);
            }
            else
            {
                abandonmentsParameter = new ObjectParameter("Abandonments", typeof(global::System.Int32));
            }
    
            ObjectParameter waitTimeParameter;
            if (waitTime.HasValue)
            {
                waitTimeParameter = new ObjectParameter("WaitTime", waitTime);
            }
            else
            {
                waitTimeParameter = new ObjectParameter("WaitTime", typeof(global::System.Int32));
            }
    
            ObjectParameter mergeTimeParameter;
            if (mergeTime.HasValue)
            {
                mergeTimeParameter = new ObjectParameter("MergeTime", mergeTime);
            }
            else
            {
                mergeTimeParameter = new ObjectParameter("MergeTime", typeof(global::System.Int32));
            }
    
            ObjectParameter totalTimeParameter;
            if (totalTime.HasValue)
            {
                totalTimeParameter = new ObjectParameter("TotalTime", totalTime);
            }
            else
            {
                totalTimeParameter = new ObjectParameter("TotalTime", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("CreateMetric", facilityNameParameter, facilityTypeNameParameter, startTimeParameter, endTimeParameter, metricTypeNameParameter, guestsParameter, abandonmentsParameter, waitTimeParameter, mergeTimeParameter, totalTimeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="guestID">No Metadata Documentation available.</param>
        /// <param name="xPass">No Metadata Documentation available.</param>
        /// <param name="facilityName">No Metadata Documentation available.</param>
        /// <param name="facilityTypeName">No Metadata Documentation available.</param>
        /// <param name="eventTypeName">No Metadata Documentation available.</param>
        /// <param name="readerLocation">No Metadata Documentation available.</param>
        /// <param name="timestamp">No Metadata Documentation available.</param>
        /// <param name="eventId">No Metadata Documentation available.</param>
        public int CreateEvent(global::System.String guestID, Nullable<global::System.Boolean> xPass, global::System.String facilityName, global::System.String facilityTypeName, global::System.String eventTypeName, global::System.String readerLocation, global::System.String timestamp, ObjectParameter eventId)
        {
            ObjectParameter guestIDParameter;
            if (guestID != null)
            {
                guestIDParameter = new ObjectParameter("GuestID", guestID);
            }
            else
            {
                guestIDParameter = new ObjectParameter("GuestID", typeof(global::System.String));
            }
    
            ObjectParameter xPassParameter;
            if (xPass.HasValue)
            {
                xPassParameter = new ObjectParameter("xPass", xPass);
            }
            else
            {
                xPassParameter = new ObjectParameter("xPass", typeof(global::System.Boolean));
            }
    
            ObjectParameter facilityNameParameter;
            if (facilityName != null)
            {
                facilityNameParameter = new ObjectParameter("FacilityName", facilityName);
            }
            else
            {
                facilityNameParameter = new ObjectParameter("FacilityName", typeof(global::System.String));
            }
    
            ObjectParameter facilityTypeNameParameter;
            if (facilityTypeName != null)
            {
                facilityTypeNameParameter = new ObjectParameter("FacilityTypeName", facilityTypeName);
            }
            else
            {
                facilityTypeNameParameter = new ObjectParameter("FacilityTypeName", typeof(global::System.String));
            }
    
            ObjectParameter eventTypeNameParameter;
            if (eventTypeName != null)
            {
                eventTypeNameParameter = new ObjectParameter("EventTypeName", eventTypeName);
            }
            else
            {
                eventTypeNameParameter = new ObjectParameter("EventTypeName", typeof(global::System.String));
            }
    
            ObjectParameter readerLocationParameter;
            if (readerLocation != null)
            {
                readerLocationParameter = new ObjectParameter("ReaderLocation", readerLocation);
            }
            else
            {
                readerLocationParameter = new ObjectParameter("ReaderLocation", typeof(global::System.String));
            }
    
            ObjectParameter timestampParameter;
            if (timestamp != null)
            {
                timestampParameter = new ObjectParameter("Timestamp", timestamp);
            }
            else
            {
                timestampParameter = new ObjectParameter("Timestamp", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("CreateEvent", guestIDParameter, xPassParameter, facilityNameParameter, facilityTypeNameParameter, eventTypeNameParameter, readerLocationParameter, timestampParameter, eventId);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="filePath">No Metadata Documentation available.</param>
        /// <param name="timestamp">No Metadata Documentation available.</param>
        public int CreateMediaFile(global::System.String filePath, Nullable<global::System.DateTime> timestamp)
        {
            ObjectParameter filePathParameter;
            if (filePath != null)
            {
                filePathParameter = new ObjectParameter("FilePath", filePath);
            }
            else
            {
                filePathParameter = new ObjectParameter("FilePath", typeof(global::System.String));
            }
    
            ObjectParameter timestampParameter;
            if (timestamp.HasValue)
            {
                timestampParameter = new ObjectParameter("Timestamp", timestamp);
            }
            else
            {
                timestampParameter = new ObjectParameter("Timestamp", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("CreateMediaFile", filePathParameter, timestampParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public int GetRecievedMediaFiles()
        {
            return base.ExecuteFunction("GetRecievedMediaFiles");
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mediaFileID">No Metadata Documentation available.</param>
        public int MediaFileSent(Nullable<global::System.Int32> mediaFileID)
        {
            ObjectParameter mediaFileIDParameter;
            if (mediaFileID.HasValue)
            {
                mediaFileIDParameter = new ObjectParameter("MediaFileID", mediaFileID);
            }
            else
            {
                mediaFileIDParameter = new ObjectParameter("MediaFileID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("MediaFileSent", mediaFileIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="timestamp">No Metadata Documentation available.</param>
        public ObjectResult<Event> GetMediaEvents(Nullable<global::System.DateTime> timestamp)
        {
            ObjectParameter timestampParameter;
            if (timestamp.HasValue)
            {
                timestampParameter = new ObjectParameter("Timestamp", timestamp);
            }
            else
            {
                timestampParameter = new ObjectParameter("Timestamp", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<Event>("GetMediaEvents", timestampParameter);
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="timestamp">No Metadata Documentation available.</param>
        public ObjectResult<Event> GetMediaEvents(Nullable<global::System.DateTime> timestamp, MergeOption mergeOption)
        {
            ObjectParameter timestampParameter;
            if (timestamp.HasValue)
            {
                timestampParameter = new ObjectParameter("Timestamp", timestamp);
            }
            else
            {
                timestampParameter = new ObjectParameter("Timestamp", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<Event>("GetMediaEvents", mergeOption, timestampParameter);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EventsModel", Name="AbandonEvent")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class AbandonEvent : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new AbandonEvent object.
        /// </summary>
        /// <param name="eventId">Initial value of the EventId property.</param>
        /// <param name="lastTransmit">Initial value of the LastTransmit property.</param>
        public static AbandonEvent CreateAbandonEvent(global::System.Int32 eventId, global::System.DateTime lastTransmit)
        {
            AbandonEvent abandonEvent = new AbandonEvent();
            abandonEvent.EventId = eventId;
            abandonEvent.LastTransmit = lastTransmit;
            return abandonEvent;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EventId
        {
            get
            {
                return _EventId;
            }
            set
            {
                if (_EventId != value)
                {
                    OnEventIdChanging(value);
                    ReportPropertyChanging("EventId");
                    _EventId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EventId");
                    OnEventIdChanged();
                }
            }
        }
        private global::System.Int32 _EventId;
        partial void OnEventIdChanging(global::System.Int32 value);
        partial void OnEventIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime LastTransmit
        {
            get
            {
                return _LastTransmit;
            }
            set
            {
                OnLastTransmitChanging(value);
                ReportPropertyChanging("LastTransmit");
                _LastTransmit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastTransmit");
                OnLastTransmitChanged();
            }
        }
        private global::System.DateTime _LastTransmit;
        partial void OnLastTransmitChanging(global::System.DateTime value);
        partial void OnLastTransmitChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_AbandonEvent_Event", "Event")]
        public Event Event
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Event>("EventsModel.FK_AbandonEvent_Event", "Event").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Event>("EventsModel.FK_AbandonEvent_Event", "Event").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Event> EventReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Event>("EventsModel.FK_AbandonEvent_Event", "Event");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Event>("EventsModel.FK_AbandonEvent_Event", "Event", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EventsModel", Name="Event")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Event : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Event object.
        /// </summary>
        /// <param name="eventId">Initial value of the EventId property.</param>
        /// <param name="eventTypeID">Initial value of the EventTypeID property.</param>
        /// <param name="timestamp">Initial value of the Timestamp property.</param>
        /// <param name="xPass">Initial value of the xPass property.</param>
        /// <param name="readerLocation">Initial value of the ReaderLocation property.</param>
        /// <param name="guestID">Initial value of the GuestID property.</param>
        /// <param name="rideNumber">Initial value of the RideNumber property.</param>
        /// <param name="facilityID">Initial value of the FacilityID property.</param>
        public static Event CreateEvent(global::System.Int32 eventId, global::System.Int32 eventTypeID, global::System.DateTime timestamp, global::System.Boolean xPass, global::System.String readerLocation, global::System.String guestID, global::System.Int32 rideNumber, global::System.Int32 facilityID)
        {
            Event @event = new Event();
            @event.EventId = eventId;
            @event.EventTypeID = eventTypeID;
            @event.Timestamp = timestamp;
            @event.xPass = xPass;
            @event.ReaderLocation = readerLocation;
            @event.GuestID = guestID;
            @event.RideNumber = rideNumber;
            @event.FacilityID = facilityID;
            return @event;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EventId
        {
            get
            {
                return _EventId;
            }
            set
            {
                if (_EventId != value)
                {
                    OnEventIdChanging(value);
                    ReportPropertyChanging("EventId");
                    _EventId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EventId");
                    OnEventIdChanged();
                }
            }
        }
        private global::System.Int32 _EventId;
        partial void OnEventIdChanging(global::System.Int32 value);
        partial void OnEventIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EventTypeID
        {
            get
            {
                return _EventTypeID;
            }
            set
            {
                OnEventTypeIDChanging(value);
                ReportPropertyChanging("EventTypeID");
                _EventTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EventTypeID");
                OnEventTypeIDChanged();
            }
        }
        private global::System.Int32 _EventTypeID;
        partial void OnEventTypeIDChanging(global::System.Int32 value);
        partial void OnEventTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Timestamp
        {
            get
            {
                return _Timestamp;
            }
            set
            {
                OnTimestampChanging(value);
                ReportPropertyChanging("Timestamp");
                _Timestamp = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Timestamp");
                OnTimestampChanged();
            }
        }
        private global::System.DateTime _Timestamp;
        partial void OnTimestampChanging(global::System.DateTime value);
        partial void OnTimestampChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean xPass
        {
            get
            {
                return _xPass;
            }
            set
            {
                OnxPassChanging(value);
                ReportPropertyChanging("xPass");
                _xPass = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("xPass");
                OnxPassChanged();
            }
        }
        private global::System.Boolean _xPass;
        partial void OnxPassChanging(global::System.Boolean value);
        partial void OnxPassChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ReaderLocation
        {
            get
            {
                return _ReaderLocation;
            }
            set
            {
                OnReaderLocationChanging(value);
                ReportPropertyChanging("ReaderLocation");
                _ReaderLocation = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ReaderLocation");
                OnReaderLocationChanged();
            }
        }
        private global::System.String _ReaderLocation;
        partial void OnReaderLocationChanging(global::System.String value);
        partial void OnReaderLocationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GuestID
        {
            get
            {
                return _GuestID;
            }
            set
            {
                OnGuestIDChanging(value);
                ReportPropertyChanging("GuestID");
                _GuestID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("GuestID");
                OnGuestIDChanged();
            }
        }
        private global::System.String _GuestID;
        partial void OnGuestIDChanging(global::System.String value);
        partial void OnGuestIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RideNumber
        {
            get
            {
                return _RideNumber;
            }
            set
            {
                OnRideNumberChanging(value);
                ReportPropertyChanging("RideNumber");
                _RideNumber = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RideNumber");
                OnRideNumberChanged();
            }
        }
        private global::System.Int32 _RideNumber;
        partial void OnRideNumberChanging(global::System.Int32 value);
        partial void OnRideNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FacilityID
        {
            get
            {
                return _FacilityID;
            }
            set
            {
                OnFacilityIDChanging(value);
                ReportPropertyChanging("FacilityID");
                _FacilityID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacilityID");
                OnFacilityIDChanged();
            }
        }
        private global::System.Int32 _FacilityID;
        partial void OnFacilityIDChanging(global::System.Int32 value);
        partial void OnFacilityIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_AbandonEvent_Event", "AbandonEvent")]
        public AbandonEvent AbandonEvent
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AbandonEvent>("EventsModel.FK_AbandonEvent_Event", "AbandonEvent").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AbandonEvent>("EventsModel.FK_AbandonEvent_Event", "AbandonEvent").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<AbandonEvent> AbandonEventReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<AbandonEvent>("EventsModel.FK_AbandonEvent_Event", "AbandonEvent");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<AbandonEvent>("EventsModel.FK_AbandonEvent_Event", "AbandonEvent", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_Event_EventType", "EventType")]
        public EventType EventType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EventType>("EventsModel.FK_Event_EventType", "EventType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EventType>("EventsModel.FK_Event_EventType", "EventType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<EventType> EventTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<EventType>("EventsModel.FK_Event_EventType", "EventType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<EventType>("EventsModel.FK_Event_EventType", "EventType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_ExitEvent_Event", "ExitEvent")]
        public ExitEvent ExitEvent
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ExitEvent>("EventsModel.FK_ExitEvent_Event", "ExitEvent").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ExitEvent>("EventsModel.FK_ExitEvent_Event", "ExitEvent").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ExitEvent> ExitEventReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ExitEvent>("EventsModel.FK_ExitEvent_Event", "ExitEvent");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ExitEvent>("EventsModel.FK_ExitEvent_Event", "ExitEvent", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_LoadEvent_Event", "LoadEvent")]
        public LoadEvent LoadEvent
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LoadEvent>("EventsModel.FK_LoadEvent_Event", "LoadEvent").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LoadEvent>("EventsModel.FK_LoadEvent_Event", "LoadEvent").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<LoadEvent> LoadEventReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<LoadEvent>("EventsModel.FK_LoadEvent_Event", "LoadEvent");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<LoadEvent>("EventsModel.FK_LoadEvent_Event", "LoadEvent", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_Event_Facility", "Facility")]
        public Facility Facility
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Facility>("EventsModel.FK_Event_Facility", "Facility").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Facility>("EventsModel.FK_Event_Facility", "Facility").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Facility> FacilityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Facility>("EventsModel.FK_Event_Facility", "Facility");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Facility>("EventsModel.FK_Event_Facility", "Facility", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EventsModel", Name="EventType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class EventType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new EventType object.
        /// </summary>
        /// <param name="eventTypeID">Initial value of the EventTypeID property.</param>
        /// <param name="eventTypeName">Initial value of the EventTypeName property.</param>
        public static EventType CreateEventType(global::System.Int32 eventTypeID, global::System.String eventTypeName)
        {
            EventType eventType = new EventType();
            eventType.EventTypeID = eventTypeID;
            eventType.EventTypeName = eventTypeName;
            return eventType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EventTypeID
        {
            get
            {
                return _EventTypeID;
            }
            set
            {
                if (_EventTypeID != value)
                {
                    OnEventTypeIDChanging(value);
                    ReportPropertyChanging("EventTypeID");
                    _EventTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EventTypeID");
                    OnEventTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _EventTypeID;
        partial void OnEventTypeIDChanging(global::System.Int32 value);
        partial void OnEventTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EventTypeName
        {
            get
            {
                return _EventTypeName;
            }
            set
            {
                OnEventTypeNameChanging(value);
                ReportPropertyChanging("EventTypeName");
                _EventTypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EventTypeName");
                OnEventTypeNameChanged();
            }
        }
        private global::System.String _EventTypeName;
        partial void OnEventTypeNameChanging(global::System.String value);
        partial void OnEventTypeNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_Event_EventType", "Event")]
        public EntityCollection<Event> Events
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Event>("EventsModel.FK_Event_EventType", "Event");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Event>("EventsModel.FK_Event_EventType", "Event", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EventsModel", Name="ExitEvent")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ExitEvent : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ExitEvent object.
        /// </summary>
        /// <param name="eventId">Initial value of the EventId property.</param>
        /// <param name="waitTime">Initial value of the WaitTime property.</param>
        /// <param name="mergeTime">Initial value of the MergeTime property.</param>
        /// <param name="totalTime">Initial value of the TotalTime property.</param>
        /// <param name="carID">Initial value of the CarID property.</param>
        public static ExitEvent CreateExitEvent(global::System.Int32 eventId, global::System.Int32 waitTime, global::System.Int32 mergeTime, global::System.Int32 totalTime, global::System.String carID)
        {
            ExitEvent exitEvent = new ExitEvent();
            exitEvent.EventId = eventId;
            exitEvent.WaitTime = waitTime;
            exitEvent.MergeTime = mergeTime;
            exitEvent.TotalTime = totalTime;
            exitEvent.CarID = carID;
            return exitEvent;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EventId
        {
            get
            {
                return _EventId;
            }
            set
            {
                if (_EventId != value)
                {
                    OnEventIdChanging(value);
                    ReportPropertyChanging("EventId");
                    _EventId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EventId");
                    OnEventIdChanged();
                }
            }
        }
        private global::System.Int32 _EventId;
        partial void OnEventIdChanging(global::System.Int32 value);
        partial void OnEventIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WaitTime
        {
            get
            {
                return _WaitTime;
            }
            set
            {
                OnWaitTimeChanging(value);
                ReportPropertyChanging("WaitTime");
                _WaitTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WaitTime");
                OnWaitTimeChanged();
            }
        }
        private global::System.Int32 _WaitTime;
        partial void OnWaitTimeChanging(global::System.Int32 value);
        partial void OnWaitTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MergeTime
        {
            get
            {
                return _MergeTime;
            }
            set
            {
                OnMergeTimeChanging(value);
                ReportPropertyChanging("MergeTime");
                _MergeTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MergeTime");
                OnMergeTimeChanged();
            }
        }
        private global::System.Int32 _MergeTime;
        partial void OnMergeTimeChanging(global::System.Int32 value);
        partial void OnMergeTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TotalTime
        {
            get
            {
                return _TotalTime;
            }
            set
            {
                OnTotalTimeChanging(value);
                ReportPropertyChanging("TotalTime");
                _TotalTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TotalTime");
                OnTotalTimeChanged();
            }
        }
        private global::System.Int32 _TotalTime;
        partial void OnTotalTimeChanging(global::System.Int32 value);
        partial void OnTotalTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CarID
        {
            get
            {
                return _CarID;
            }
            set
            {
                OnCarIDChanging(value);
                ReportPropertyChanging("CarID");
                _CarID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CarID");
                OnCarIDChanged();
            }
        }
        private global::System.String _CarID;
        partial void OnCarIDChanging(global::System.String value);
        partial void OnCarIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_ExitEvent_Event", "Event")]
        public Event Event
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Event>("EventsModel.FK_ExitEvent_Event", "Event").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Event>("EventsModel.FK_ExitEvent_Event", "Event").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Event> EventReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Event>("EventsModel.FK_ExitEvent_Event", "Event");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Event>("EventsModel.FK_ExitEvent_Event", "Event", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EventsModel", Name="Facility")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Facility : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Facility object.
        /// </summary>
        /// <param name="facilityID">Initial value of the FacilityID property.</param>
        /// <param name="facilityName">Initial value of the FacilityName property.</param>
        /// <param name="facilityTypeID">Initial value of the FacilityTypeID property.</param>
        public static Facility CreateFacility(global::System.Int32 facilityID, global::System.String facilityName, global::System.Int32 facilityTypeID)
        {
            Facility facility = new Facility();
            facility.FacilityID = facilityID;
            facility.FacilityName = facilityName;
            facility.FacilityTypeID = facilityTypeID;
            return facility;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FacilityID
        {
            get
            {
                return _FacilityID;
            }
            set
            {
                if (_FacilityID != value)
                {
                    OnFacilityIDChanging(value);
                    ReportPropertyChanging("FacilityID");
                    _FacilityID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FacilityID");
                    OnFacilityIDChanged();
                }
            }
        }
        private global::System.Int32 _FacilityID;
        partial void OnFacilityIDChanging(global::System.Int32 value);
        partial void OnFacilityIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FacilityName
        {
            get
            {
                return _FacilityName;
            }
            set
            {
                OnFacilityNameChanging(value);
                ReportPropertyChanging("FacilityName");
                _FacilityName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FacilityName");
                OnFacilityNameChanged();
            }
        }
        private global::System.String _FacilityName;
        partial void OnFacilityNameChanging(global::System.String value);
        partial void OnFacilityNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FacilityTypeID
        {
            get
            {
                return _FacilityTypeID;
            }
            set
            {
                OnFacilityTypeIDChanging(value);
                ReportPropertyChanging("FacilityTypeID");
                _FacilityTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacilityTypeID");
                OnFacilityTypeIDChanged();
            }
        }
        private global::System.Int32 _FacilityTypeID;
        partial void OnFacilityTypeIDChanging(global::System.Int32 value);
        partial void OnFacilityTypeIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_Event_Facility", "Event")]
        public EntityCollection<Event> Events
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Event>("EventsModel.FK_Event_Facility", "Event");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Event>("EventsModel.FK_Event_Facility", "Event", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_Facility_FacilityType", "FacilityType")]
        public FacilityType FacilityType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FacilityType>("EventsModel.FK_Facility_FacilityType", "FacilityType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FacilityType>("EventsModel.FK_Facility_FacilityType", "FacilityType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<FacilityType> FacilityTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FacilityType>("EventsModel.FK_Facility_FacilityType", "FacilityType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<FacilityType>("EventsModel.FK_Facility_FacilityType", "FacilityType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_Metric_Facility", "Metric")]
        public EntityCollection<Metric> Metrics
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Metric>("EventsModel.FK_Metric_Facility", "Metric");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Metric>("EventsModel.FK_Metric_Facility", "Metric", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EventsModel", Name="FacilityType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FacilityType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FacilityType object.
        /// </summary>
        /// <param name="facilityTypeID">Initial value of the FacilityTypeID property.</param>
        /// <param name="facilityTypeName">Initial value of the FacilityTypeName property.</param>
        public static FacilityType CreateFacilityType(global::System.Int32 facilityTypeID, global::System.String facilityTypeName)
        {
            FacilityType facilityType = new FacilityType();
            facilityType.FacilityTypeID = facilityTypeID;
            facilityType.FacilityTypeName = facilityTypeName;
            return facilityType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FacilityTypeID
        {
            get
            {
                return _FacilityTypeID;
            }
            set
            {
                if (_FacilityTypeID != value)
                {
                    OnFacilityTypeIDChanging(value);
                    ReportPropertyChanging("FacilityTypeID");
                    _FacilityTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FacilityTypeID");
                    OnFacilityTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _FacilityTypeID;
        partial void OnFacilityTypeIDChanging(global::System.Int32 value);
        partial void OnFacilityTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FacilityTypeName
        {
            get
            {
                return _FacilityTypeName;
            }
            set
            {
                OnFacilityTypeNameChanging(value);
                ReportPropertyChanging("FacilityTypeName");
                _FacilityTypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FacilityTypeName");
                OnFacilityTypeNameChanged();
            }
        }
        private global::System.String _FacilityTypeName;
        partial void OnFacilityTypeNameChanging(global::System.String value);
        partial void OnFacilityTypeNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_Facility_FacilityType", "Facility")]
        public EntityCollection<Facility> Facilities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Facility>("EventsModel.FK_Facility_FacilityType", "Facility");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Facility>("EventsModel.FK_Facility_FacilityType", "Facility", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EventsModel", Name="LoadEvent")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LoadEvent : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LoadEvent object.
        /// </summary>
        /// <param name="eventId">Initial value of the EventId property.</param>
        /// <param name="waitTime">Initial value of the WaitTime property.</param>
        /// <param name="mergeTime">Initial value of the MergeTime property.</param>
        /// <param name="carID">Initial value of the CarID property.</param>
        public static LoadEvent CreateLoadEvent(global::System.Int32 eventId, global::System.Int32 waitTime, global::System.Int32 mergeTime, global::System.String carID)
        {
            LoadEvent loadEvent = new LoadEvent();
            loadEvent.EventId = eventId;
            loadEvent.WaitTime = waitTime;
            loadEvent.MergeTime = mergeTime;
            loadEvent.CarID = carID;
            return loadEvent;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EventId
        {
            get
            {
                return _EventId;
            }
            set
            {
                if (_EventId != value)
                {
                    OnEventIdChanging(value);
                    ReportPropertyChanging("EventId");
                    _EventId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EventId");
                    OnEventIdChanged();
                }
            }
        }
        private global::System.Int32 _EventId;
        partial void OnEventIdChanging(global::System.Int32 value);
        partial void OnEventIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WaitTime
        {
            get
            {
                return _WaitTime;
            }
            set
            {
                OnWaitTimeChanging(value);
                ReportPropertyChanging("WaitTime");
                _WaitTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WaitTime");
                OnWaitTimeChanged();
            }
        }
        private global::System.Int32 _WaitTime;
        partial void OnWaitTimeChanging(global::System.Int32 value);
        partial void OnWaitTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MergeTime
        {
            get
            {
                return _MergeTime;
            }
            set
            {
                OnMergeTimeChanging(value);
                ReportPropertyChanging("MergeTime");
                _MergeTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MergeTime");
                OnMergeTimeChanged();
            }
        }
        private global::System.Int32 _MergeTime;
        partial void OnMergeTimeChanging(global::System.Int32 value);
        partial void OnMergeTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CarID
        {
            get
            {
                return _CarID;
            }
            set
            {
                OnCarIDChanging(value);
                ReportPropertyChanging("CarID");
                _CarID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CarID");
                OnCarIDChanged();
            }
        }
        private global::System.String _CarID;
        partial void OnCarIDChanging(global::System.String value);
        partial void OnCarIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_LoadEvent_Event", "Event")]
        public Event Event
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Event>("EventsModel.FK_LoadEvent_Event", "Event").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Event>("EventsModel.FK_LoadEvent_Event", "Event").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Event> EventReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Event>("EventsModel.FK_LoadEvent_Event", "Event");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Event>("EventsModel.FK_LoadEvent_Event", "Event", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EventsModel", Name="Metric")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Metric : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Metric object.
        /// </summary>
        /// <param name="metricID">Initial value of the MetricID property.</param>
        /// <param name="startTime">Initial value of the StartTime property.</param>
        /// <param name="endTime">Initial value of the EndTime property.</param>
        /// <param name="metricTypeID">Initial value of the MetricTypeID property.</param>
        /// <param name="guests">Initial value of the Guests property.</param>
        /// <param name="abandonments">Initial value of the Abandonments property.</param>
        /// <param name="waitTime">Initial value of the WaitTime property.</param>
        /// <param name="mergeTime">Initial value of the MergeTime property.</param>
        /// <param name="totalTime">Initial value of the TotalTime property.</param>
        /// <param name="facilityID">Initial value of the FacilityID property.</param>
        public static Metric CreateMetric(global::System.Int32 metricID, global::System.DateTime startTime, global::System.DateTime endTime, global::System.Int32 metricTypeID, global::System.Int32 guests, global::System.Int32 abandonments, global::System.Int32 waitTime, global::System.Int32 mergeTime, global::System.Int32 totalTime, global::System.Int32 facilityID)
        {
            Metric metric = new Metric();
            metric.MetricID = metricID;
            metric.StartTime = startTime;
            metric.EndTime = endTime;
            metric.MetricTypeID = metricTypeID;
            metric.Guests = guests;
            metric.Abandonments = abandonments;
            metric.WaitTime = waitTime;
            metric.MergeTime = mergeTime;
            metric.TotalTime = totalTime;
            metric.FacilityID = facilityID;
            return metric;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MetricID
        {
            get
            {
                return _MetricID;
            }
            set
            {
                if (_MetricID != value)
                {
                    OnMetricIDChanging(value);
                    ReportPropertyChanging("MetricID");
                    _MetricID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MetricID");
                    OnMetricIDChanged();
                }
            }
        }
        private global::System.Int32 _MetricID;
        partial void OnMetricIDChanging(global::System.Int32 value);
        partial void OnMetricIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartTime
        {
            get
            {
                return _StartTime;
            }
            set
            {
                OnStartTimeChanging(value);
                ReportPropertyChanging("StartTime");
                _StartTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartTime");
                OnStartTimeChanged();
            }
        }
        private global::System.DateTime _StartTime;
        partial void OnStartTimeChanging(global::System.DateTime value);
        partial void OnStartTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime EndTime
        {
            get
            {
                return _EndTime;
            }
            set
            {
                OnEndTimeChanging(value);
                ReportPropertyChanging("EndTime");
                _EndTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndTime");
                OnEndTimeChanged();
            }
        }
        private global::System.DateTime _EndTime;
        partial void OnEndTimeChanging(global::System.DateTime value);
        partial void OnEndTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MetricTypeID
        {
            get
            {
                return _MetricTypeID;
            }
            set
            {
                OnMetricTypeIDChanging(value);
                ReportPropertyChanging("MetricTypeID");
                _MetricTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MetricTypeID");
                OnMetricTypeIDChanged();
            }
        }
        private global::System.Int32 _MetricTypeID;
        partial void OnMetricTypeIDChanging(global::System.Int32 value);
        partial void OnMetricTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Guests
        {
            get
            {
                return _Guests;
            }
            set
            {
                OnGuestsChanging(value);
                ReportPropertyChanging("Guests");
                _Guests = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Guests");
                OnGuestsChanged();
            }
        }
        private global::System.Int32 _Guests;
        partial void OnGuestsChanging(global::System.Int32 value);
        partial void OnGuestsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Abandonments
        {
            get
            {
                return _Abandonments;
            }
            set
            {
                OnAbandonmentsChanging(value);
                ReportPropertyChanging("Abandonments");
                _Abandonments = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Abandonments");
                OnAbandonmentsChanged();
            }
        }
        private global::System.Int32 _Abandonments;
        partial void OnAbandonmentsChanging(global::System.Int32 value);
        partial void OnAbandonmentsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 WaitTime
        {
            get
            {
                return _WaitTime;
            }
            set
            {
                OnWaitTimeChanging(value);
                ReportPropertyChanging("WaitTime");
                _WaitTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WaitTime");
                OnWaitTimeChanged();
            }
        }
        private global::System.Int32 _WaitTime;
        partial void OnWaitTimeChanging(global::System.Int32 value);
        partial void OnWaitTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MergeTime
        {
            get
            {
                return _MergeTime;
            }
            set
            {
                OnMergeTimeChanging(value);
                ReportPropertyChanging("MergeTime");
                _MergeTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MergeTime");
                OnMergeTimeChanged();
            }
        }
        private global::System.Int32 _MergeTime;
        partial void OnMergeTimeChanging(global::System.Int32 value);
        partial void OnMergeTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TotalTime
        {
            get
            {
                return _TotalTime;
            }
            set
            {
                OnTotalTimeChanging(value);
                ReportPropertyChanging("TotalTime");
                _TotalTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TotalTime");
                OnTotalTimeChanged();
            }
        }
        private global::System.Int32 _TotalTime;
        partial void OnTotalTimeChanging(global::System.Int32 value);
        partial void OnTotalTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FacilityID
        {
            get
            {
                return _FacilityID;
            }
            set
            {
                OnFacilityIDChanging(value);
                ReportPropertyChanging("FacilityID");
                _FacilityID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FacilityID");
                OnFacilityIDChanged();
            }
        }
        private global::System.Int32 _FacilityID;
        partial void OnFacilityIDChanging(global::System.Int32 value);
        partial void OnFacilityIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_Metric_MetricType", "MetricType")]
        public MetricType MetricType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MetricType>("EventsModel.FK_Metric_MetricType", "MetricType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MetricType>("EventsModel.FK_Metric_MetricType", "MetricType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MetricType> MetricTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MetricType>("EventsModel.FK_Metric_MetricType", "MetricType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MetricType>("EventsModel.FK_Metric_MetricType", "MetricType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_Metric_Facility", "Facility")]
        public Facility Facility
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Facility>("EventsModel.FK_Metric_Facility", "Facility").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Facility>("EventsModel.FK_Metric_Facility", "Facility").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Facility> FacilityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Facility>("EventsModel.FK_Metric_Facility", "Facility");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Facility>("EventsModel.FK_Metric_Facility", "Facility", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EventsModel", Name="MetricType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MetricType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MetricType object.
        /// </summary>
        /// <param name="metricTypeID">Initial value of the MetricTypeID property.</param>
        /// <param name="metricTypeName">Initial value of the MetricTypeName property.</param>
        public static MetricType CreateMetricType(global::System.Int32 metricTypeID, global::System.String metricTypeName)
        {
            MetricType metricType = new MetricType();
            metricType.MetricTypeID = metricTypeID;
            metricType.MetricTypeName = metricTypeName;
            return metricType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MetricTypeID
        {
            get
            {
                return _MetricTypeID;
            }
            set
            {
                if (_MetricTypeID != value)
                {
                    OnMetricTypeIDChanging(value);
                    ReportPropertyChanging("MetricTypeID");
                    _MetricTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MetricTypeID");
                    OnMetricTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _MetricTypeID;
        partial void OnMetricTypeIDChanging(global::System.Int32 value);
        partial void OnMetricTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String MetricTypeName
        {
            get
            {
                return _MetricTypeName;
            }
            set
            {
                OnMetricTypeNameChanging(value);
                ReportPropertyChanging("MetricTypeName");
                _MetricTypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("MetricTypeName");
                OnMetricTypeNameChanged();
            }
        }
        private global::System.String _MetricTypeName;
        partial void OnMetricTypeNameChanging(global::System.String value);
        partial void OnMetricTypeNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("EventsModel", "FK_Metric_MetricType", "Metric")]
        public EntityCollection<Metric> Metrics
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Metric>("EventsModel.FK_Metric_MetricType", "Metric");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Metric>("EventsModel.FK_Metric_MetricType", "Metric", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
