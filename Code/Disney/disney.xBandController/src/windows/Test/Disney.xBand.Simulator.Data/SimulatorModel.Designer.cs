//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("SimulatorModel", "FK_Reader_ReaderType", "ReaderType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Disney.xBand.Simulator.Data.ReaderType), "Reader", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Disney.xBand.Simulator.Data.Reader), true)]
[assembly: EdmRelationshipAttribute("SimulatorModel", "FK_ReaderEvent_Reader", "Reader", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Disney.xBand.Simulator.Data.Reader), "ReaderEvent", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Disney.xBand.Simulator.Data.ReaderEvent), true)]
[assembly: EdmRelationshipAttribute("SimulatorModel", "FK_Controller_Attraction", "Attraction", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Disney.xBand.Simulator.Data.Attraction), "Controller", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Disney.xBand.Simulator.Data.Controller), true)]
[assembly: EdmRelationshipAttribute("SimulatorModel", "FK_Reader_Controller", "Controller", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Disney.xBand.Simulator.Data.Controller), "Reader", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Disney.xBand.Simulator.Data.Reader), true)]
[assembly: EdmRelationshipAttribute("SimulatorModel", "FK_Reader_ReaderLocationType", "ReaderLocationType", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Disney.xBand.Simulator.Data.ReaderLocationType), "Reader", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Disney.xBand.Simulator.Data.Reader), true)]
[assembly: EdmRelationshipAttribute("SimulatorModel", "FK_MagicBand_MagicBand", "Guest", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Disney.xBand.Simulator.Data.Guest), "MagicBand", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Disney.xBand.Simulator.Data.MagicBand), true)]

#endregion

namespace Disney.xBand.Simulator.Data
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class SimulatorEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new SimulatorEntities object using the connection string found in the 'SimulatorEntities' section of the application configuration file.
        /// </summary>
        public SimulatorEntities() : base("name=SimulatorEntities", "SimulatorEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SimulatorEntities object.
        /// </summary>
        public SimulatorEntities(string connectionString) : base(connectionString, "SimulatorEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new SimulatorEntities object.
        /// </summary>
        public SimulatorEntities(EntityConnection connection) : base(connection, "SimulatorEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Attraction> Attractions
        {
            get
            {
                if ((_Attractions == null))
                {
                    _Attractions = base.CreateObjectSet<Attraction>("Attractions");
                }
                return _Attractions;
            }
        }
        private ObjectSet<Attraction> _Attractions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Controller> Controllers
        {
            get
            {
                if ((_Controllers == null))
                {
                    _Controllers = base.CreateObjectSet<Controller>("Controllers");
                }
                return _Controllers;
            }
        }
        private ObjectSet<Controller> _Controllers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Reader> Readers
        {
            get
            {
                if ((_Readers == null))
                {
                    _Readers = base.CreateObjectSet<Reader>("Readers");
                }
                return _Readers;
            }
        }
        private ObjectSet<Reader> _Readers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ReaderLocationType> ReaderLocationTypes
        {
            get
            {
                if ((_ReaderLocationTypes == null))
                {
                    _ReaderLocationTypes = base.CreateObjectSet<ReaderLocationType>("ReaderLocationTypes");
                }
                return _ReaderLocationTypes;
            }
        }
        private ObjectSet<ReaderLocationType> _ReaderLocationTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ReaderType> ReaderTypes
        {
            get
            {
                if ((_ReaderTypes == null))
                {
                    _ReaderTypes = base.CreateObjectSet<ReaderType>("ReaderTypes");
                }
                return _ReaderTypes;
            }
        }
        private ObjectSet<ReaderType> _ReaderTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ReaderEvent> ReaderEvents
        {
            get
            {
                if ((_ReaderEvents == null))
                {
                    _ReaderEvents = base.CreateObjectSet<ReaderEvent>("ReaderEvents");
                }
                return _ReaderEvents;
            }
        }
        private ObjectSet<ReaderEvent> _ReaderEvents;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Guest> Guests
        {
            get
            {
                if ((_Guests == null))
                {
                    _Guests = base.CreateObjectSet<Guest>("Guests");
                }
                return _Guests;
            }
        }
        private ObjectSet<Guest> _Guests;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MagicBand> MagicBands
        {
            get
            {
                if ((_MagicBands == null))
                {
                    _MagicBands = base.CreateObjectSet<MagicBand>("MagicBands");
                }
                return _MagicBands;
            }
        }
        private ObjectSet<MagicBand> _MagicBands;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Attractions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAttractions(Attraction attraction)
        {
            base.AddObject("Attractions", attraction);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Controllers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToControllers(Controller controller)
        {
            base.AddObject("Controllers", controller);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Readers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToReaders(Reader reader)
        {
            base.AddObject("Readers", reader);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ReaderLocationTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToReaderLocationTypes(ReaderLocationType readerLocationType)
        {
            base.AddObject("ReaderLocationTypes", readerLocationType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ReaderTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToReaderTypes(ReaderType readerType)
        {
            base.AddObject("ReaderTypes", readerType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ReaderEvents EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToReaderEvents(ReaderEvent readerEvent)
        {
            base.AddObject("ReaderEvents", readerEvent);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Guests EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGuests(Guest guest)
        {
            base.AddObject("Guests", guest);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MagicBands EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMagicBands(MagicBand magicBand)
        {
            base.AddObject("MagicBands", magicBand);
        }

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="readerID">No Metadata Documentation available.</param>
        /// <param name="bandID">No Metadata Documentation available.</param>
        /// <param name="lastEventNumber">No Metadata Documentation available.</param>
        /// <param name="maximumEvents">No Metadata Documentation available.</param>
        public ObjectResult<GetReaderEvents_Result> GetReaderEvents(Nullable<global::System.Int32> readerID, global::System.String bandID, Nullable<global::System.Int64> lastEventNumber, Nullable<global::System.Int32> maximumEvents)
        {
            ObjectParameter readerIDParameter;
            if (readerID.HasValue)
            {
                readerIDParameter = new ObjectParameter("ReaderID", readerID);
            }
            else
            {
                readerIDParameter = new ObjectParameter("ReaderID", typeof(global::System.Int32));
            }
    
            ObjectParameter bandIDParameter;
            if (bandID != null)
            {
                bandIDParameter = new ObjectParameter("BandID", bandID);
            }
            else
            {
                bandIDParameter = new ObjectParameter("BandID", typeof(global::System.String));
            }
    
            ObjectParameter lastEventNumberParameter;
            if (lastEventNumber.HasValue)
            {
                lastEventNumberParameter = new ObjectParameter("LastEventNumber", lastEventNumber);
            }
            else
            {
                lastEventNumberParameter = new ObjectParameter("LastEventNumber", typeof(global::System.Int64));
            }
    
            ObjectParameter maximumEventsParameter;
            if (maximumEvents.HasValue)
            {
                maximumEventsParameter = new ObjectParameter("MaximumEvents", maximumEvents);
            }
            else
            {
                maximumEventsParameter = new ObjectParameter("MaximumEvents", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<GetReaderEvents_Result>("GetReaderEvents", readerIDParameter, bandIDParameter, lastEventNumberParameter, maximumEventsParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="readerID">No Metadata Documentation available.</param>
        /// <param name="bandID">No Metadata Documentation available.</param>
        /// <param name="signalStrength">No Metadata Documentation available.</param>
        /// <param name="channel">No Metadata Documentation available.</param>
        /// <param name="packetSequence">No Metadata Documentation available.</param>
        /// <param name="frequency">No Metadata Documentation available.</param>
        public int WriteReaderEvent(Nullable<global::System.Int64> readerID, global::System.String bandID, Nullable<global::System.Int32> signalStrength, Nullable<global::System.Int32> channel, Nullable<global::System.Int32> packetSequence, Nullable<global::System.Int32> frequency)
        {
            ObjectParameter readerIDParameter;
            if (readerID.HasValue)
            {
                readerIDParameter = new ObjectParameter("ReaderID", readerID);
            }
            else
            {
                readerIDParameter = new ObjectParameter("ReaderID", typeof(global::System.Int64));
            }
    
            ObjectParameter bandIDParameter;
            if (bandID != null)
            {
                bandIDParameter = new ObjectParameter("BandID", bandID);
            }
            else
            {
                bandIDParameter = new ObjectParameter("BandID", typeof(global::System.String));
            }
    
            ObjectParameter signalStrengthParameter;
            if (signalStrength.HasValue)
            {
                signalStrengthParameter = new ObjectParameter("SignalStrength", signalStrength);
            }
            else
            {
                signalStrengthParameter = new ObjectParameter("SignalStrength", typeof(global::System.Int32));
            }
    
            ObjectParameter channelParameter;
            if (channel.HasValue)
            {
                channelParameter = new ObjectParameter("Channel", channel);
            }
            else
            {
                channelParameter = new ObjectParameter("Channel", typeof(global::System.Int32));
            }
    
            ObjectParameter packetSequenceParameter;
            if (packetSequence.HasValue)
            {
                packetSequenceParameter = new ObjectParameter("PacketSequence", packetSequence);
            }
            else
            {
                packetSequenceParameter = new ObjectParameter("PacketSequence", typeof(global::System.Int32));
            }
    
            ObjectParameter frequencyParameter;
            if (frequency.HasValue)
            {
                frequencyParameter = new ObjectParameter("Frequency", frequency);
            }
            else
            {
                frequencyParameter = new ObjectParameter("Frequency", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("WriteReaderEvent", readerIDParameter, bandIDParameter, signalStrengthParameter, channelParameter, packetSequenceParameter, frequencyParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        public int ClearGuestQueue(Nullable<global::System.Int32> attractionID)
        {
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("ClearGuestQueue", attractionIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="guestID">No Metadata Documentation available.</param>
        /// <param name="lastName">No Metadata Documentation available.</param>
        /// <param name="firstName">No Metadata Documentation available.</param>
        public int AddGuest(Nullable<global::System.Int64> guestID, global::System.String lastName, global::System.String firstName)
        {
            ObjectParameter guestIDParameter;
            if (guestID.HasValue)
            {
                guestIDParameter = new ObjectParameter("GuestID", guestID);
            }
            else
            {
                guestIDParameter = new ObjectParameter("GuestID", typeof(global::System.Int64));
            }
    
            ObjectParameter lastNameParameter;
            if (lastName != null)
            {
                lastNameParameter = new ObjectParameter("LastName", lastName);
            }
            else
            {
                lastNameParameter = new ObjectParameter("LastName", typeof(global::System.String));
            }
    
            ObjectParameter firstNameParameter;
            if (firstName != null)
            {
                firstNameParameter = new ObjectParameter("FirstName", firstName);
            }
            else
            {
                firstNameParameter = new ObjectParameter("FirstName", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("AddGuest", guestIDParameter, lastNameParameter, firstNameParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        /// <param name="simulationTime">No Metadata Documentation available.</param>
        public int InitializeGuestQueue(Nullable<global::System.Int32> attractionID, Nullable<global::System.DateTime> simulationTime)
        {
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            ObjectParameter simulationTimeParameter;
            if (simulationTime.HasValue)
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", simulationTime);
            }
            else
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("InitializeGuestQueue", attractionIDParameter, simulationTimeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        /// <param name="simulationTime">No Metadata Documentation available.</param>
        public int UpdateEntered(Nullable<global::System.Int32> attractionID, Nullable<global::System.DateTime> simulationTime)
        {
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            ObjectParameter simulationTimeParameter;
            if (simulationTime.HasValue)
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", simulationTime);
            }
            else
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("UpdateEntered", attractionIDParameter, simulationTimeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        /// <param name="simulationTime">No Metadata Documentation available.</param>
        public int UpdateInQueue(Nullable<global::System.Int32> attractionID, Nullable<global::System.DateTime> simulationTime)
        {
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            ObjectParameter simulationTimeParameter;
            if (simulationTime.HasValue)
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", simulationTime);
            }
            else
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("UpdateInQueue", attractionIDParameter, simulationTimeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        /// <param name="guestsToMerge">No Metadata Documentation available.</param>
        /// <param name="simulationTime">No Metadata Documentation available.</param>
        public int UpdateMerging(Nullable<global::System.Int32> attractionID, Nullable<global::System.Int32> guestsToMerge, Nullable<global::System.DateTime> simulationTime)
        {
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            ObjectParameter guestsToMergeParameter;
            if (guestsToMerge.HasValue)
            {
                guestsToMergeParameter = new ObjectParameter("GuestsToMerge", guestsToMerge);
            }
            else
            {
                guestsToMergeParameter = new ObjectParameter("GuestsToMerge", typeof(global::System.Int32));
            }
    
            ObjectParameter simulationTimeParameter;
            if (simulationTime.HasValue)
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", simulationTime);
            }
            else
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("UpdateMerging", attractionIDParameter, guestsToMergeParameter, simulationTimeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        /// <param name="guestsToLoad">No Metadata Documentation available.</param>
        /// <param name="simulationTime">No Metadata Documentation available.</param>
        public int UpdateLoading(Nullable<global::System.Int32> attractionID, Nullable<global::System.Int32> guestsToLoad, Nullable<global::System.DateTime> simulationTime)
        {
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            ObjectParameter guestsToLoadParameter;
            if (guestsToLoad.HasValue)
            {
                guestsToLoadParameter = new ObjectParameter("GuestsToLoad", guestsToLoad);
            }
            else
            {
                guestsToLoadParameter = new ObjectParameter("GuestsToLoad", typeof(global::System.Int32));
            }
    
            ObjectParameter simulationTimeParameter;
            if (simulationTime.HasValue)
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", simulationTime);
            }
            else
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("UpdateLoading", attractionIDParameter, guestsToLoadParameter, simulationTimeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        /// <param name="simulationTime">No Metadata Documentation available.</param>
        public ObjectResult<Nullable<global::System.Int32>> UpdateRiding(Nullable<global::System.Int32> attractionID, Nullable<global::System.DateTime> simulationTime)
        {
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            ObjectParameter simulationTimeParameter;
            if (simulationTime.HasValue)
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", simulationTime);
            }
            else
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction<Nullable<global::System.Int32>>("UpdateRiding", attractionIDParameter, simulationTimeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        /// <param name="simulationTime">No Metadata Documentation available.</param>
        public int UpdateExited(Nullable<global::System.Int32> attractionID, Nullable<global::System.DateTime> simulationTime)
        {
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            ObjectParameter simulationTimeParameter;
            if (simulationTime.HasValue)
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", simulationTime);
            }
            else
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("UpdateExited", attractionIDParameter, simulationTimeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        /// <param name="simulationTime">No Metadata Documentation available.</param>
        public int UpdateOutOfRange(Nullable<global::System.Int32> attractionID, Nullable<global::System.DateTime> simulationTime)
        {
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            ObjectParameter simulationTimeParameter;
            if (simulationTime.HasValue)
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", simulationTime);
            }
            else
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("UpdateOutOfRange", attractionIDParameter, simulationTimeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="guestID">No Metadata Documentation available.</param>
        /// <param name="magicBandID">No Metadata Documentation available.</param>
        /// <param name="bandID">No Metadata Documentation available.</param>
        /// <param name="tapID">No Metadata Documentation available.</param>
        /// <param name="longRangeID">No Metadata Documentation available.</param>
        public int AddMagicBand(Nullable<global::System.Int64> guestID, Nullable<global::System.Int64> magicBandID, global::System.String bandID, global::System.String tapID, global::System.String longRangeID)
        {
            ObjectParameter guestIDParameter;
            if (guestID.HasValue)
            {
                guestIDParameter = new ObjectParameter("GuestID", guestID);
            }
            else
            {
                guestIDParameter = new ObjectParameter("GuestID", typeof(global::System.Int64));
            }
    
            ObjectParameter magicBandIDParameter;
            if (magicBandID.HasValue)
            {
                magicBandIDParameter = new ObjectParameter("MagicBandID", magicBandID);
            }
            else
            {
                magicBandIDParameter = new ObjectParameter("MagicBandID", typeof(global::System.Int64));
            }
    
            ObjectParameter bandIDParameter;
            if (bandID != null)
            {
                bandIDParameter = new ObjectParameter("BandID", bandID);
            }
            else
            {
                bandIDParameter = new ObjectParameter("BandID", typeof(global::System.String));
            }
    
            ObjectParameter tapIDParameter;
            if (tapID != null)
            {
                tapIDParameter = new ObjectParameter("TapID", tapID);
            }
            else
            {
                tapIDParameter = new ObjectParameter("TapID", typeof(global::System.String));
            }
    
            ObjectParameter longRangeIDParameter;
            if (longRangeID != null)
            {
                longRangeIDParameter = new ObjectParameter("LongRangeID", longRangeID);
            }
            else
            {
                longRangeIDParameter = new ObjectParameter("LongRangeID", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("AddMagicBand", guestIDParameter, magicBandIDParameter, bandIDParameter, tapIDParameter, longRangeIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        public int GetGuestsInQueue(Nullable<global::System.Int32> attractionID)
        {
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("GetGuestsInQueue", attractionIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        /// <param name="simulationTime">No Metadata Documentation available.</param>
        public int CreateReaderEvents(Nullable<global::System.Int32> attractionID, Nullable<global::System.DateTime> simulationTime)
        {
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            ObjectParameter simulationTimeParameter;
            if (simulationTime.HasValue)
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", simulationTime);
            }
            else
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("CreateReaderEvents", attractionIDParameter, simulationTimeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="simulationTime">No Metadata Documentation available.</param>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        public int ResetMagicBands(Nullable<global::System.DateTime> simulationTime, Nullable<global::System.Int32> attractionID)
        {
            ObjectParameter simulationTimeParameter;
            if (simulationTime.HasValue)
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", simulationTime);
            }
            else
            {
                simulationTimeParameter = new ObjectParameter("SimulationTime", typeof(global::System.DateTime));
            }
    
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("ResetMagicBands", simulationTimeParameter, attractionIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectResult<Guest> GetGuests()
        {
            return base.ExecuteFunction<Guest>("GetGuests");
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="mergeOption"></param>
        public ObjectResult<Guest> GetGuests(MergeOption mergeOption)
        {
            return base.ExecuteFunction<Guest>("GetGuests", mergeOption);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        public ObjectResult<GetStatistics_Result> GetStatistics(Nullable<global::System.Int32> attractionID)
        {
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<GetStatistics_Result>("GetStatistics", attractionIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="guestID">No Metadata Documentation available.</param>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        /// <param name="entryTime">No Metadata Documentation available.</param>
        /// <param name="hasFastPassPlus">No Metadata Documentation available.</param>
        /// <param name="guestState">No Metadata Documentation available.</param>
        /// <param name="xPosition">No Metadata Documentation available.</param>
        /// <param name="yPosition">No Metadata Documentation available.</param>
        /// <param name="loadTime">No Metadata Documentation available.</param>
        /// <param name="exitTime">No Metadata Documentation available.</param>
        public int UpdateGuestPosition(Nullable<global::System.Int64> guestID, Nullable<global::System.Int32> attractionID, Nullable<global::System.TimeSpan> entryTime, Nullable<global::System.Boolean> hasFastPassPlus, Nullable<global::System.Int32> guestState, Nullable<global::System.Double> xPosition, Nullable<global::System.Double> yPosition, Nullable<global::System.TimeSpan> loadTime, Nullable<global::System.TimeSpan> exitTime)
        {
            ObjectParameter guestIDParameter;
            if (guestID.HasValue)
            {
                guestIDParameter = new ObjectParameter("GuestID", guestID);
            }
            else
            {
                guestIDParameter = new ObjectParameter("GuestID", typeof(global::System.Int64));
            }
    
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            ObjectParameter entryTimeParameter;
            if (entryTime.HasValue)
            {
                entryTimeParameter = new ObjectParameter("EntryTime", entryTime);
            }
            else
            {
                entryTimeParameter = new ObjectParameter("EntryTime", typeof(global::System.TimeSpan));
            }
    
            ObjectParameter hasFastPassPlusParameter;
            if (hasFastPassPlus.HasValue)
            {
                hasFastPassPlusParameter = new ObjectParameter("HasFastPassPlus", hasFastPassPlus);
            }
            else
            {
                hasFastPassPlusParameter = new ObjectParameter("HasFastPassPlus", typeof(global::System.Boolean));
            }
    
            ObjectParameter guestStateParameter;
            if (guestState.HasValue)
            {
                guestStateParameter = new ObjectParameter("GuestState", guestState);
            }
            else
            {
                guestStateParameter = new ObjectParameter("GuestState", typeof(global::System.Int32));
            }
    
            ObjectParameter xPositionParameter;
            if (xPosition.HasValue)
            {
                xPositionParameter = new ObjectParameter("xPosition", xPosition);
            }
            else
            {
                xPositionParameter = new ObjectParameter("xPosition", typeof(global::System.Double));
            }
    
            ObjectParameter yPositionParameter;
            if (yPosition.HasValue)
            {
                yPositionParameter = new ObjectParameter("yPosition", yPosition);
            }
            else
            {
                yPositionParameter = new ObjectParameter("yPosition", typeof(global::System.Double));
            }
    
            ObjectParameter loadTimeParameter;
            if (loadTime.HasValue)
            {
                loadTimeParameter = new ObjectParameter("LoadTime", loadTime);
            }
            else
            {
                loadTimeParameter = new ObjectParameter("LoadTime", typeof(global::System.TimeSpan));
            }
    
            ObjectParameter exitTimeParameter;
            if (exitTime.HasValue)
            {
                exitTimeParameter = new ObjectParameter("ExitTime", exitTime);
            }
            else
            {
                exitTimeParameter = new ObjectParameter("ExitTime", typeof(global::System.TimeSpan));
            }
    
            return base.ExecuteFunction("UpdateGuestPosition", guestIDParameter, attractionIDParameter, entryTimeParameter, hasFastPassPlusParameter, guestStateParameter, xPositionParameter, yPositionParameter, loadTimeParameter, exitTimeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        public ObjectResult<GetGuestPositions_Result> GetGuestPositions(Nullable<global::System.Int32> attractionID)
        {
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<GetGuestPositions_Result>("GetGuestPositions", attractionIDParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="attractionID">No Metadata Documentation available.</param>
        public ObjectResult<GetGuestStates_Result> GetGuestStates(Nullable<global::System.Int32> attractionID)
        {
            ObjectParameter attractionIDParameter;
            if (attractionID.HasValue)
            {
                attractionIDParameter = new ObjectParameter("AttractionID", attractionID);
            }
            else
            {
                attractionIDParameter = new ObjectParameter("AttractionID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<GetGuestStates_Result>("GetGuestStates", attractionIDParameter);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SimulatorModel", Name="Attraction")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Attraction : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Attraction object.
        /// </summary>
        /// <param name="attractionID">Initial value of the AttractionID property.</param>
        /// <param name="attractionName">Initial value of the AttractionName property.</param>
        /// <param name="mergeRatio">Initial value of the MergeRatio property.</param>
        /// <param name="guestsPerHour">Initial value of the GuestsPerHour property.</param>
        /// <param name="tapOnly">Initial value of the TapOnly property.</param>
        /// <param name="standByBandRatio">Initial value of the StandByBandRatio property.</param>
        /// <param name="standByArrivalRate">Initial value of the StandByArrivalRate property.</param>
        /// <param name="fastPassPlusArrivalRate">Initial value of the FastPassPlusArrivalRate property.</param>
        public static Attraction CreateAttraction(global::System.Int32 attractionID, global::System.String attractionName, global::System.Decimal mergeRatio, global::System.Int32 guestsPerHour, global::System.Boolean tapOnly, global::System.Decimal standByBandRatio, global::System.Int32 standByArrivalRate, global::System.Int32 fastPassPlusArrivalRate)
        {
            Attraction attraction = new Attraction();
            attraction.AttractionID = attractionID;
            attraction.AttractionName = attractionName;
            attraction.MergeRatio = mergeRatio;
            attraction.GuestsPerHour = guestsPerHour;
            attraction.TapOnly = tapOnly;
            attraction.StandByBandRatio = standByBandRatio;
            attraction.StandByArrivalRate = standByArrivalRate;
            attraction.FastPassPlusArrivalRate = fastPassPlusArrivalRate;
            return attraction;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AttractionID
        {
            get
            {
                return _AttractionID;
            }
            set
            {
                if (_AttractionID != value)
                {
                    OnAttractionIDChanging(value);
                    ReportPropertyChanging("AttractionID");
                    _AttractionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AttractionID");
                    OnAttractionIDChanged();
                }
            }
        }
        private global::System.Int32 _AttractionID;
        partial void OnAttractionIDChanging(global::System.Int32 value);
        partial void OnAttractionIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AttractionName
        {
            get
            {
                return _AttractionName;
            }
            set
            {
                OnAttractionNameChanging(value);
                ReportPropertyChanging("AttractionName");
                _AttractionName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("AttractionName");
                OnAttractionNameChanged();
            }
        }
        private global::System.String _AttractionName;
        partial void OnAttractionNameChanging(global::System.String value);
        partial void OnAttractionNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal MergeRatio
        {
            get
            {
                return _MergeRatio;
            }
            set
            {
                OnMergeRatioChanging(value);
                ReportPropertyChanging("MergeRatio");
                _MergeRatio = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MergeRatio");
                OnMergeRatioChanged();
            }
        }
        private global::System.Decimal _MergeRatio;
        partial void OnMergeRatioChanging(global::System.Decimal value);
        partial void OnMergeRatioChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GuestsPerHour
        {
            get
            {
                return _GuestsPerHour;
            }
            set
            {
                OnGuestsPerHourChanging(value);
                ReportPropertyChanging("GuestsPerHour");
                _GuestsPerHour = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GuestsPerHour");
                OnGuestsPerHourChanged();
            }
        }
        private global::System.Int32 _GuestsPerHour;
        partial void OnGuestsPerHourChanging(global::System.Int32 value);
        partial void OnGuestsPerHourChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean TapOnly
        {
            get
            {
                return _TapOnly;
            }
            set
            {
                OnTapOnlyChanging(value);
                ReportPropertyChanging("TapOnly");
                _TapOnly = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TapOnly");
                OnTapOnlyChanged();
            }
        }
        private global::System.Boolean _TapOnly;
        partial void OnTapOnlyChanging(global::System.Boolean value);
        partial void OnTapOnlyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal StandByBandRatio
        {
            get
            {
                return _StandByBandRatio;
            }
            set
            {
                OnStandByBandRatioChanging(value);
                ReportPropertyChanging("StandByBandRatio");
                _StandByBandRatio = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StandByBandRatio");
                OnStandByBandRatioChanged();
            }
        }
        private global::System.Decimal _StandByBandRatio;
        partial void OnStandByBandRatioChanging(global::System.Decimal value);
        partial void OnStandByBandRatioChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StandByArrivalRate
        {
            get
            {
                return _StandByArrivalRate;
            }
            set
            {
                OnStandByArrivalRateChanging(value);
                ReportPropertyChanging("StandByArrivalRate");
                _StandByArrivalRate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StandByArrivalRate");
                OnStandByArrivalRateChanged();
            }
        }
        private global::System.Int32 _StandByArrivalRate;
        partial void OnStandByArrivalRateChanging(global::System.Int32 value);
        partial void OnStandByArrivalRateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FastPassPlusArrivalRate
        {
            get
            {
                return _FastPassPlusArrivalRate;
            }
            set
            {
                OnFastPassPlusArrivalRateChanging(value);
                ReportPropertyChanging("FastPassPlusArrivalRate");
                _FastPassPlusArrivalRate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FastPassPlusArrivalRate");
                OnFastPassPlusArrivalRateChanged();
            }
        }
        private global::System.Int32 _FastPassPlusArrivalRate;
        partial void OnFastPassPlusArrivalRateChanging(global::System.Int32 value);
        partial void OnFastPassPlusArrivalRateChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SimulatorModel", "FK_Controller_Attraction", "Controller")]
        public Controller Controller
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Controller>("SimulatorModel.FK_Controller_Attraction", "Controller").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Controller>("SimulatorModel.FK_Controller_Attraction", "Controller").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Controller> ControllerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Controller>("SimulatorModel.FK_Controller_Attraction", "Controller");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Controller>("SimulatorModel.FK_Controller_Attraction", "Controller", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SimulatorModel", Name="Controller")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Controller : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Controller object.
        /// </summary>
        /// <param name="controllerID">Initial value of the ControllerID property.</param>
        /// <param name="controllerURL">Initial value of the ControllerURL property.</param>
        /// <param name="controllerName">Initial value of the ControllerName property.</param>
        public static Controller CreateController(global::System.Int32 controllerID, global::System.String controllerURL, global::System.String controllerName)
        {
            Controller controller = new Controller();
            controller.ControllerID = controllerID;
            controller.ControllerURL = controllerURL;
            controller.ControllerName = controllerName;
            return controller;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ControllerID
        {
            get
            {
                return _ControllerID;
            }
            set
            {
                if (_ControllerID != value)
                {
                    OnControllerIDChanging(value);
                    ReportPropertyChanging("ControllerID");
                    _ControllerID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ControllerID");
                    OnControllerIDChanged();
                }
            }
        }
        private global::System.Int32 _ControllerID;
        partial void OnControllerIDChanging(global::System.Int32 value);
        partial void OnControllerIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ControllerURL
        {
            get
            {
                return _ControllerURL;
            }
            set
            {
                OnControllerURLChanging(value);
                ReportPropertyChanging("ControllerURL");
                _ControllerURL = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ControllerURL");
                OnControllerURLChanged();
            }
        }
        private global::System.String _ControllerURL;
        partial void OnControllerURLChanging(global::System.String value);
        partial void OnControllerURLChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ControllerName
        {
            get
            {
                return _ControllerName;
            }
            set
            {
                OnControllerNameChanging(value);
                ReportPropertyChanging("ControllerName");
                _ControllerName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ControllerName");
                OnControllerNameChanged();
            }
        }
        private global::System.String _ControllerName;
        partial void OnControllerNameChanging(global::System.String value);
        partial void OnControllerNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SimulatorModel", "FK_Controller_Attraction", "Attraction")]
        public Attraction Attraction
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Attraction>("SimulatorModel.FK_Controller_Attraction", "Attraction").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Attraction>("SimulatorModel.FK_Controller_Attraction", "Attraction").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Attraction> AttractionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Attraction>("SimulatorModel.FK_Controller_Attraction", "Attraction");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Attraction>("SimulatorModel.FK_Controller_Attraction", "Attraction", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SimulatorModel", "FK_Reader_Controller", "Reader")]
        public EntityCollection<Reader> Readers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Reader>("SimulatorModel.FK_Reader_Controller", "Reader");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Reader>("SimulatorModel.FK_Reader_Controller", "Reader", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SimulatorModel", Name="Guest")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Guest : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Guest object.
        /// </summary>
        /// <param name="guestID">Initial value of the GuestID property.</param>
        /// <param name="lastName">Initial value of the LastName property.</param>
        /// <param name="firstName">Initial value of the FirstName property.</param>
        public static Guest CreateGuest(global::System.Int64 guestID, global::System.String lastName, global::System.String firstName)
        {
            Guest guest = new Guest();
            guest.GuestID = guestID;
            guest.LastName = lastName;
            guest.FirstName = firstName;
            return guest;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GuestID
        {
            get
            {
                return _GuestID;
            }
            set
            {
                if (_GuestID != value)
                {
                    OnGuestIDChanging(value);
                    ReportPropertyChanging("GuestID");
                    _GuestID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GuestID");
                    OnGuestIDChanged();
                }
            }
        }
        private global::System.Int64 _GuestID;
        partial void OnGuestIDChanging(global::System.Int64 value);
        partial void OnGuestIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SimulatorModel", "FK_MagicBand_MagicBand", "MagicBand")]
        public EntityCollection<MagicBand> MagicBands
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MagicBand>("SimulatorModel.FK_MagicBand_MagicBand", "MagicBand");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MagicBand>("SimulatorModel.FK_MagicBand_MagicBand", "MagicBand", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SimulatorModel", Name="MagicBand")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MagicBand : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MagicBand object.
        /// </summary>
        /// <param name="magicBandID">Initial value of the MagicBandID property.</param>
        /// <param name="bandID">Initial value of the BandID property.</param>
        /// <param name="tapID">Initial value of the TapID property.</param>
        /// <param name="longRangeID">Initial value of the LongRangeID property.</param>
        /// <param name="guestID">Initial value of the GuestID property.</param>
        /// <param name="packetSequence">Initial value of the PacketSequence property.</param>
        /// <param name="nextTransmit">Initial value of the NextTransmit property.</param>
        public static MagicBand CreateMagicBand(global::System.Int64 magicBandID, global::System.String bandID, global::System.String tapID, global::System.String longRangeID, global::System.Int64 guestID, global::System.Int32 packetSequence, global::System.DateTime nextTransmit)
        {
            MagicBand magicBand = new MagicBand();
            magicBand.MagicBandID = magicBandID;
            magicBand.BandID = bandID;
            magicBand.TapID = tapID;
            magicBand.LongRangeID = longRangeID;
            magicBand.GuestID = guestID;
            magicBand.PacketSequence = packetSequence;
            magicBand.NextTransmit = nextTransmit;
            return magicBand;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 MagicBandID
        {
            get
            {
                return _MagicBandID;
            }
            set
            {
                if (_MagicBandID != value)
                {
                    OnMagicBandIDChanging(value);
                    ReportPropertyChanging("MagicBandID");
                    _MagicBandID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MagicBandID");
                    OnMagicBandIDChanged();
                }
            }
        }
        private global::System.Int64 _MagicBandID;
        partial void OnMagicBandIDChanging(global::System.Int64 value);
        partial void OnMagicBandIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String BandID
        {
            get
            {
                return _BandID;
            }
            set
            {
                OnBandIDChanging(value);
                ReportPropertyChanging("BandID");
                _BandID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("BandID");
                OnBandIDChanged();
            }
        }
        private global::System.String _BandID;
        partial void OnBandIDChanging(global::System.String value);
        partial void OnBandIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TapID
        {
            get
            {
                return _TapID;
            }
            set
            {
                OnTapIDChanging(value);
                ReportPropertyChanging("TapID");
                _TapID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TapID");
                OnTapIDChanged();
            }
        }
        private global::System.String _TapID;
        partial void OnTapIDChanging(global::System.String value);
        partial void OnTapIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LongRangeID
        {
            get
            {
                return _LongRangeID;
            }
            set
            {
                OnLongRangeIDChanging(value);
                ReportPropertyChanging("LongRangeID");
                _LongRangeID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LongRangeID");
                OnLongRangeIDChanged();
            }
        }
        private global::System.String _LongRangeID;
        partial void OnLongRangeIDChanging(global::System.String value);
        partial void OnLongRangeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GuestID
        {
            get
            {
                return _GuestID;
            }
            set
            {
                OnGuestIDChanging(value);
                ReportPropertyChanging("GuestID");
                _GuestID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GuestID");
                OnGuestIDChanged();
            }
        }
        private global::System.Int64 _GuestID;
        partial void OnGuestIDChanging(global::System.Int64 value);
        partial void OnGuestIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PacketSequence
        {
            get
            {
                return _PacketSequence;
            }
            set
            {
                OnPacketSequenceChanging(value);
                ReportPropertyChanging("PacketSequence");
                _PacketSequence = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PacketSequence");
                OnPacketSequenceChanged();
            }
        }
        private global::System.Int32 _PacketSequence;
        partial void OnPacketSequenceChanging(global::System.Int32 value);
        partial void OnPacketSequenceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime NextTransmit
        {
            get
            {
                return _NextTransmit;
            }
            set
            {
                OnNextTransmitChanging(value);
                ReportPropertyChanging("NextTransmit");
                _NextTransmit = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NextTransmit");
                OnNextTransmitChanged();
            }
        }
        private global::System.DateTime _NextTransmit;
        partial void OnNextTransmitChanging(global::System.DateTime value);
        partial void OnNextTransmitChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SimulatorModel", "FK_MagicBand_MagicBand", "Guest")]
        public Guest Guest
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Guest>("SimulatorModel.FK_MagicBand_MagicBand", "Guest").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Guest>("SimulatorModel.FK_MagicBand_MagicBand", "Guest").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Guest> GuestReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Guest>("SimulatorModel.FK_MagicBand_MagicBand", "Guest");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Guest>("SimulatorModel.FK_MagicBand_MagicBand", "Guest", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SimulatorModel", Name="Reader")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Reader : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Reader object.
        /// </summary>
        /// <param name="readerID">Initial value of the ReaderID property.</param>
        /// <param name="readerName">Initial value of the ReaderName property.</param>
        /// <param name="readerTypeID">Initial value of the ReaderTypeID property.</param>
        /// <param name="readerLocationTypeID">Initial value of the ReaderLocationTypeID property.</param>
        /// <param name="webport">Initial value of the Webport property.</param>
        /// <param name="upstreamUrl">Initial value of the UpstreamUrl property.</param>
        /// <param name="eventsInterval">Initial value of the EventsInterval property.</param>
        /// <param name="maximumEvents">Initial value of the MaximumEvents property.</param>
        /// <param name="lastUpstreamEvent">Initial value of the LastUpstreamEvent property.</param>
        /// <param name="controllerID">Initial value of the ControllerID property.</param>
        /// <param name="xCoordinate">Initial value of the xCoordinate property.</param>
        /// <param name="yCoordinate">Initial value of the yCoordinate property.</param>
        /// <param name="range">Initial value of the Range property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        public static Reader CreateReader(global::System.Int32 readerID, global::System.String readerName, global::System.Int32 readerTypeID, global::System.Int32 readerLocationTypeID, global::System.Int32 webport, global::System.String upstreamUrl, global::System.Int32 eventsInterval, global::System.Int32 maximumEvents, global::System.Int64 lastUpstreamEvent, global::System.Int32 controllerID, global::System.Int32 xCoordinate, global::System.Int32 yCoordinate, global::System.Int32 range, global::System.Boolean isActive)
        {
            Reader reader = new Reader();
            reader.ReaderID = readerID;
            reader.ReaderName = readerName;
            reader.ReaderTypeID = readerTypeID;
            reader.ReaderLocationTypeID = readerLocationTypeID;
            reader.Webport = webport;
            reader.UpstreamUrl = upstreamUrl;
            reader.EventsInterval = eventsInterval;
            reader.MaximumEvents = maximumEvents;
            reader.LastUpstreamEvent = lastUpstreamEvent;
            reader.ControllerID = controllerID;
            reader.xCoordinate = xCoordinate;
            reader.yCoordinate = yCoordinate;
            reader.Range = range;
            reader.IsActive = isActive;
            return reader;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ReaderID
        {
            get
            {
                return _ReaderID;
            }
            set
            {
                if (_ReaderID != value)
                {
                    OnReaderIDChanging(value);
                    ReportPropertyChanging("ReaderID");
                    _ReaderID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ReaderID");
                    OnReaderIDChanged();
                }
            }
        }
        private global::System.Int32 _ReaderID;
        partial void OnReaderIDChanging(global::System.Int32 value);
        partial void OnReaderIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ReaderName
        {
            get
            {
                return _ReaderName;
            }
            set
            {
                OnReaderNameChanging(value);
                ReportPropertyChanging("ReaderName");
                _ReaderName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ReaderName");
                OnReaderNameChanged();
            }
        }
        private global::System.String _ReaderName;
        partial void OnReaderNameChanging(global::System.String value);
        partial void OnReaderNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ReaderTypeID
        {
            get
            {
                return _ReaderTypeID;
            }
            set
            {
                OnReaderTypeIDChanging(value);
                ReportPropertyChanging("ReaderTypeID");
                _ReaderTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReaderTypeID");
                OnReaderTypeIDChanged();
            }
        }
        private global::System.Int32 _ReaderTypeID;
        partial void OnReaderTypeIDChanging(global::System.Int32 value);
        partial void OnReaderTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ReaderLocationTypeID
        {
            get
            {
                return _ReaderLocationTypeID;
            }
            set
            {
                OnReaderLocationTypeIDChanging(value);
                ReportPropertyChanging("ReaderLocationTypeID");
                _ReaderLocationTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReaderLocationTypeID");
                OnReaderLocationTypeIDChanged();
            }
        }
        private global::System.Int32 _ReaderLocationTypeID;
        partial void OnReaderLocationTypeIDChanging(global::System.Int32 value);
        partial void OnReaderLocationTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Webport
        {
            get
            {
                return _Webport;
            }
            set
            {
                OnWebportChanging(value);
                ReportPropertyChanging("Webport");
                _Webport = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Webport");
                OnWebportChanged();
            }
        }
        private global::System.Int32 _Webport;
        partial void OnWebportChanging(global::System.Int32 value);
        partial void OnWebportChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String UpstreamUrl
        {
            get
            {
                return _UpstreamUrl;
            }
            set
            {
                OnUpstreamUrlChanging(value);
                ReportPropertyChanging("UpstreamUrl");
                _UpstreamUrl = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("UpstreamUrl");
                OnUpstreamUrlChanged();
            }
        }
        private global::System.String _UpstreamUrl;
        partial void OnUpstreamUrlChanging(global::System.String value);
        partial void OnUpstreamUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EventsInterval
        {
            get
            {
                return _EventsInterval;
            }
            set
            {
                OnEventsIntervalChanging(value);
                ReportPropertyChanging("EventsInterval");
                _EventsInterval = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EventsInterval");
                OnEventsIntervalChanged();
            }
        }
        private global::System.Int32 _EventsInterval;
        partial void OnEventsIntervalChanging(global::System.Int32 value);
        partial void OnEventsIntervalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 MaximumEvents
        {
            get
            {
                return _MaximumEvents;
            }
            set
            {
                OnMaximumEventsChanging(value);
                ReportPropertyChanging("MaximumEvents");
                _MaximumEvents = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MaximumEvents");
                OnMaximumEventsChanged();
            }
        }
        private global::System.Int32 _MaximumEvents;
        partial void OnMaximumEventsChanging(global::System.Int32 value);
        partial void OnMaximumEventsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 LastUpstreamEvent
        {
            get
            {
                return _LastUpstreamEvent;
            }
            set
            {
                OnLastUpstreamEventChanging(value);
                ReportPropertyChanging("LastUpstreamEvent");
                _LastUpstreamEvent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LastUpstreamEvent");
                OnLastUpstreamEventChanged();
            }
        }
        private global::System.Int64 _LastUpstreamEvent;
        partial void OnLastUpstreamEventChanging(global::System.Int64 value);
        partial void OnLastUpstreamEventChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ControllerID
        {
            get
            {
                return _ControllerID;
            }
            set
            {
                OnControllerIDChanging(value);
                ReportPropertyChanging("ControllerID");
                _ControllerID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ControllerID");
                OnControllerIDChanged();
            }
        }
        private global::System.Int32 _ControllerID;
        partial void OnControllerIDChanging(global::System.Int32 value);
        partial void OnControllerIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 xCoordinate
        {
            get
            {
                return _xCoordinate;
            }
            set
            {
                OnxCoordinateChanging(value);
                ReportPropertyChanging("xCoordinate");
                _xCoordinate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("xCoordinate");
                OnxCoordinateChanged();
            }
        }
        private global::System.Int32 _xCoordinate;
        partial void OnxCoordinateChanging(global::System.Int32 value);
        partial void OnxCoordinateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 yCoordinate
        {
            get
            {
                return _yCoordinate;
            }
            set
            {
                OnyCoordinateChanging(value);
                ReportPropertyChanging("yCoordinate");
                _yCoordinate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("yCoordinate");
                OnyCoordinateChanged();
            }
        }
        private global::System.Int32 _yCoordinate;
        partial void OnyCoordinateChanging(global::System.Int32 value);
        partial void OnyCoordinateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Range
        {
            get
            {
                return _Range;
            }
            set
            {
                OnRangeChanging(value);
                ReportPropertyChanging("Range");
                _Range = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Range");
                OnRangeChanged();
            }
        }
        private global::System.Int32 _Range;
        partial void OnRangeChanging(global::System.Int32 value);
        partial void OnRangeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SimulatorModel", "FK_Reader_ReaderType", "ReaderType")]
        public ReaderType ReaderType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ReaderType>("SimulatorModel.FK_Reader_ReaderType", "ReaderType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ReaderType>("SimulatorModel.FK_Reader_ReaderType", "ReaderType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ReaderType> ReaderTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ReaderType>("SimulatorModel.FK_Reader_ReaderType", "ReaderType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ReaderType>("SimulatorModel.FK_Reader_ReaderType", "ReaderType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SimulatorModel", "FK_ReaderEvent_Reader", "ReaderEvent")]
        public EntityCollection<ReaderEvent> ReaderEvents
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ReaderEvent>("SimulatorModel.FK_ReaderEvent_Reader", "ReaderEvent");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ReaderEvent>("SimulatorModel.FK_ReaderEvent_Reader", "ReaderEvent", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SimulatorModel", "FK_Reader_Controller", "Controller")]
        public Controller Controller
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Controller>("SimulatorModel.FK_Reader_Controller", "Controller").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Controller>("SimulatorModel.FK_Reader_Controller", "Controller").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Controller> ControllerReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Controller>("SimulatorModel.FK_Reader_Controller", "Controller");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Controller>("SimulatorModel.FK_Reader_Controller", "Controller", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SimulatorModel", "FK_Reader_ReaderLocationType", "ReaderLocationType")]
        public ReaderLocationType ReaderLocationType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ReaderLocationType>("SimulatorModel.FK_Reader_ReaderLocationType", "ReaderLocationType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ReaderLocationType>("SimulatorModel.FK_Reader_ReaderLocationType", "ReaderLocationType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ReaderLocationType> ReaderLocationTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ReaderLocationType>("SimulatorModel.FK_Reader_ReaderLocationType", "ReaderLocationType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ReaderLocationType>("SimulatorModel.FK_Reader_ReaderLocationType", "ReaderLocationType", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SimulatorModel", Name="ReaderEvent")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ReaderEvent : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ReaderEvent object.
        /// </summary>
        /// <param name="eventID">Initial value of the EventID property.</param>
        /// <param name="readerID">Initial value of the ReaderID property.</param>
        /// <param name="eventNumber">Initial value of the EventNumber property.</param>
        /// <param name="timeval">Initial value of the Timeval property.</param>
        /// <param name="bandID">Initial value of the BandID property.</param>
        /// <param name="signalStrength">Initial value of the SignalStrength property.</param>
        /// <param name="channel">Initial value of the Channel property.</param>
        /// <param name="packetSequence">Initial value of the PacketSequence property.</param>
        /// <param name="frequency">Initial value of the Frequency property.</param>
        public static ReaderEvent CreateReaderEvent(global::System.Int64 eventID, global::System.Int32 readerID, global::System.Int64 eventNumber, global::System.DateTime timeval, global::System.String bandID, global::System.Int32 signalStrength, global::System.Int32 channel, global::System.Int32 packetSequence, global::System.Int32 frequency)
        {
            ReaderEvent readerEvent = new ReaderEvent();
            readerEvent.EventID = eventID;
            readerEvent.ReaderID = readerID;
            readerEvent.EventNumber = eventNumber;
            readerEvent.Timeval = timeval;
            readerEvent.BandID = bandID;
            readerEvent.SignalStrength = signalStrength;
            readerEvent.Channel = channel;
            readerEvent.PacketSequence = packetSequence;
            readerEvent.Frequency = frequency;
            return readerEvent;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 EventID
        {
            get
            {
                return _EventID;
            }
            set
            {
                if (_EventID != value)
                {
                    OnEventIDChanging(value);
                    ReportPropertyChanging("EventID");
                    _EventID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EventID");
                    OnEventIDChanged();
                }
            }
        }
        private global::System.Int64 _EventID;
        partial void OnEventIDChanging(global::System.Int64 value);
        partial void OnEventIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ReaderID
        {
            get
            {
                return _ReaderID;
            }
            set
            {
                OnReaderIDChanging(value);
                ReportPropertyChanging("ReaderID");
                _ReaderID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReaderID");
                OnReaderIDChanged();
            }
        }
        private global::System.Int32 _ReaderID;
        partial void OnReaderIDChanging(global::System.Int32 value);
        partial void OnReaderIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 EventNumber
        {
            get
            {
                return _EventNumber;
            }
            set
            {
                OnEventNumberChanging(value);
                ReportPropertyChanging("EventNumber");
                _EventNumber = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EventNumber");
                OnEventNumberChanged();
            }
        }
        private global::System.Int64 _EventNumber;
        partial void OnEventNumberChanging(global::System.Int64 value);
        partial void OnEventNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Timeval
        {
            get
            {
                return _Timeval;
            }
            set
            {
                OnTimevalChanging(value);
                ReportPropertyChanging("Timeval");
                _Timeval = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Timeval");
                OnTimevalChanged();
            }
        }
        private global::System.DateTime _Timeval;
        partial void OnTimevalChanging(global::System.DateTime value);
        partial void OnTimevalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String BandID
        {
            get
            {
                return _BandID;
            }
            set
            {
                OnBandIDChanging(value);
                ReportPropertyChanging("BandID");
                _BandID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("BandID");
                OnBandIDChanged();
            }
        }
        private global::System.String _BandID;
        partial void OnBandIDChanging(global::System.String value);
        partial void OnBandIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SignalStrength
        {
            get
            {
                return _SignalStrength;
            }
            set
            {
                OnSignalStrengthChanging(value);
                ReportPropertyChanging("SignalStrength");
                _SignalStrength = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SignalStrength");
                OnSignalStrengthChanged();
            }
        }
        private global::System.Int32 _SignalStrength;
        partial void OnSignalStrengthChanging(global::System.Int32 value);
        partial void OnSignalStrengthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Channel
        {
            get
            {
                return _Channel;
            }
            set
            {
                OnChannelChanging(value);
                ReportPropertyChanging("Channel");
                _Channel = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Channel");
                OnChannelChanged();
            }
        }
        private global::System.Int32 _Channel;
        partial void OnChannelChanging(global::System.Int32 value);
        partial void OnChannelChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PacketSequence
        {
            get
            {
                return _PacketSequence;
            }
            set
            {
                OnPacketSequenceChanging(value);
                ReportPropertyChanging("PacketSequence");
                _PacketSequence = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PacketSequence");
                OnPacketSequenceChanged();
            }
        }
        private global::System.Int32 _PacketSequence;
        partial void OnPacketSequenceChanging(global::System.Int32 value);
        partial void OnPacketSequenceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Frequency
        {
            get
            {
                return _Frequency;
            }
            set
            {
                OnFrequencyChanging(value);
                ReportPropertyChanging("Frequency");
                _Frequency = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Frequency");
                OnFrequencyChanged();
            }
        }
        private global::System.Int32 _Frequency;
        partial void OnFrequencyChanging(global::System.Int32 value);
        partial void OnFrequencyChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SimulatorModel", "FK_ReaderEvent_Reader", "Reader")]
        public Reader Reader
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Reader>("SimulatorModel.FK_ReaderEvent_Reader", "Reader").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Reader>("SimulatorModel.FK_ReaderEvent_Reader", "Reader").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Reader> ReaderReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Reader>("SimulatorModel.FK_ReaderEvent_Reader", "Reader");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Reader>("SimulatorModel.FK_ReaderEvent_Reader", "Reader", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SimulatorModel", Name="ReaderLocationType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ReaderLocationType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ReaderLocationType object.
        /// </summary>
        /// <param name="readerLocationTypeID">Initial value of the ReaderLocationTypeID property.</param>
        /// <param name="readerLocationTypeName">Initial value of the ReaderLocationTypeName property.</param>
        public static ReaderLocationType CreateReaderLocationType(global::System.Int32 readerLocationTypeID, global::System.String readerLocationTypeName)
        {
            ReaderLocationType readerLocationType = new ReaderLocationType();
            readerLocationType.ReaderLocationTypeID = readerLocationTypeID;
            readerLocationType.ReaderLocationTypeName = readerLocationTypeName;
            return readerLocationType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ReaderLocationTypeID
        {
            get
            {
                return _ReaderLocationTypeID;
            }
            set
            {
                if (_ReaderLocationTypeID != value)
                {
                    OnReaderLocationTypeIDChanging(value);
                    ReportPropertyChanging("ReaderLocationTypeID");
                    _ReaderLocationTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ReaderLocationTypeID");
                    OnReaderLocationTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _ReaderLocationTypeID;
        partial void OnReaderLocationTypeIDChanging(global::System.Int32 value);
        partial void OnReaderLocationTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ReaderLocationTypeName
        {
            get
            {
                return _ReaderLocationTypeName;
            }
            set
            {
                OnReaderLocationTypeNameChanging(value);
                ReportPropertyChanging("ReaderLocationTypeName");
                _ReaderLocationTypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ReaderLocationTypeName");
                OnReaderLocationTypeNameChanged();
            }
        }
        private global::System.String _ReaderLocationTypeName;
        partial void OnReaderLocationTypeNameChanging(global::System.String value);
        partial void OnReaderLocationTypeNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SimulatorModel", "FK_Reader_ReaderLocationType", "Reader")]
        public EntityCollection<Reader> Readers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Reader>("SimulatorModel.FK_Reader_ReaderLocationType", "Reader");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Reader>("SimulatorModel.FK_Reader_ReaderLocationType", "Reader", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SimulatorModel", Name="ReaderType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ReaderType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ReaderType object.
        /// </summary>
        /// <param name="readerTypeID">Initial value of the ReaderTypeID property.</param>
        /// <param name="readerTypeName">Initial value of the ReaderTypeName property.</param>
        public static ReaderType CreateReaderType(global::System.Int32 readerTypeID, global::System.String readerTypeName)
        {
            ReaderType readerType = new ReaderType();
            readerType.ReaderTypeID = readerTypeID;
            readerType.ReaderTypeName = readerTypeName;
            return readerType;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ReaderTypeID
        {
            get
            {
                return _ReaderTypeID;
            }
            set
            {
                if (_ReaderTypeID != value)
                {
                    OnReaderTypeIDChanging(value);
                    ReportPropertyChanging("ReaderTypeID");
                    _ReaderTypeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ReaderTypeID");
                    OnReaderTypeIDChanged();
                }
            }
        }
        private global::System.Int32 _ReaderTypeID;
        partial void OnReaderTypeIDChanging(global::System.Int32 value);
        partial void OnReaderTypeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ReaderTypeName
        {
            get
            {
                return _ReaderTypeName;
            }
            set
            {
                OnReaderTypeNameChanging(value);
                ReportPropertyChanging("ReaderTypeName");
                _ReaderTypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ReaderTypeName");
                OnReaderTypeNameChanged();
            }
        }
        private global::System.String _ReaderTypeName;
        partial void OnReaderTypeNameChanging(global::System.String value);
        partial void OnReaderTypeNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SimulatorModel", "FK_Reader_ReaderType", "Reader")]
        public EntityCollection<Reader> Readers
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Reader>("SimulatorModel.FK_Reader_ReaderType", "Reader");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Reader>("SimulatorModel.FK_Reader_ReaderType", "Reader", value);
                }
            }
        }

        #endregion
    }

    #endregion
    #region ComplexTypes
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="SimulatorModel", Name="GetGuestPositions_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class GetGuestPositions_Result : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GetGuestPositions_Result object.
        /// </summary>
        /// <param name="guestID">Initial value of the GuestID property.</param>
        /// <param name="attractionID">Initial value of the AttractionID property.</param>
        /// <param name="entryTime">Initial value of the EntryTime property.</param>
        /// <param name="hasFastPassPlus">Initial value of the HasFastPassPlus property.</param>
        /// <param name="guestState">Initial value of the GuestState property.</param>
        /// <param name="xPosition">Initial value of the xPosition property.</param>
        /// <param name="yPosition">Initial value of the yPosition property.</param>
        /// <param name="firstName">Initial value of the FirstName property.</param>
        /// <param name="lastName">Initial value of the LastName property.</param>
        public static GetGuestPositions_Result CreateGetGuestPositions_Result(global::System.Int64 guestID, global::System.Int32 attractionID, global::System.TimeSpan entryTime, global::System.Boolean hasFastPassPlus, global::System.Int32 guestState, global::System.Double xPosition, global::System.Double yPosition, global::System.String firstName, global::System.String lastName)
        {
            GetGuestPositions_Result getGuestPositions_Result = new GetGuestPositions_Result();
            getGuestPositions_Result.GuestID = guestID;
            getGuestPositions_Result.AttractionID = attractionID;
            getGuestPositions_Result.EntryTime = entryTime;
            getGuestPositions_Result.HasFastPassPlus = hasFastPassPlus;
            getGuestPositions_Result.GuestState = guestState;
            getGuestPositions_Result.xPosition = xPosition;
            getGuestPositions_Result.yPosition = yPosition;
            getGuestPositions_Result.FirstName = firstName;
            getGuestPositions_Result.LastName = lastName;
            return getGuestPositions_Result;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GuestID
        {
            get
            {
                return _GuestID;
            }
            set
            {
                OnGuestIDChanging(value);
                ReportPropertyChanging("GuestID");
                _GuestID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GuestID");
                OnGuestIDChanged();
            }
        }
        private global::System.Int64 _GuestID;
        partial void OnGuestIDChanging(global::System.Int64 value);
        partial void OnGuestIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AttractionID
        {
            get
            {
                return _AttractionID;
            }
            set
            {
                OnAttractionIDChanging(value);
                ReportPropertyChanging("AttractionID");
                _AttractionID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AttractionID");
                OnAttractionIDChanged();
            }
        }
        private global::System.Int32 _AttractionID;
        partial void OnAttractionIDChanging(global::System.Int32 value);
        partial void OnAttractionIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.TimeSpan EntryTime
        {
            get
            {
                return _EntryTime;
            }
            set
            {
                OnEntryTimeChanging(value);
                ReportPropertyChanging("EntryTime");
                _EntryTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EntryTime");
                OnEntryTimeChanged();
            }
        }
        private global::System.TimeSpan _EntryTime;
        partial void OnEntryTimeChanging(global::System.TimeSpan value);
        partial void OnEntryTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean HasFastPassPlus
        {
            get
            {
                return _HasFastPassPlus;
            }
            set
            {
                OnHasFastPassPlusChanging(value);
                ReportPropertyChanging("HasFastPassPlus");
                _HasFastPassPlus = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HasFastPassPlus");
                OnHasFastPassPlusChanged();
            }
        }
        private global::System.Boolean _HasFastPassPlus;
        partial void OnHasFastPassPlusChanging(global::System.Boolean value);
        partial void OnHasFastPassPlusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GuestState
        {
            get
            {
                return _GuestState;
            }
            set
            {
                OnGuestStateChanging(value);
                ReportPropertyChanging("GuestState");
                _GuestState = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GuestState");
                OnGuestStateChanged();
            }
        }
        private global::System.Int32 _GuestState;
        partial void OnGuestStateChanging(global::System.Int32 value);
        partial void OnGuestStateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double xPosition
        {
            get
            {
                return _xPosition;
            }
            set
            {
                OnxPositionChanging(value);
                ReportPropertyChanging("xPosition");
                _xPosition = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("xPosition");
                OnxPositionChanged();
            }
        }
        private global::System.Double _xPosition;
        partial void OnxPositionChanging(global::System.Double value);
        partial void OnxPositionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double yPosition
        {
            get
            {
                return _yPosition;
            }
            set
            {
                OnyPositionChanging(value);
                ReportPropertyChanging("yPosition");
                _yPosition = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("yPosition");
                OnyPositionChanged();
            }
        }
        private global::System.Double _yPosition;
        partial void OnyPositionChanging(global::System.Double value);
        partial void OnyPositionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="SimulatorModel", Name="GetGuestStates_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class GetGuestStates_Result : ComplexObject
    {
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> GuestCount
        {
            get
            {
                return _GuestCount;
            }
            set
            {
                OnGuestCountChanging(value);
                ReportPropertyChanging("GuestCount");
                _GuestCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GuestCount");
                OnGuestCountChanged();
            }
        }
        private Nullable<global::System.Int32> _GuestCount;
        partial void OnGuestCountChanging(Nullable<global::System.Int32> value);
        partial void OnGuestCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String State
        {
            get
            {
                return _State;
            }
            set
            {
                OnStateChanging(value);
                ReportPropertyChanging("State");
                _State = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("State");
                OnStateChanged();
            }
        }
        private global::System.String _State;
        partial void OnStateChanging(global::System.String value);
        partial void OnStateChanged();

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="SimulatorModel", Name="GetReaderEvents_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class GetReaderEvents_Result : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GetReaderEvents_Result object.
        /// </summary>
        /// <param name="eventID">Initial value of the EventID property.</param>
        /// <param name="readerID">Initial value of the ReaderID property.</param>
        /// <param name="eventNumber">Initial value of the EventNumber property.</param>
        /// <param name="bandID">Initial value of the BandID property.</param>
        /// <param name="signalStrength">Initial value of the SignalStrength property.</param>
        /// <param name="channel">Initial value of the Channel property.</param>
        /// <param name="packetSequence">Initial value of the PacketSequence property.</param>
        /// <param name="frequency">Initial value of the Frequency property.</param>
        public static GetReaderEvents_Result CreateGetReaderEvents_Result(global::System.Int64 eventID, global::System.Int32 readerID, global::System.Int64 eventNumber, global::System.String bandID, global::System.Int32 signalStrength, global::System.Int32 channel, global::System.Int32 packetSequence, global::System.Int32 frequency)
        {
            GetReaderEvents_Result getReaderEvents_Result = new GetReaderEvents_Result();
            getReaderEvents_Result.EventID = eventID;
            getReaderEvents_Result.ReaderID = readerID;
            getReaderEvents_Result.EventNumber = eventNumber;
            getReaderEvents_Result.BandID = bandID;
            getReaderEvents_Result.SignalStrength = signalStrength;
            getReaderEvents_Result.Channel = channel;
            getReaderEvents_Result.PacketSequence = packetSequence;
            getReaderEvents_Result.Frequency = frequency;
            return getReaderEvents_Result;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 EventID
        {
            get
            {
                return _EventID;
            }
            set
            {
                OnEventIDChanging(value);
                ReportPropertyChanging("EventID");
                _EventID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EventID");
                OnEventIDChanged();
            }
        }
        private global::System.Int64 _EventID;
        partial void OnEventIDChanging(global::System.Int64 value);
        partial void OnEventIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ReaderID
        {
            get
            {
                return _ReaderID;
            }
            set
            {
                OnReaderIDChanging(value);
                ReportPropertyChanging("ReaderID");
                _ReaderID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ReaderID");
                OnReaderIDChanged();
            }
        }
        private global::System.Int32 _ReaderID;
        partial void OnReaderIDChanging(global::System.Int32 value);
        partial void OnReaderIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 EventNumber
        {
            get
            {
                return _EventNumber;
            }
            set
            {
                OnEventNumberChanging(value);
                ReportPropertyChanging("EventNumber");
                _EventNumber = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EventNumber");
                OnEventNumberChanged();
            }
        }
        private global::System.Int64 _EventNumber;
        partial void OnEventNumberChanging(global::System.Int64 value);
        partial void OnEventNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String TimeVal
        {
            get
            {
                return _TimeVal;
            }
            set
            {
                OnTimeValChanging(value);
                ReportPropertyChanging("TimeVal");
                _TimeVal = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("TimeVal");
                OnTimeValChanged();
            }
        }
        private global::System.String _TimeVal;
        partial void OnTimeValChanging(global::System.String value);
        partial void OnTimeValChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String BandID
        {
            get
            {
                return _BandID;
            }
            set
            {
                OnBandIDChanging(value);
                ReportPropertyChanging("BandID");
                _BandID = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("BandID");
                OnBandIDChanged();
            }
        }
        private global::System.String _BandID;
        partial void OnBandIDChanging(global::System.String value);
        partial void OnBandIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SignalStrength
        {
            get
            {
                return _SignalStrength;
            }
            set
            {
                OnSignalStrengthChanging(value);
                ReportPropertyChanging("SignalStrength");
                _SignalStrength = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SignalStrength");
                OnSignalStrengthChanged();
            }
        }
        private global::System.Int32 _SignalStrength;
        partial void OnSignalStrengthChanging(global::System.Int32 value);
        partial void OnSignalStrengthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Channel
        {
            get
            {
                return _Channel;
            }
            set
            {
                OnChannelChanging(value);
                ReportPropertyChanging("Channel");
                _Channel = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Channel");
                OnChannelChanged();
            }
        }
        private global::System.Int32 _Channel;
        partial void OnChannelChanging(global::System.Int32 value);
        partial void OnChannelChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PacketSequence
        {
            get
            {
                return _PacketSequence;
            }
            set
            {
                OnPacketSequenceChanging(value);
                ReportPropertyChanging("PacketSequence");
                _PacketSequence = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PacketSequence");
                OnPacketSequenceChanged();
            }
        }
        private global::System.Int32 _PacketSequence;
        partial void OnPacketSequenceChanging(global::System.Int32 value);
        partial void OnPacketSequenceChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Frequency
        {
            get
            {
                return _Frequency;
            }
            set
            {
                OnFrequencyChanging(value);
                ReportPropertyChanging("Frequency");
                _Frequency = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Frequency");
                OnFrequencyChanged();
            }
        }
        private global::System.Int32 _Frequency;
        partial void OnFrequencyChanging(global::System.Int32 value);
        partial void OnFrequencyChanged();

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="SimulatorModel", Name="GetStatistics_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class GetStatistics_Result : ComplexObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GetStatistics_Result object.
        /// </summary>
        /// <param name="readerTypeName">Initial value of the ReaderTypeName property.</param>
        /// <param name="readerLocationTypeName">Initial value of the ReaderLocationTypeName property.</param>
        public static GetStatistics_Result CreateGetStatistics_Result(global::System.String readerTypeName, global::System.String readerLocationTypeName)
        {
            GetStatistics_Result getStatistics_Result = new GetStatistics_Result();
            getStatistics_Result.ReaderTypeName = readerTypeName;
            getStatistics_Result.ReaderLocationTypeName = readerLocationTypeName;
            return getStatistics_Result;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Reads
        {
            get
            {
                return _Reads;
            }
            set
            {
                OnReadsChanging(value);
                ReportPropertyChanging("Reads");
                _Reads = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Reads");
                OnReadsChanged();
            }
        }
        private Nullable<global::System.Int32> _Reads;
        partial void OnReadsChanging(Nullable<global::System.Int32> value);
        partial void OnReadsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Bands
        {
            get
            {
                return _Bands;
            }
            set
            {
                OnBandsChanging(value);
                ReportPropertyChanging("Bands");
                _Bands = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Bands");
                OnBandsChanged();
            }
        }
        private Nullable<global::System.Int32> _Bands;
        partial void OnBandsChanging(Nullable<global::System.Int32> value);
        partial void OnBandsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ReaderTypeName
        {
            get
            {
                return _ReaderTypeName;
            }
            set
            {
                OnReaderTypeNameChanging(value);
                ReportPropertyChanging("ReaderTypeName");
                _ReaderTypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ReaderTypeName");
                OnReaderTypeNameChanged();
            }
        }
        private global::System.String _ReaderTypeName;
        partial void OnReaderTypeNameChanging(global::System.String value);
        partial void OnReaderTypeNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ReaderLocationTypeName
        {
            get
            {
                return _ReaderLocationTypeName;
            }
            set
            {
                OnReaderLocationTypeNameChanging(value);
                ReportPropertyChanging("ReaderLocationTypeName");
                _ReaderLocationTypeName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ReaderLocationTypeName");
                OnReaderLocationTypeNameChanged();
            }
        }
        private global::System.String _ReaderLocationTypeName;
        partial void OnReaderLocationTypeNameChanging(global::System.String value);
        partial void OnReaderLocationTypeNameChanged();

        #endregion
    }

    #endregion
    
}
