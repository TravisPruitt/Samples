<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAAAAACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAAAAKAAAADwAAABMAAAAVAAAAFgAAABYAAAAWAAAAFgAA
        ABYAAAAWAAAAFgAAABYAAAAWAAAAFgAAABYAAAAWAAAAFQAAABQAAAARAAAADAAAAAcAAAACAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAACwAAABcAAAAjAAAALAAAADAAAAAyAAAAMwAA
        ADQAAAA1AAAANgAAADcAAAA3AAAANwAAADYAAAA1AAAANAAAADMAAAAxAAAALwAAACgAAAAdAAAAEAAA
        AAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAAAWAAAAMgAAAEkAAABYAAAAXwAA
        AGMAAABlAAAAaQAAAG0AAABxAAAAcwAAAHQAAABzAAAAcAAAAGwAAABoAAAAZAAAAGEAAABcAAAATAAA
        ADUAAAAeAAAADAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQIeMEoDNVamBDhbvQQ2
        V8MENlbHBDVVyQQ0VMsDNFPNAzNS0AMyUtIDMlHUAzJR1AMyUdMDM1LSBDNTzwQ0VMwENVTKBDVVyAQ1
        VsYDKUKmAQsRUwAAACMAAAAOAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAzJQeAZZ
        ju4HYp74B2Kd+AdinPkHYpz6B2Gb+wpim/4NYpr/DGOb/wxjmv8MY5r/DGOa/wlhmv4GYJv9B2Gb/Adi
        m/sHYpz6B2Kc+QVMetwBGShiAAAAHQAAAAwAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAQCHzIsBDhZbwQ8X4MEOFmMAjJRmQ0xR7E4RUzbTlNT+kZQVP09TFX+O0pU/kFLUP5MTEv+SUhE+ik2
        PesIJzvTAilCvAMvS6YENFOVAypDbgELEi4AAAARAAAABwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        A///gAP//8AH///gD///8B////w////8P////D////gf///gB///wAP//4AD//+AAf//gAH//4AD//+A
        A///wAP//4AB//wAAH/8AAB///////////8=
</value>
  </data>
</root>