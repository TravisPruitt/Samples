/*
Deployment script for DBDASH_GT1

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DBDASH_Master"
:setvar DefaultFilePrefix "DBDASH_Master"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL10_50.XIDBDASH\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL10_50.XIDBDASH\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[EntitlementMasterDeltaWorking]...';


GO
--CREATE TABLE [dbo].[EntitlementMasterDeltaWorking] (
--    [ID]                          INT      NULL,
--    [BusinessEventID]             BIGINT   NULL,
--    [GuestID]                     BIGINT   NULL,
--    [ReferenceID]                 BIGINT   NULL,
--    [EntertainmentID]             BIGINT   NULL,
--    [ParentLocationID]            BIGINT   NULL,
--    [EntitlementHour]             CHAR (4) NULL,
--    [EntitlementDate]             DATE     NULL,
--    [EntitlementStartDateTimeUTC] DATETIME NULL,
--    [EntitlementEndDateTimeUTC]   DATETIME NULL,
--    [EntitlementCreationDate]     DATE     NULL,
--    [Status]                      INT      NULL,
--    [CreatedDateUTC]              DATETIME NULL
--);


GO
PRINT N'Creating [dbo].[FPReaderTestActivityEvent]...';


GO
--CREATE TABLE [dbo].[FPReaderTestActivityEvent] (
--    [EventId]        BIGINT        NULL,
--    [GuestID]        BIGINT        NOT NULL,
--    [RideNumber]     INT           NOT NULL,
--    [xPass]          BIT           NOT NULL,
--    [FacilityID]     INT           NOT NULL,
--    [EventTypeID]    INT           NOT NULL,
--    [ReaderLocation] NVARCHAR (50) NOT NULL,
--    [Timestamp]      DATETIME      NOT NULL,
--    [BandTypeID]     INT           NOT NULL,
--    [RawMessage]     XML           NULL,
--    [CreatedDate]    DATETIME      NOT NULL
--);


GO
PRINT N'Creating [dbo].[GuestStates_45Minutes_FP]...';


GO
CREATE TABLE [dbo].[GuestStates_45Minutes_FP] (
    [GuestID]      BIGINT   NOT NULL,
    [xPass]        INT      NULL,
    [FacilityID]   BIGINT   NULL,
    [TimeStamp]    DATETIME NULL,
    [RideID_Entry] INT      NULL,
    [E2M]          INT      NULL,
    [M2L]          INT      NULL,
    [E2L]          INT      NULL,
    [E2E]          INT      NULL,
    [L2E]          INT      NULL,
    [UpdatedTime]  DATETIME NULL
);


GO
PRINT N'Creating [dbo].[GuestStates_45Minutes_SB]...';


GO
CREATE TABLE [dbo].[GuestStates_45Minutes_SB] (
    [GuestID]      BIGINT   NOT NULL,
    [xPass]        INT      NULL,
    [FacilityID]   BIGINT   NULL,
    [TimeStamp]    DATETIME NULL,
    [RideID_Entry] INT      NULL,
    [E2M]          INT      NULL,
    [M2L]          INT      NULL,
    [E2L]          INT      NULL,
    [E2E]          INT      NULL,
    [L2E]          INT      NULL,
    [UpdatedTime]  DATETIME NULL
);


GO
PRINT N'Creating [dbo].[RedemptionCacheStep03]...';


GO
CREATE TABLE [dbo].[RedemptionCacheStep03] (
    [MetricType]      VARCHAR (3) NOT NULL,
    [EntitlementDate] DATE        NULL,
    [FacilityID]      BIGINT      NULL,
    [ParkID]          BIGINT      NULL,
    [SelectedHour]    INT         NULL,
    [OfferSet]        INT         NULL,
    [Selected]        INT         NULL
);


GO
PRINT N'Creating [dbo].[RedemptionCacheStep04]...';


GO
CREATE TABLE [dbo].[RedemptionCacheStep04] (
    [MetricType]      VARCHAR (6) NOT NULL,
    [EntitlementDate] DATE        NULL,
    [FacilityID]      BIGINT      NULL,
    [ParkID]          BIGINT      NULL,
    [SelectedHour]    INT         NULL,
    [Redeemed]        INT         NULL,
    [OfferSet]        INT         NULL
);


GO
PRINT N'Creating [dbo].[RedemptionsInPark]...';


GO
CREATE TABLE [dbo].[RedemptionsInPark] (
    [MetricType]      VARCHAR (32) NOT NULL,
    [EntitlementDate] DATE         NULL,
    [FacilityID]      BIGINT       NULL,
    [ParkID]          BIGINT       NULL,
    [SelectedHour]    VARCHAR (2)  NULL,
    [Selected]        INT          NULL,
    [Redeemed]        INT          NULL,
    [OfferSet]        INT          NULL,
    [UpdatedDate]     DATETIME     NULL
);


GO
PRINT N'Creating [dbo].[RedemptionsInParkCache]...';


GO
CREATE TABLE [dbo].[RedemptionsInParkCache] (
    [MetricType]      VARCHAR (32) NOT NULL,
    [EntitlementDate] DATE         NULL,
    [FacilityID]      BIGINT       NULL,
    [ParkID]          BIGINT       NULL,
    [SelectedHour]    VARCHAR (2)  NULL,
    [Selected]        INT          NULL,
    [Redeemed]        INT          NULL,
    [OfferSet]        INT          NULL
);


GO
PRINT N'Creating [dbo].[syncControlHistory30Days]...';


--GO
--CREATE TABLE [dbo].[syncControlHistory30Days] (
--    [JobID]         BIGINT   NULL,
--    [TimeStarted]   DATETIME NULL,
--    [Timestamp]     DATETIME NULL,
--    [LastEventID]   BIGINT   NULL,
--    [TimeCompleted] DATETIME NULL,
--    [JobTypeID]     INT      NULL,
--    [Status]        INT      NULL
--);


GO
PRINT N'Creating [dbo].[tempPending]...';


GO
CREATE TABLE [dbo].[tempPending] (
    [BusinessEventID]        INT              IDENTITY (1, 1) NOT NULL,
    [EventLocationID]        INT              NOT NULL,
    [BusinessEventTypeID]    INT              NOT NULL,
    [BusinessEventSubTypeID] INT              NOT NULL,
    [ReferenceID]            NVARCHAR (50)    NULL,
    [GuestID]                BIGINT           NOT NULL,
    [Timestamp]              DATETIME         NOT NULL,
    [CorrelationID]          UNIQUEIDENTIFIER NOT NULL,
    [StartTime]              DATETIME         NULL,
    [EndTime]                DATETIME         NULL,
    [LocationID]             BIGINT           NULL,
    [EntertainmentID]        BIGINT           NULL,
    [RawMessage]             XML              NULL,
    [CreatedDate]            DATETIME         NOT NULL
);


GO
PRINT N'Creating [dbo].[tempPendingNext]...';


GO
CREATE TABLE [dbo].[tempPendingNext] (
    [ReferenceID] NVARCHAR (50) NULL,
    [GuestID]     BIGINT        NOT NULL
);


GO
PRINT N'Creating [dbo].[tempPendingNextResolved]...';


GO
CREATE TABLE [dbo].[tempPendingNextResolved] (
    [guestId]    BIGINT           NOT NULL,
    [guestRowId] UNIQUEIDENTIFIER NOT NULL,
    [xbandRowId] UNIQUEIDENTIFIER NOT NULL,
    [publicID]   NVARCHAR (200)   NOT NULL,
    [gxplinkid]  NVARCHAR (200)   NOT NULL
);


GO
PRINT N'Creating [dbo].[WaitTimesActualHistorical]...';


GO
CREATE TABLE [dbo].[WaitTimesActualHistorical] (
    [id]         INT      IDENTITY (1, 1) NOT NULL,
    [Parkdate]   DATE     NULL,
    [TimeSlice]  TIME (7) NULL,
    [ParkID]     BIGINT   NULL,
    [FacilityID] BIGINT   NULL,
    [E2L]        INT      NULL,
    [E2M]        INT      NULL,
    [CreateDate] DATETIME NULL
);


GO
PRINT N'Creating [gxp].[businesseventPendingExpired]...';


GO
CREATE TABLE [gxp].[businesseventPendingExpired] (
    [BusinessEventID]        INT              NOT NULL,
    [EventLocationID]        INT              NOT NULL,
    [BusinessEventTypeID]    INT              NOT NULL,
    [BusinessEventSubTypeID] INT              NOT NULL,
    [ReferenceID]            NVARCHAR (50)    NULL,
    [GuestID]                BIGINT           NOT NULL,
    [Timestamp]              DATETIME         NOT NULL,
    [CorrelationID]          UNIQUEIDENTIFIER NOT NULL,
    [StartTime]              DATETIME         NULL,
    [EndTime]                DATETIME         NULL,
    [LocationID]             BIGINT           NULL,
    [EntertainmentID]        BIGINT           NULL,
    [RawMessage]             XML              NULL,
    [CreatedDate]            DATETIME         NULL,
    [UpdatedDate]            DATETIME         NOT NULL
);


GO
PRINT N'Creating [gxp].[businesseventPendingNext]...';


GO
CREATE TABLE [gxp].[businesseventPendingNext] (
    [BusinessEventID]        INT              NOT NULL,
    [EventLocationID]        INT              NOT NULL,
    [BusinessEventTypeID]    INT              NOT NULL,
    [BusinessEventSubTypeID] INT              NOT NULL,
    [ReferenceID]            NVARCHAR (50)    NULL,
    [GuestID]                BIGINT           NOT NULL,
    [Timestamp]              DATETIME         NOT NULL,
    [CorrelationID]          UNIQUEIDENTIFIER NOT NULL,
    [StartTime]              DATETIME         NULL,
    [EndTime]                DATETIME         NULL,
    [LocationID]             BIGINT           NULL,
    [EntertainmentID]        BIGINT           NULL,
    [RawMessage]             XML              NULL,
    [CreatedDate]            DATETIME         NULL,
    [UpdatedDate]            DATETIME         NOT NULL
);


GO
PRINT N'Creating [gxp].[businesseventPendingNext].[IX_BusinessEventID]...';


GO
CREATE NONCLUSTERED INDEX [IX_BusinessEventID]
    ON [gxp].[businesseventPendingNext]([BusinessEventID] ASC);


GO
PRINT N'Creating [gxp].[businesseventPendingNext].[IX_StartTime]...';


GO
CREATE NONCLUSTERED INDEX [IX_StartTime]
    ON [gxp].[businesseventPendingNext]([StartTime] ASC);


GO
PRINT N'Creating DF__Redemptio__Updat__65F62111...';


GO
ALTER TABLE [dbo].[RedemptionsInPark]
    ADD DEFAULT (getutcdate()) FOR [UpdatedDate];


GO
PRINT N'Creating DF__businesse__Updat__5A846E65...';


GO
ALTER TABLE [gxp].[businesseventPendingNext]
    ADD DEFAULT (getutcdate()) FOR [UpdatedDate];


GO
PRINT N'Altering [dbo].[vw_GuestStates_15Minutes]...';


GO

PRINT N'Creating [dbo].[vw_activeEntitlements]...';


GO
create view vw_activeEntitlements
as

select t1.referenceID
	from gxp.BusinessEvent t1 (nolock) 
	left join gxp.BusinessEvent t2 (nolock)  on t1.GuestID = t2.GuestID
								and t1.ReferenceID = t2.ReferenceID
								and t1.BusinessEventTypeID = (select BusinessEventTypeID from gxp.BusinessEventType (nolock) where BusinessEventType = 'BOOK')
								and t2.BusinessEventTypeID = (select BusinessEventTypeID from gxp.BusinessEventType (nolock) where BusinessEventType = 'CHANGE')
								and t2.BusinessEventSubTypeID = (select BusinessEventSubTypeID from gxp.BusinessEventSubType (nolock) where BusinessEventSubType = 'CANCEL')
								and t1.LocationID <> 123123123 
								and t2.LocationID <> 123123123 
	where t1.BusinessEventTypeID = (select BusinessEventTypeID from gxp.BusinessEventType (nolock) where BusinessEventType = 'BOOK')
	and t2.ReferenceID is NULL
GO
PRINT N'Creating [dbo].[vw_canceledEntitlements]...';


GO
create view vw_canceledEntitlements

as

select t1.referenceID
	from gxp.BusinessEvent t1 (nolock) 
	join gxp.BusinessEvent t2 (nolock)  on t1.GuestID = t2.GuestID
								and t1.ReferenceID = t2.ReferenceID
								and t1.BusinessEventTypeID = (select BusinessEventTypeID from gxp.BusinessEventType (nolock) where BusinessEventType = 'BOOK')
								and t2.BusinessEventTypeID = (select BusinessEventTypeID from gxp.BusinessEventType (nolock) where BusinessEventType = 'CHANGE')
								and t2.BusinessEventSubTypeID = (select BusinessEventSubTypeID from gxp.BusinessEventSubType (nolock) where BusinessEventSubType = 'CANCEL')
								and t1.LocationID <> 123123123 
								and t2.LocationID <> 123123123 
	where t1.BusinessEventTypeID = (select BusinessEventTypeID from gxp.BusinessEventType (nolock) where BusinessEventType = 'BOOK')
GO
PRINT N'Creating [dbo].[vw_Event]...';


GO
create view vw_Event
as
select top 1000000 * 
from rdr.event where FacilityID not in (9,26, 65) 
and ReaderLocation not like '%Table%' 
and xPass = 1
and Timestamp > GETUTCDATE()-2
order by CreatedDate desc
GO
PRINT N'Creating [dbo].[vw_GuestStates_45Minutes_FP]...';


GO

CREATE view [dbo].[vw_GuestStates_45Minutes_FP]
as
SELECT GuestID,
xPass,
FacilityID,
TimeStamp = isnull(EntryTime, isnull(MergeTime, AbandonTime)),
RideID_Entry,  
	E2M = ABS(datediff(MINUTE, EntryTime, MergeTime)),
	M2L = ABS(datediff(MINUTE, MergeTime, LoadTime)),
	E2L = ABS(datediff(MINUTE, EntryTime, LoadTime)),
	E2E = ABS(datediff(MINUTE, EntryTime, ExitTime)),
	L2E = ABS(datediff(MINUTE, LoadTime, ExitTime)),
	UpdatedTime
	FROM GuestStates (NOLOCK) 
	WHERE updatedtime >= dateadd(MINUTE, -45, getutcdate())
	and xPass = 1
GO
PRINT N'Creating [dbo].[vw_GuestStates_45Minutes_SB]...';


GO
CREATE view [dbo].[vw_GuestStates_45Minutes_SB]
as
SELECT GuestID,
xPass,
FacilityID,
TimeStamp = isnull(EntryTime, isnull(MergeTime, AbandonTime)),
RideID_Entry,  
	E2M = ABS(datediff(MINUTE, EntryTime, MergeTime)),
	M2L = ABS(datediff(MINUTE, MergeTime, LoadTime)),
	E2L = ABS(datediff(MINUTE, EntryTime, LoadTime)),
	E2E = ABS(datediff(MINUTE, EntryTime, ExitTime)),
	L2E = ABS(datediff(MINUTE, LoadTime, ExitTime)),
	UpdatedTime
	FROM GuestStates (NOLOCK) 
	WHERE updatedtime >= dateadd(MINUTE, -45, getutcdate())
	and xPass = 0
GO

CREATE view [dbo].[vw_RedemptionsInPark]
AS

select MetricType,
EntitlementDate,
FacilityID,
ParkID,
SelectedHour,
Selected,
Redeemed,
OfferSet 
	from RedemptionsInPark
GO
PRINT N'Altering [dbo].[sp_LRR_ETL]...';


GO
ALTER
PROCEDURE [dbo].[sp_LRR_ETL]
as

BEGIN TRY

declare @starttime datetime
declare @cutofftime datetime
declare @LastEventID bigint
declare @PreviousEventID bigint
set @cutofftime = getutcdate()
declare @UTCDefaultOffset int
declare @UTCDLSOffset int
declare @UTCCurrentOffset int
declare @DLSStart smalldatetime, @DLSEnd smalldatetime
declare @controlOffset varchar (32)

--standard UTC offset
select top 1 @UTCDefaultOffset = UTCDefaultOffset 
	from xiFacilities (nolock)
	where parkFacilityID in (80007944)

--UTC offset with daylight savings
set @UTCDLSOffset = @UTCDefaultOffset+1

set @DLSStart = (select dbo.fn_GetDaylightSavingsTimeStart(DATEADD(HH,@UTCDefaultOffset,@cutofftime)))
set @DLSEnd = (select  dbo.fn_GetDaylightSavingsTimeEnd(DATEADD(HH,@UTCDefaultOffset,@cutofftime)))

select @UTCCurrentOffset = 
	case 
		when DATEADD(HH,@UTCDefaultOffset,@cutofftime) between @DLSStart and @DLSEnd then @UTCDLSOffset
		else @UTCDefaultOffset
	end 

select @starttime = isnull(max(Timestamp),'1900-01-01') from syncControl (nolock) where status = 1


truncate table EventDelta
truncate table QueueCountsCache

DELETE from Event2HoursRollingStandBy where CreatedDate < DATEADD(MINUTE,-120,getutcdate())
DELETE from Event15MinutesRollingFastPass where CreatedDate < DATEADD(MINUTE,-15,getutcdate())

--insert EventDelta

truncate table EventDelta
insert EventDelta
select EventId,
	GuestID,
	RideNumber,
	xPass,
	x.FacilityID,
	EventTypeID,
	ReaderLocation = case when ReaderLocation = 'FPP-Merge' then 0 else 1 end,
	Timestamp,
	BandTypeID,
	CreatedDate
	from rdr.Event e (nolock)
	join rdr.Facility f (nolock) on f.FacilityID = e.FacilityID
	join xiFacilities x on x.FacilityID = f.FacilityName
	where CreatedDate between DATEADD(SECOND,-10,@starttime) and getutcdate()
	
	
set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'Delta Pull End'
print @controlOffset
--Reports Start
	
TRUNCATE TABLE BadReadsTemp

INSERT BadReadsTemp
select GuestID ,RideNumber, xPass, FacilityID, EventTypeID 
FROM dbo.EventDelta
GROUP BY GuestID ,RideNumber, xPass, FacilityID, EventTypeID
HAVING COUNT(*) > 1

DELETE FROM EventDelta
WHERE GuestID in (SELECT GuestID FROM BadReadsTemp)

MERGE Event2HoursRollingStandBy as TARGET
USING EventDelta (NOLOCK) AS SOURCE
on (TARGET.EventId = SOURCE.EventId)-- AND SOURCE.xPass = 0)
WHEN MATCHED 
	THEN UPDATE 
	SET 
	TARGET.GuestID = SOURCE.GuestID
	,TARGET.FacilityID = SOURCE.FacilityID
	,TARGET.RideNumber = SOURCE.RideNumber
	,TARGET.xPass = SOURCE.xPass
	,TARGET.EventTypeID = SOURCE.EventTypeID
	,TARGET.ReaderLocationFlag = SOURCE.ReaderLocationFlag	
	,TARGET.Timestamp = SOURCE.Timestamp	
	,TARGET.BandTypeID = SOURCE.BandTypeID
	,TARGET.CreatedDate	= SOURCE.CreatedDate	
WHEN NOT MATCHED BY TARGET-- AND SOURCE.xPass = 0
	THEN INSERT (EventId,GuestID,FacilityID,RideNumber,xPass,EventTypeID,ReaderLocationFlag,Timestamp,BandTypeID,CreatedDate)
	VALUES(SOURCE.EventId,SOURCE.GuestID,SOURCE.FacilityID,
	SOURCE.RideNumber,SOURCE.xPass,SOURCE.EventTypeID,
	SOURCE.ReaderLocationFlag,SOURCE.Timestamp,SOURCE.BandTypeID,SOURCE.CreatedDate);

set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'Two Hour Events End'
print @controlOffset

MERGE Event15MinutesRollingFastPass as TARGET
USING EventDelta AS SOURCE
on (TARGET.EventId = SOURCE.EventId AND SOURCE.xPass = 1)
WHEN MATCHED 
	THEN UPDATE 
	SET 
	TARGET.GuestID = SOURCE.GuestID
	,TARGET.FacilityID = SOURCE.FacilityID
	,TARGET.RideNumber = SOURCE.RideNumber
	,TARGET.xPass = SOURCE.xPass
	,TARGET.EventTypeID = SOURCE.EventTypeID
	,TARGET.ReaderLocationFlag = SOURCE.ReaderLocationFlag	
	,TARGET.Timestamp = SOURCE.Timestamp	
	,TARGET.BandTypeID = SOURCE.BandTypeID
	,TARGET.CreatedDate	= SOURCE.CreatedDate	
WHEN NOT MATCHED BY TARGET AND SOURCE.xPass = 1
	THEN INSERT (EventId,GuestID,FacilityID,RideNumber,xPass,EventTypeID,ReaderLocationFlag,Timestamp,BandTypeID,CreatedDate)
	VALUES(SOURCE.EventId,SOURCE.GuestID,SOURCE.FacilityID,
	SOURCE.RideNumber,SOURCE.xPass,SOURCE.EventTypeID,
	SOURCE.ReaderLocationFlag,SOURCE.Timestamp,SOURCE.BandTypeID,SOURCE.CreatedDate);

set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print '15 Minute Events End'
print @controlOffset

MERGE EventsXBRCDaily as TARGET
USING EventDelta AS SOURCE
on (TARGET.EventId = SOURCE.EventId)
WHEN MATCHED 
	THEN UPDATE 
	SET 
	TARGET.GuestID = SOURCE.GuestID
	,TARGET.FacilityID = SOURCE.FacilityID
	,TARGET.RideNumber = SOURCE.RideNumber
	,TARGET.xPass = SOURCE.xPass
	,TARGET.EventTypeID = SOURCE.EventTypeID
	,TARGET.ReaderLocationFlag = SOURCE.ReaderLocationFlag	
	,TARGET.Timestamp = SOURCE.Timestamp	
	,TARGET.BandTypeID = SOURCE.BandTypeID	
	,TARGET.CreatedDate	= SOURCE.CreatedDate		
WHEN NOT MATCHED BY TARGET
	THEN INSERT (EventId,GuestID,FacilityID,RideNumber,xPass,EventTypeID,ReaderLocationFlag,Timestamp,BandTypeID,CreatedDate)
	VALUES(SOURCE.EventId,SOURCE.GuestID,SOURCE.FacilityID,
	SOURCE.RideNumber,SOURCE.xPass,SOURCE.EventTypeID,
	SOURCE.ReaderLocationFlag,SOURCE.Timestamp,SOURCE.BandTypeID,SOURCE.CreatedDate);

set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'Daily Events End'
print @controlOffset
--Reports Start

truncate table [QueueCountsCacheStep01]

insert [QueueCountsCacheStep01]
SELECT 'E2M', t1.xPass, t1.facilityID, StandByCount = count(distinct t1.GuestID) 
from (
-- all eligible entry events
select guestID, RideNumber, facilityID, xPass
	from Event2HoursRollingStandBy (nolock)
	where EventTypeID = 1 --'Entry'
	--and  ReaderLocationFlag = 1 --'FPP-Merge'
) as t1
left join (
-- minus all guests who have hit merge or abandon state
select GuestID, RideNumber, facilityID, xPass
		from Event2HoursRollingStandBy (nolock)
	where EventTypeID in (2,3)--('Merge','Abandon')
) as t2 on t1.RideNumber = t2.RideNumber		
	and t1.guestID = t2.guestID
	and t1.facilityID = t2.facilityID
	and t1.xPass = t2.xPass
	where t2.GuestID is NULL
	group by t1.facilityID, t1.xPass
	
insert [QueueCountsCacheStep01]	
SELECT 'M2L', t1.xPass, t1.facilityID, MergeCount = count(distinct t1.GuestID) 
from (
-- all eligible entry events
select guestID, RideNumber, facilityID, xPass
	from Event2HoursRollingStandBy (nolock)
	where EventTypeID = 2 --'Merge'
) as t1
left join (
-- minus all guests who have hit load state
select GuestID, RideNumber, facilityID, xPass
		from Event2HoursRollingStandBy (nolock)
	where EventTypeID = 4 --Load
) as t2 on t1.RideNumber = t2.RideNumber		
	and t1.guestID = t2.guestID
	and t1.facilityID = t2.facilityID
	and t1.xPass = t2.xPass
	where t2.GuestID is NULL
	group by t1.facilityID, t1.xPass

insert [QueueCountsCacheStep01]
SELECT 'L2E', t1.xPass, t1.facilityID, LoadCount = count(distinct t1.GuestID) 
from (
-- all eligible entry events
select guestID, RideNumber, facilityID, xPass
	from Event2HoursRollingStandBy (nolock)
	where EventTypeID = 4 --'Load'
) as t1
left join (
-- minus all guests who have hit load state
select GuestID, RideNumber, facilityID, xPass
		from Event2HoursRollingStandBy (nolock)
	where EventTypeID = 5 --Exit
) as t2 on t1.RideNumber = t2.RideNumber		
	and t1.guestID = t2.guestID
	and t1.facilityID = t2.facilityID
	and t1.xPass = t2.xPass
	where t2.GuestID is NULL
	group by t1.facilityID, t1.xPass


set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'Queue Counts Step 01 End'
print @controlOffset
--Reports Start

truncate table TieOutBase
insert TieOutBase
SELECT GuestID,	xPass, FacilityID, RideID_Entry, 
	RideTime = dateadd(HOUR,-4,isnull(EntryTime, isnull(MergeTime, isnull (LoadTime, ExitTime)))),
	TimeSliceBeg, TimeSliceEnd,
	EntryFlag = case when EntryTime is NULL then 0 else 1 end,
	AbandonFlag = case when AbandonTime is NULL then 0 else 1 end,
	MergeFlag = case when MergeTime is NULL then 0 else 1 end,
	VBAFlag = case when VBATime is NULL then 0 else 1 end,
	LoadTime = case when LoadTime is NULL then 0 else 1 end,
	ExitFlag = case when ExitTime is NULL then 0 else 1 end
	FROM GuestStates g (NOLOCK)
	join TimeSlices t (NOLOCK) on convert(time,dateadd(HOUR,-4,isnull(EntryTime, isnull(MergeTime, isnull (LoadTime, ExitTime))))) between TimeSliceBeg and TimeSliceEnd
	and TimeSlicesType = '15Mins'
--	where updatedtime between convert(datetime, convert(date,getdate()))+.32 and getutcdate()
	where updatedtime between dateadd(MINUTE, -150, getutcdate()) and getutcdate()
	

truncate table 	LocationCoverage
insert	LocationCoverage
select x.parkFacilityID, x.FacilityID, EventCount = count(t.facilityId), 
	EntryFlag = isnull(SUM(EntryFlag),0),
	AbandonFlag = isnull(SUM(AbandonFlag),0),
	MergeFlag = isnull(SUM(MergeFlag),0),
	VBAFlag = isnull(SUM(VBAFlag),0),
	LoadFlag = isnull(SUM(LoadTime),0),
	ExitFlag = isnull(SUM(ExitFlag),0)
	from xiFacilities x
	left join TieOutBase t (nolock) on x.facilityId = t.facilityId 
	group by x.parkFacilityID, x.FacilityID


set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'Location Coverage End'
print @controlOffset
--Reports Start

TRUNCATE TABLE QueueCountsCache	
insert QueueCountsCache
select x.parkFacilityID, x.facilityID, EntryCount = ISNULL(EntryCount,0), MergeCount = ISNULL(MergeCount,0)
from xiFacilities x (nolock)
left join(
SELECT t1.facilityID, EntryCount = count(distinct t1.GuestID) 
from (
-- all eligible entry events
select guestID, RideNumber, facilityID, xPass, Timestamp
	from [Event2HoursRollingStandBy] (nolock)
	where EventTypeID = 1 --'Entry'
	--and  ReaderLocationFlag = 1 --'FPP-Merge'
) as t1
left join (
-- minus all guests who have hit merge or abandon state
select GuestID, RideNumber, facilityID, xPass, Timestamp
		from [Event2HoursRollingStandBy] (nolock)
	where  EventTypeID in (2,3)--('Merge','Abandon')
) as t2 on t1.RideNumber = t2.RideNumber		
	and t1.guestID = t2.guestID
	and t1.facilityID = t2.facilityID
	where t2.GuestID is NULL
	group by t1.facilityID )as t1 on t1.facilityID = x.FacilityID

left join(
SELECT facilityID, MergeCount = count(distinct GuestID)
	from [Event2HoursRollingStandBy] (nolock)
	where EventTypeID = 2 --'Merge'
    and TimeStamp >= DATEADD(MINUTE,-5, GETUTCDATE())
    group by facilityID) as t2 on t2.facilityID = x.FacilityID
    
MERGE [QueueCountsCacheWorking] as TARGET
USING [QueueCountsCacheStep01] AS SOURCE
on (TARGET.xPass = SOURCE.xPass
	AND TARGET.FacilityID = SOURCE.FacilityID
	AND QueueType = 'E2M')--Entry
WHEN MATCHED 
	THEN UPDATE 
	SET 
	TARGET.xPass = SOURCE.xPass
	,TARGET.FacilityID = SOURCE.FacilityID
	,TARGET.EntryCount = SOURCE.EventCount
--	,TARGET.UpdatedTime = getutcdate()	
WHEN NOT MATCHED BY TARGET AND QueueType = 'E2M'
	THEN INSERT (xPass,FacilityID, EntryCount)
	VALUES(SOURCE.xPass,SOURCE.FacilityID,SOURCE.EventCount);

MERGE [QueueCountsCacheWorking] as TARGET
USING [QueueCountsCacheStep01] AS SOURCE
on (TARGET.xPass = SOURCE.xPass
	AND TARGET.FacilityID = SOURCE.FacilityID
	AND QueueType = 'M2L')--Entry
WHEN MATCHED 
	THEN UPDATE 
	SET 
	TARGET.xPass = SOURCE.xPass
	,TARGET.FacilityID = SOURCE.FacilityID
	,TARGET.MergeCount = SOURCE.EventCount
--	,TARGET.UpdatedTime = getutcdate()	
WHEN NOT MATCHED BY TARGET AND QueueType = 'M2L'
	THEN INSERT (xPass,FacilityID, MergeCount)
	VALUES(SOURCE.xPass,SOURCE.FacilityID,SOURCE.EventCount);


MERGE [QueueCountsCacheWorking] as TARGET
USING [QueueCountsCacheStep01] AS SOURCE
on (TARGET.xPass = SOURCE.xPass
	AND TARGET.FacilityID = SOURCE.FacilityID
	AND QueueType = 'L2E')--Entry
WHEN MATCHED 
	THEN UPDATE 
	SET 
	TARGET.xPass = SOURCE.xPass
	,TARGET.FacilityID = SOURCE.FacilityID
	,TARGET.LoadCount = SOURCE.EventCount
--	,TARGET.UpdatedTime = getutcdate()	
WHEN NOT MATCHED BY TARGET AND QueueType = 'L2E'
	THEN INSERT (xPass,FacilityID, LoadCount)
	VALUES(SOURCE.xPass,SOURCE.FacilityID,SOURCE.EventCount);  
    
    
truncate table QueueCountsCacheLRR

insert QueueCountsCacheLRR
select  t1.parkFacilityID, t1.FacilityID, 
StandByCount = isnull(t2.EntryCount,0) + isnull(t3.EntryCount,0), 
FPCount = isnull(t4.EntryCount,0),
MergeCount = isnull(t2.MergeCount,0) + isnull(t3.MergeCount,0), 
LoadCount = isnull(t2.LoadCount,0)
from xiFacilities t1
left join (
select l.ParkFacilityID,
l.FacilityID,
xPass,
EntryCount,
MergeCount,
LoadCount
	from QueueCountsCacheWorking q (nolock)
	join LocationCoverage l on l.facilityId = q.facilityId
	where ExitFlag <> 0
	and xPass = 0) as t2 on t1.facilityId = t2.facilityId
left join (
select  l.ParkFacilityID,
l.FacilityID,
xPass,
EntryCount,
MergeCount,
LoadCount = 0
	from QueueCountsCacheWorking q (nolock)
	join LocationCoverage l on l.facilityId = q.facilityId
	where ExitFlag = 0
	and xPass = 0) as t3 on t1.facilityId = t3.facilityId
left join (
select  l.ParkFacilityID,
l.FacilityID,
xPass,
EntryCount,
MergeCount = 0,
LoadCount = 0
	from QueueCountsCacheWorking q (nolock)
	join LocationCoverage l on l.facilityId = q.facilityId
	where LoadFlag = 0) as t4 on t1.facilityId = t4.facilityId
 
    
BEGIN TRAN PUBLISH3


truncate table QueueCounts

truncate table QueueCountsLRR

insert QueueCounts (ParkFacilityID,
FacilityID,
EntryCount,
MergeCount) 
select * from QueueCountsCache (nolock)

insert QueueCountsLRR (parkFacilityID,
FacilityID,
StandByCount,
FPCount,
MergeCount,
LoadCount) 
select * from QueueCountsCacheLRR (nolock)


COMMIT TRAN PUBLISH3	


truncate table QueueCountsCache
truncate table QueueCountsCacheLRR

set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'Queue Counts Step 02 End'
print @controlOffset
--Reports Start


print 'GUEST STATES'
-----GUEST STATES-----    

MERGE GuestStates as TARGET
USING EventDelta AS SOURCE
on (TARGET.GuestID = SOURCE.GuestID 
	AND TARGET.RideID_Entry = SOURCE.RideNumber
	AND TARGET.xPass = SOURCE.xPass
	AND TARGET.FacilityID = SOURCE.FacilityID
	AND EventTypeID = 1)--Entry
WHEN MATCHED 
	THEN UPDATE 
	SET 
	TARGET.GuestID = SOURCE.GuestID
	,TARGET.xPass = SOURCE.xPass
	,TARGET.FacilityID = SOURCE.FacilityID
	,TARGET.RideID_Entry = SOURCE.RideNumber
	,TARGET.EntryTime = SOURCE.Timestamp
	,TARGET.LastUpdateEventTypeID = SOURCE.EventTypeID 
	,TARGET.UpdatedTime = getutcdate()		
WHEN NOT MATCHED BY TARGET AND EventTypeID = 1
	THEN INSERT (GuestID,xPass,FacilityID, RideID_Entry,EntryTime,LastUpdateEventTypeID)
	VALUES(SOURCE.GuestID,SOURCE.xPass,SOURCE.FacilityID,SOURCE.RideNumber,SOURCE.Timestamp,SOURCE.EventTypeID);
	
MERGE GuestStates as TARGET
USING EventDelta AS SOURCE
on (TARGET.GuestID = SOURCE.GuestID 
	AND TARGET.RideID_Entry = SOURCE.RideNumber
 	AND TARGET.xPass = SOURCE.xPass
	AND TARGET.FacilityID = SOURCE.FacilityID
	AND EventTypeID = 2)--Merge
WHEN MATCHED 
	THEN UPDATE 
	SET 
	TARGET.GuestID = SOURCE.GuestID
	,TARGET.xPass = SOURCE.xPass
	,TARGET.FacilityID = SOURCE.FacilityID
	,TARGET.RideID_Merge = SOURCE.RideNumber
	,TARGET.MergeTime = SOURCE.Timestamp
	,TARGET.MergeWaitTimeInMinutes = DATEDIFF(MINUTE,TARGET.EntryTime,SOURCE.Timestamp)	
	,TARGET.LastUpdateEventTypeID = SOURCE.EventTypeID 
	,TARGET.UpdatedTime = getutcdate()	
WHEN NOT MATCHED BY TARGET AND EventTypeID = 2
	THEN INSERT (GuestID,xPass,FacilityID, RideID_Entry, RideID_Merge,MergeTime,LastUpdateEventTypeID)
	VALUES(SOURCE.GuestID,SOURCE.xPass,SOURCE.FacilityID,SOURCE.RideNumber,SOURCE.RideNumber,SOURCE.Timestamp,SOURCE.EventTypeID);

MERGE GuestStates as TARGET
USING EventDelta AS SOURCE
on (TARGET.GuestID = SOURCE.GuestID 
	AND TARGET.RideID_Entry = SOURCE.RideNumber
 	AND TARGET.xPass = SOURCE.xPass
	AND TARGET.FacilityID = SOURCE.FacilityID
	AND EventTypeID = 3)--Abandon
WHEN MATCHED 
	THEN UPDATE 
	SET 
	TARGET.GuestID = SOURCE.GuestID
	,TARGET.xPass = SOURCE.xPass
	,TARGET.FacilityID = SOURCE.FacilityID
	,TARGET.RideID_Abandon = SOURCE.RideNumber
	,TARGET.AbandonTime = SOURCE.Timestamp
	,TARGET.LastUpdateEventTypeID = SOURCE.EventTypeID 
	,TARGET.UpdatedTime = getutcdate()	
WHEN NOT MATCHED BY TARGET AND EventTypeID = 3
	THEN INSERT (GuestID,xPass,FacilityID, RideID_Entry,RideID_Abandon,AbandonTime,LastUpdateEventTypeID)
	VALUES(SOURCE.GuestID,SOURCE.xPass,SOURCE.FacilityID,SOURCE.RideNumber,SOURCE.RideNumber,SOURCE.Timestamp,SOURCE.EventTypeID);
	
MERGE GuestStates as TARGET
USING EventDelta AS SOURCE
on (TARGET.GuestID = SOURCE.GuestID 
	AND TARGET.RideID_Entry = SOURCE.RideNumber
 	AND TARGET.xPass = SOURCE.xPass
	AND TARGET.FacilityID = SOURCE.FacilityID
	AND EventTypeID = 4)--Load
WHEN MATCHED 
	THEN UPDATE 
	SET 
	TARGET.GuestID = SOURCE.GuestID
	,TARGET.xPass = SOURCE.xPass
	,TARGET.FacilityID = SOURCE.FacilityID
	,TARGET.RideID_Load = SOURCE.RideNumber
	,TARGET.LoadTime = SOURCE.Timestamp	
	,TARGET.LoadWaitTimeInMinutes = DATEDIFF(MINUTE,TARGET.EntryTime,SOURCE.Timestamp)
	,TARGET.LastUpdateEventTypeID = SOURCE.EventTypeID 
	,TARGET.UpdatedTime = getutcdate()	
WHEN NOT MATCHED BY TARGET AND EventTypeID = 4
	THEN INSERT (GuestID,xPass,FacilityID, RideID_Entry,RideID_Load,LoadTime,LastUpdateEventTypeID)
	VALUES(SOURCE.GuestID,SOURCE.xPass,SOURCE.FacilityID,SOURCE.RideNumber,SOURCE.RideNumber,SOURCE.Timestamp,SOURCE.EventTypeID);
	
MERGE GuestStates as TARGET
USING EventDelta AS SOURCE
on (TARGET.GuestID = SOURCE.GuestID 
	AND TARGET.RideID_Entry = SOURCE.RideNumber
 	AND TARGET.xPass = SOURCE.xPass
	AND TARGET.FacilityID = SOURCE.FacilityID
	AND EventTypeID = 7)--VBA
WHEN MATCHED 
	THEN UPDATE 
	SET 
	TARGET.GuestID = SOURCE.GuestID
	,TARGET.xPass = SOURCE.xPass
	,TARGET.FacilityID = SOURCE.FacilityID
	,TARGET.RideID_VBA = SOURCE.RideNumber
	,TARGET.VBATime = SOURCE.Timestamp	
	,TARGET.LastUpdateEventTypeID = SOURCE.EventTypeID 
	,TARGET.UpdatedTime = getutcdate()	
WHEN NOT MATCHED BY TARGET AND EventTypeID = 7
	THEN INSERT (GuestID,xPass,FacilityID, RideID_Entry,RideID_VBA, VBATime, LastUpdateEventTypeID)
	VALUES(SOURCE.GuestID,SOURCE.xPass,SOURCE.FacilityID,SOURCE.RideNumber,SOURCE.RideNumber,SOURCE.Timestamp,SOURCE.EventTypeID);
	
		
MERGE GuestStates as TARGET
USING EventDelta AS SOURCE
on (TARGET.GuestID = SOURCE.GuestID 
	AND TARGET.RideID_Entry = SOURCE.RideNumber
 	AND TARGET.xPass = SOURCE.xPass
	AND TARGET.FacilityID = SOURCE.FacilityID
	AND EventTypeID = 5)--Exit
WHEN MATCHED 
	THEN UPDATE 
	SET 
	TARGET.GuestID = SOURCE.GuestID
	,TARGET.RideID_Entry = SOURCE.RideNumber
	,TARGET.xPass = SOURCE.xPass
	,TARGET.FacilityID = SOURCE.FacilityID
	,TARGET.RideID_Exit = SOURCE.RideNumber
	,TARGET.ExitTime = SOURCE.Timestamp	
	,TARGET.ExitWaitTimeInMinutes = DATEDIFF(MINUTE,TARGET.EntryTime,SOURCE.Timestamp)
	,TARGET.LastUpdateEventTypeID = SOURCE.EventTypeID 
	,TARGET.UpdatedTime = getutcdate()	
WHEN NOT MATCHED BY TARGET AND EventTypeID = 5
	THEN INSERT (GuestID,xPass,FacilityID, RideID_Entry, RideID_Exit,ExitTime, LastUpdateEventTypeID)
	VALUES(SOURCE.GuestID,SOURCE.xPass,SOURCE.FacilityID,SOURCE.RideNumber,SOURCE.RideNumber,SOURCE.Timestamp,SOURCE.EventTypeID);   
 
print 'GUEST STATES END'
-----GUEST STATES END-----

set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'Guest States End'
print @controlOffset
--Reports Start

--Wait Times
BEGIN TRAN PUBLISH05

truncate table WaitTimes 

insert WaitTimes (parkID, facilityId, E2M_FP, E2M_SB, E2L_FP, E2L_SB, M2L)
select parkFacilityID, t1.facilityId, E2M_FP, E2M_SB, E2L_FP, E2L_SB, M2L
	from (
select x.parkFacilityID, x.facilityId, E2M_SB = isnull(E2M,-1), E2L_SB = isnull(E2L,-1), M2L = isnull(M2L,-1)
	from xiFacilities x
	left join (select facilityID
	,xPass = isnull(xPass,-1)
	,E2M = isnull(SUM(E2M)/count(*),-1)
	,E2L = isnull(SUM(E2L)/count(*),-1)
	,M2L = isnull(SUM(M2L)/count(*),-1)
	from vw_GuestStates_15Minutes 
--	where E2M is NOT NULL and E2L is NOT NULL and M2L is NOT NULL 
	where E2L is NOT NULL --or E2M is NOT NULL or M2L is NOT NULL 
	group by facilityID, xPass) g on g.facilityID = x.facilityID and xPass = 0) as t1
	join(
select x.facilityId, E2M_FP = isnull(E2M,-1), E2L_FP = isnull(E2L,-1)
	from xiFacilities x
	left join (select facilityID
	,xPass = isnull(xPass,-1)
	,E2M = isnull(SUM(E2M)/count(*),-1)
	,E2L = isnull(SUM(E2L)/count(*),-1)
	,M2L = isnull(SUM(M2L)/count(*),-1)
	from vw_GuestStates_15Minutes 
--	where E2M is NOT NULL and E2L is NOT NULL and M2L is NOT NULL 
	where E2L is NOT NULL --or E2M is NOT NULL or M2L is NOT NULL 
	group by facilityID, xPass) g on g.facilityID = x.facilityID and xPass = 1) as t2 on t1.facilityId = t2.facilityId
	
COMMIT TRAN PUBLISH05	

set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'Wait Times End'
print @controlOffset
--Reports Start
print '100%'

END TRY
BEGIN CATCH

insert ETL_ExecutionErorrs
select ProcedureName = 'sp_LRR_ETL', 
TimeStamp = GETUTCDATE(), 
ERROR_NUMBER() AS ErrorNumber,
 ERROR_SEVERITY() AS ErrorSeverity,
 ERROR_STATE() AS ErrorState,
 ERROR_PROCEDURE() AS ErrorProcedure,
 ERROR_LINE() AS ErrorLine,
 ERROR_MESSAGE() AS ErrorMessage;

END CATCH
GO
PRINT N'Altering [dbo].[sp_PullAndSyncReportingDataUTC]...';


GO
ALTER procedure [dbo].[sp_PullAndSyncReportingDataUTC]
as

print 'START'
SET NOCOUNT ON

BEGIN TRY

declare @JobStatus int
declare @starttime datetime
declare @cutofftime datetime
declare @LastEventID bigint
declare @PreviousEventID bigint
--declare @UTCOffset int
set @cutofftime = getutcdate()
declare @BookID int
select @BookID = BusinessEventTypeID from gxp.BusinessEventType (nolock) where BusinessEventType = 'BOOK'
declare @ChangeID int
select @ChangeID = BusinessEventTypeID from gxp.BusinessEventType (nolock) where BusinessEventType = 'CHANGE'
declare @CancelID int
select @CancelID = BusinessEventSubTypeID from gxp.BusinessEventSubType (nolock) where BusinessEventSubType = 'CANCEL'
--select @UTCOffset = TimeOffset*-1 from DailyOffset 
declare @UTCDefaultOffset int
declare @UTCDLSOffset int
declare @UTCCurrentOffset int
declare @DLSStart smalldatetime, @DLSEnd smalldatetime
declare @controlOffset varchar (32)

--standard UTC offset
select top 1 @UTCDefaultOffset = UTCDefaultOffset 
	from xiFacilities (nolock)
	where parkFacilityID in (80007944)

--UTC offset with daylight savings
set @UTCDLSOffset = @UTCDefaultOffset+1

set @DLSStart = (select dbo.fn_GetDaylightSavingsTimeStart(DATEADD(HH,@UTCDefaultOffset,@cutofftime)))
set @DLSEnd = (select  dbo.fn_GetDaylightSavingsTimeEnd(DATEADD(HH,@UTCDefaultOffset,@cutofftime)))

select @UTCCurrentOffset = 
	case 
		when DATEADD(HH,@UTCDefaultOffset,@cutofftime) between @DLSStart and @DLSEnd then @UTCDLSOffset
		else @UTCDefaultOffset
	end 

--print @UTCCurrentOffset
--print @UTCDefaultOffset

--ETL Start
print 'ETL Start'
--insert dafault row to control table
 
IF NOT EXISTS (select top 1 jobID from SyncControl (nolock) )
BEGIN
insert syncControl (TimeStarted, Timestamp, TimeCompleted, Status)
select '1900-01-01', '1900-01-01', '1900-01-01', 1
END

--check if there are any running jobs
select @JobStatus = Status from syncControl (nolock) where jobID in (select jobID = MAX(jobid) from syncControl (nolock) )
IF @JobStatus = 0
BEGIN
IF (select DATEDIFF(SS, TimeStarted, GETUTCDATE()) from syncControl (nolock) where jobID in (select jobID = MAX(jobid) from syncControl (nolock) )) > 59
	BEGIN
	SET @JobStatus = 1
	END
END

IF @JobStatus = 1 
BEGIN
select @starttime = isnull(max(Timestamp),'1900-01-01') from syncControl (nolock) where status = 1

insert syncControl (TimeStarted, Timestamp)
select getutcdate(), @cutofftime

truncate table BlueLaneMasterDelta
truncate table EntitlementMasterDelta
truncate table OffersetWorkingDelta
truncate table GuestOffersetMappingDelta
truncate table RedemptionMasterDelta
truncate table RedemptionMasterDeltaMapping
truncate table RedemptionEventCacheRedeemed
truncate table RedemptionEventCacheValidated

select getutcdate(), @starttime, @cutofftime

--Guest ID zero handling

declare @SQL nvarchar(MAX)
declare @BusinessEventID bigint
declare @MaxBusinessEventID bigint

select @MaxBusinessEventID  = isnull(MAX(BusinessEventID),0) from [gxp].[BusinessEventPending]

insert [gxp].[BusinessEventPendingNext] (BusinessEventID,
EventLocationID,
BusinessEventTypeID,
BusinessEventSubTypeID,
ReferenceID,
GuestID,
Timestamp,
CorrelationID,
StartTime,
EndTime,
LocationID,
EntertainmentID,
RawMessage,
CreatedDate)
select BusinessEventID,
EventLocationID,
BusinessEventTypeID,
BusinessEventSubTypeID,
ReferenceID,
GuestID = 0,
Timestamp,
CorrelationID,
StartTime,
EndTime,
LocationID,
EntertainmentID,
RawMessage,
CreatedDate from  [gxp].[BusinessEvent] (nolock) where CreatedDate between @startTime and @cutofftime 
	--and BusinessEventTypeID = @BookID
	and LocationID <> 123123123 
	and BusinessEventID > @MaxBusinessEventID




insert [gxp].[BusinessEventPending]
	select DISTINCT p1.BusinessEventID
,p1.EventLocationID
,p1.BusinessEventTypeID
,p1.BusinessEventSubTypeID
,p1.ReferenceID
,p1.GuestID
,p1.Timestamp
,p1.CorrelationID
,p1.StartTime
,p1.EndTime
,p1.LocationID
,p1.EntertainmentID
,''
,p1.CreatedDate
,GETUTCDATE()
		from [gxp].[BusinessEventPendingNext] p1 (nolock)
		left join [gxp].[BusinessEventPending] p2 (nolock) on p1.BusinessEventID = p2.BusinessEventID
		where p2.BusinessEventID is NULL
		and p1.StartTime between dateadd(hour,-2, @startTime) and dateadd(hour,24,@startTime)
		
/******************************************************************************************************************/

select @BusinessEventID = 
MIN(BusinessEventID)
	from [gxp].[BusinessEventPending]
	where isnull(GuestID,0) <> 0


set @SQL = (select top 100  'exec gxp.usp_BusinessEvent_Create ''' + 
convert(nvarchar,isnull(EventLocation,''))+ ''', ''' +
convert(nvarchar,isnull(BusinessEventType,'')) + ''', ''' +
convert(nvarchar,isnull(BusinessEventSubType,'')) + ''', ''' +
convert(nvarchar,isnull(ReferenceID,'')) + ''', ''' +
convert(nvarchar, isnull(GuestID,'')) + ''', ''' +
convert(nvarchar, isnull(Timestamp,''),126) + ''', ''' +
convert(nvarchar(max), isnull(CorrelationID,'')) + ''', ''' +
convert(nvarchar(max), isnull(RawMessage,'')) + ''', ''' +
convert(nvarchar, isnull(StartTime,''),126) + ''', ''' +
convert(nvarchar, isnull(EndTime,''),126) + ''', ''' +
convert(nvarchar,isnull(EntertainmentID,'')) + ''', ''' + 
convert(nvarchar,'123123123') + ''', ''1'''
from [gxp].[BusinessEventPending] b1 (nolock)
	join gxp.BusinessEventType b2 on b1.BusinessEventTypeID = b2.BusinessEventTypeID
	join gxp.BusinessEventSubType b3 on b1.BusinessEventSubTypeID = b3.BusinessEventSubTypeID
	join gxp.EventLocation e1 on e1.EventLocationID = b1.EventLocationID
	where e1.EventLocation = 'GXP.XPASS'
	and b1.BusinessEventID = @BusinessEventID)

--print @SQL
--print @BusinessEventID

exec sp_executesql @SQL

delete from [gxp].[BusinessEventPending] where BusinessEventID = @BusinessEventID

/********************************************************************************************************/
/********************************************************************************************************/

select @BusinessEventID = 
MIN(BusinessEventID)
	from [gxp].[BusinessEventPending]
	where isnull(GuestID,0) <> 0


set @SQL = (select top 100  'exec gxp.usp_BusinessEvent_Create ''' + 
convert(nvarchar,isnull(EventLocation,''))+ ''', ''' +
convert(nvarchar,isnull(BusinessEventType,'')) + ''', ''' +
convert(nvarchar,isnull(BusinessEventSubType,'')) + ''', ''' +
convert(nvarchar,isnull(ReferenceID,'')) + ''', ''' +
convert(nvarchar, isnull(GuestID,'')) + ''', ''' +
convert(nvarchar, isnull(Timestamp,''),126) + ''', ''' +
convert(nvarchar(max), isnull(CorrelationID,'')) + ''', ''' +
convert(nvarchar(max), isnull(RawMessage,'')) + ''', ''' +
convert(nvarchar, isnull(StartTime,''),126) + ''', ''' +
convert(nvarchar, isnull(EndTime,''),126) + ''', ''' +
convert(nvarchar,isnull(EntertainmentID,'')) + ''', ''' + 
convert(nvarchar,'123123123') + ''', ''1'''
from [gxp].[BusinessEventPending] b1 (nolock)
	join gxp.BusinessEventType b2 on b1.BusinessEventTypeID = b2.BusinessEventTypeID
	join gxp.BusinessEventSubType b3 on b1.BusinessEventSubTypeID = b3.BusinessEventSubTypeID
	join gxp.EventLocation e1 on e1.EventLocationID = b1.EventLocationID
	--where e1.EventLocation = 'GXP.XPASS'
	where b1.BusinessEventID = @BusinessEventID)

--print @SQL
--print @BusinessEventID

exec sp_executesql @SQL

delete from [gxp].[BusinessEventPending] where BusinessEventID = @BusinessEventID

select @BusinessEventID = 
MIN(BusinessEventID)
	from [gxp].[BusinessEventPending]
	where isnull(GuestID,0) <> 0


set @SQL = (select top 100  'exec gxp.usp_BusinessEvent_Create ''' + 
convert(nvarchar,isnull(EventLocation,''))+ ''', ''' +
convert(nvarchar,isnull(BusinessEventType,'')) + ''', ''' +
convert(nvarchar,isnull(BusinessEventSubType,'')) + ''', ''' +
convert(nvarchar,isnull(ReferenceID,'')) + ''', ''' +
convert(nvarchar, isnull(GuestID,'')) + ''', ''' +
convert(nvarchar, isnull(Timestamp,''),126) + ''', ''' +
convert(nvarchar(max), isnull(CorrelationID,'')) + ''', ''' +
convert(nvarchar(max), isnull(RawMessage,'')) + ''', ''' +
convert(nvarchar, isnull(StartTime,''),126) + ''', ''' +
convert(nvarchar, isnull(EndTime,''),126) + ''', ''' +
convert(nvarchar,isnull(EntertainmentID,'')) + ''', ''' + 
convert(nvarchar,'123123123') + ''', ''1'''
from [gxp].[BusinessEventPending] b1 (nolock)
	join gxp.BusinessEventType b2 on b1.BusinessEventTypeID = b2.BusinessEventTypeID
	join gxp.BusinessEventSubType b3 on b1.BusinessEventSubTypeID = b3.BusinessEventSubTypeID
	join gxp.EventLocation e1 on e1.EventLocationID = b1.EventLocationID
	--where e1.EventLocation = 'GXP.XPASS'
	where b1.BusinessEventID = @BusinessEventID)


--print @SQL
--print @BusinessEventID

exec sp_executesql @SQL

delete from [gxp].[BusinessEventPending] where BusinessEventID = @BusinessEventID

select @BusinessEventID = 
MIN(BusinessEventID)
	from [gxp].[BusinessEventPending]
	where isnull(GuestID,0) <> 0


set @SQL = (select top 100  'exec gxp.usp_BusinessEvent_Create ''' + 
convert(nvarchar,isnull(EventLocation,''))+ ''', ''' +
convert(nvarchar,isnull(BusinessEventType,'')) + ''', ''' +
convert(nvarchar,isnull(BusinessEventSubType,'')) + ''', ''' +
convert(nvarchar,isnull(ReferenceID,'')) + ''', ''' +
convert(nvarchar, isnull(GuestID,'')) + ''', ''' +
convert(nvarchar, isnull(Timestamp,''),126) + ''', ''' +
convert(nvarchar(max), isnull(CorrelationID,'')) + ''', ''' +
convert(nvarchar(max), isnull(RawMessage,'')) + ''', ''' +
convert(nvarchar, isnull(StartTime,''),126) + ''', ''' +
convert(nvarchar, isnull(EndTime,''),126) + ''', ''' +
convert(nvarchar,isnull(EntertainmentID,'')) + ''', ''' + 
convert(nvarchar,'123123123') + ''', ''1'''
from [gxp].[BusinessEventPending] b1 (nolock)
	join gxp.BusinessEventType b2 on b1.BusinessEventTypeID = b2.BusinessEventTypeID
	join gxp.BusinessEventSubType b3 on b1.BusinessEventSubTypeID = b3.BusinessEventSubTypeID
	join gxp.EventLocation e1 on e1.EventLocationID = b1.EventLocationID
	--where e1.EventLocation = 'GXP.XPASS'
	where b1.BusinessEventID = @BusinessEventID)


--print @SQL
--print @BusinessEventID

exec sp_executesql @SQL

delete from [gxp].[BusinessEventPending] where BusinessEventID = @BusinessEventID

select @BusinessEventID = 
MIN(BusinessEventID)
	from [gxp].[BusinessEventPending]
	where isnull(GuestID,0) <> 0


set @SQL = (select top 100  'exec gxp.usp_BusinessEvent_Create ''' + 
convert(nvarchar,isnull(EventLocation,''))+ ''', ''' +
convert(nvarchar,isnull(BusinessEventType,'')) + ''', ''' +
convert(nvarchar,isnull(BusinessEventSubType,'')) + ''', ''' +
convert(nvarchar,isnull(ReferenceID,'')) + ''', ''' +
convert(nvarchar, isnull(GuestID,'')) + ''', ''' +
convert(nvarchar, isnull(Timestamp,''),126) + ''', ''' +
convert(nvarchar(max), isnull(CorrelationID,'')) + ''', ''' +
convert(nvarchar(max), isnull(RawMessage,'')) + ''', ''' +
convert(nvarchar, isnull(StartTime,''),126) + ''', ''' +
convert(nvarchar, isnull(EndTime,''),126) + ''', ''' +
convert(nvarchar,isnull(EntertainmentID,'')) + ''', ''' + 
convert(nvarchar,'123123123') + ''', ''1'''
from [gxp].[BusinessEventPending] b1 (nolock)
	join gxp.BusinessEventType b2 on b1.BusinessEventTypeID = b2.BusinessEventTypeID
	join gxp.BusinessEventSubType b3 on b1.BusinessEventSubTypeID = b3.BusinessEventSubTypeID
	join gxp.EventLocation e1 on e1.EventLocationID = b1.EventLocationID
	--where e1.EventLocation = 'GXP.XPASS'
	where b1.BusinessEventID = @BusinessEventID)


--print @SQL
--print @BusinessEventID

exec sp_executesql @SQL

delete from [gxp].[BusinessEventPending] where BusinessEventID = @BusinessEventID

select @BusinessEventID = 
MIN(BusinessEventID)
	from [gxp].[BusinessEventPending]
	where isnull(GuestID,0) <> 0


set @SQL = (select top 100  'exec gxp.usp_BusinessEvent_Create ''' + 
convert(nvarchar,isnull(EventLocation,''))+ ''', ''' +
convert(nvarchar,isnull(BusinessEventType,'')) + ''', ''' +
convert(nvarchar,isnull(BusinessEventSubType,'')) + ''', ''' +
convert(nvarchar,isnull(ReferenceID,'')) + ''', ''' +
convert(nvarchar, isnull(GuestID,'')) + ''', ''' +
convert(nvarchar, isnull(Timestamp,''),126) + ''', ''' +
convert(nvarchar(max), isnull(CorrelationID,'')) + ''', ''' +
convert(nvarchar(max), isnull(RawMessage,'')) + ''', ''' +
convert(nvarchar, isnull(StartTime,''),126) + ''', ''' +
convert(nvarchar, isnull(EndTime,''),126) + ''', ''' +
convert(nvarchar,isnull(EntertainmentID,'')) + ''', ''' + 
convert(nvarchar,'123123123') + ''', ''1'''
from [gxp].[BusinessEventPending] b1 (nolock)
	join gxp.BusinessEventType b2 on b1.BusinessEventTypeID = b2.BusinessEventTypeID
	join gxp.BusinessEventSubType b3 on b1.BusinessEventSubTypeID = b3.BusinessEventSubTypeID
	join gxp.EventLocation e1 on e1.EventLocationID = b1.EventLocationID
	--where e1.EventLocation = 'GXP.XPASS'
	where b1.BusinessEventID = @BusinessEventID)


--print @SQL
--print @BusinessEventID

exec sp_executesql @SQL

delete from [gxp].[BusinessEventPending] where BusinessEventID = @BusinessEventID


/*******************************************************************************************************/
/*******************************************************************************************************/



--new entitlements
insert EntitlementMasterDelta (
BusinessEventID,
GuestID,
ReferenceID,
EntertainmentID,
ParentLocationID,
EntitlementHour,
EntitlementDate,
EntitlementStartDateTimeUTC,
EntitlementEndDateTimeUTC,
EntitlementCreationDate,
Status)
select t1.BusinessEventID, t1.GuestID, t1.ReferenceID, 
t1.EntertainmentID, 
ParentLocationID = parkFacilityID,
EntitlementHour = convert(int, convert(varchar, datepart(HH,  dateadd(HH, UTCDefaultOffset,t1.StartTime)))+left(convert(varchar, datepart(MI,  dateadd(HH, UTCDefaultOffset,t1.StartTime)))+'00',2)), 
EntitlementDate = convert(date, dateadd(HH, UTCDefaultOffset,t1.StartTime)),
t1.StartTime,
t1.EndTime,
EntitlementCreationDate = convert(date,t1.TimeStamp),
Status = 1
	from gxp.BusinessEvent t1 (nolock) 
	--left join gxp.BusinessEvent t2 (nolock) on t1.GuestID = t2.GuestID 
	--							and t1.ReferenceID = t2.ReferenceID
	--							and t1.BusinessEventTypeID = @BookID
	--							and t2.BusinessEventTypeID = @ChangeID
	--							and t2.BusinessEventSubTypeID = @CancelID
	join xiFacilities t3 (nolock) on t3.facilityID = t1.EntertainmentID							
	where isnull(t1.GuestID,0) <> 0
	and t1.LocationID = 123123123 
	and t1.BusinessEventTypeID = @BookID
	and t1.CreatedDate between @startTime and @cutofftime
	and DATEADD(HH, @UTCDefaultOffset, t1.StartTime) not between  @DLSStart and @DLSEnd
	--and t2.ReferenceID is NULL
	
insert EntitlementMasterDelta (
BusinessEventID,
GuestID,
ReferenceID,
EntertainmentID,
ParentLocationID,
EntitlementHour,
EntitlementDate,
EntitlementStartDateTimeUTC,
EntitlementEndDateTimeUTC,
EntitlementCreationDate,
Status)
select t1.BusinessEventID, t1.GuestID, t1.ReferenceID, 
t1.EntertainmentID, 
ParentLocationID = parkFacilityID,
EntitlementHour = convert(int, convert(varchar, datepart(HH,  dateadd(HH, @UTCDLSOffset,t1.StartTime)))+left(convert(varchar, datepart(MI,  dateadd(HH, @UTCDLSOffset,t1.StartTime)))+'00',2)), 
EntitlementDate = convert(date, dateadd(HH, @UTCDLSOffset,t1.StartTime)),
t1.StartTime,
t1.EndTime,
EntitlementCreationDate = convert(date,t1.TimeStamp),
Status = 1
	from gxp.BusinessEvent t1 (nolock) 
	--left join gxp.BusinessEvent t2 (nolock) on t1.GuestID = t2.GuestID 
	--							and t1.ReferenceID = t2.ReferenceID
	--							and t1.BusinessEventTypeID = @BookID
	--							and t2.BusinessEventTypeID = @ChangeID
	--							and t2.BusinessEventSubTypeID = @CancelID
	join xiFacilities t3 (nolock) on t3.facilityID = t1.EntertainmentID							
	where isnull(t1.GuestID,0) <> 0
	and t1.LocationID = 123123123 
	and t1.BusinessEventTypeID = @BookID
	and t1.CreatedDate between @startTime and @cutofftime
	and DATEADD(HH, @UTCDefaultOffset, t1.StartTime)  between  @DLSStart and @DLSEnd
	--and t2.ReferenceID is NULL

	
--canceled entitlements
insert EntitlementMasterDelta(
BusinessEventID,
GuestID,
ReferenceID,
EntertainmentID,
ParentLocationID,
EntitlementHour,
EntitlementDate,
EntitlementStartDateTimeUTC,
EntitlementEndDateTimeUTC,
EntitlementCreationDate,
Status)
select distinct t1.BusinessEventID, t1.GuestID, t1.ReferenceID, 
t1.EntertainmentID, 
ParentLocationID = parkFacilityID,
EntitlementHour = convert(int, convert(varchar, datepart(HH,  dateadd(HH, UTCDefaultOffset,t1.StartTime)))+left(convert(varchar, datepart(MI,  dateadd(HH, UTCDefaultOffset,t1.StartTime)))+'00',2)), 
EntitlementDate = convert(date, dateadd(HH, UTCDefaultOffset,t1.StartTime)),
t1.StartTime,
t1.EndTime,
EntitlementCreationDate = convert(date, t1.TimeStamp),
Status = 0
	from gxp.BusinessEvent t1 (nolock) 
	join gxp.BusinessEvent t2 (nolock)  on t1.GuestID = t2.GuestID
								and t1.ReferenceID = t2.ReferenceID
								and t1.BusinessEventTypeID = @BookID
								and t2.BusinessEventTypeID = @ChangeID
								and t2.BusinessEventSubTypeID = @CancelID
	join xiFacilities t3 (nolock) on t3.facilityID = t1.EntertainmentID							
	where t1.BusinessEventTypeID = @BookID
	and t1.LocationID = 123123123 
	and isnull(t1.GuestID,0) <> 0
	and t2.CreatedDate between @startTime and @cutofftime
	and DATEADD(HH, @UTCDefaultOffset, t1.StartTime) not between  @DLSStart and @DLSEnd
	
--canceled entitlements
insert EntitlementMasterDelta(
BusinessEventID,
GuestID,
ReferenceID,
EntertainmentID,
ParentLocationID,
EntitlementHour,
EntitlementDate,
EntitlementStartDateTimeUTC,
EntitlementEndDateTimeUTC,
EntitlementCreationDate,
Status)
select distinct t1.BusinessEventID, t1.GuestID, t1.ReferenceID,
t1.EntertainmentID, 
ParentLocationID = parkFacilityID,
EntitlementHour = convert(int, convert(varchar, datepart(HH,  dateadd(HH, @UTCDLSOffset,t1.StartTime)))+left(convert(varchar, datepart(MI,  dateadd(HH, @UTCDLSOffset,t1.StartTime)))+'00',2)), 
EntitlementDate = convert(date, dateadd(HH, @UTCDLSOffset,t1.StartTime)),
t1.StartTime,
t1.EndTime,
EntitlementCreationDate = convert(date, t1.TimeStamp),
Status = 0
	from gxp.BusinessEvent t1 (nolock) 
	join gxp.BusinessEvent t2 (nolock)  on t1.GuestID = t2.GuestID 
								and t1.ReferenceID = t2.ReferenceID
								and t1.BusinessEventTypeID = @BookID
								and t2.BusinessEventTypeID = @ChangeID
								and t2.BusinessEventSubTypeID = @CancelID
	join xiFacilities t3 (nolock) on t3.facilityID = t1.EntertainmentID							
	where t1.BusinessEventTypeID = @BookID
	and isnull(t1.GuestID,0) <> 0
	and t1.LocationID = 123123123 
	and t2.CreatedDate between @startTime and @cutofftime
	and DATEADD(HH, @UTCDefaultOffset, t1.StartTime) between  @DLSStart and @DLSEnd
	
	
--insert [EntitlementMasterDeltaWorking]
--select * from EntitlementMasterDelta	

MERGE EntitlementMaster as TARGET
USING EntitlementMasterDelta AS SOURCE
on (TARGET.BusinessEventID = SOURCE.BusinessEventID)
WHEN MATCHED 
	THEN UPDATE 
	SET TARGET.ReferenceID = SOURCE.ReferenceID
	,TARGET.GuestID = SOURCE.GuestID
	,TARGET.EntertainmentID = SOURCE.EntertainmentID
	,TARGET.ParentLocationID = SOURCE.ParentLocationID
	,TARGET.EntitlementHour = SOURCE.EntitlementHour
	,TARGET.EntitlementDate = SOURCE.EntitlementDate
	,TARGET.EntitlementStartDateTimeUTC = SOURCE.EntitlementStartDateTimeUTC
	,TARGET.EntitlementEndDateTimeUTC = SOURCE.EntitlementEndDateTimeUTC
	,TARGET.EntitlementCreationDate = SOURCE.EntitlementCreationDate
	,TARGET.Status = SOURCE.Status
	,TARGET.UpdatedDateUTC = SOURCE.CreatedDateUTC
	,TARGET.SelectedHour = case when LEN(SOURCE.EntitlementHour) = 4 then left(SOURCE.EntitlementHour,2)
							ELSE left(SOURCE.EntitlementHour,1)
							end 
WHEN NOT MATCHED BY TARGET
	THEN INSERT (BusinessEventID,ReferenceID,GuestID,
	EntertainmentID,ParentLocationID, EntitlementHour,EntitlementDate,EntitlementStartDateTimeUTC,
	EntitlementEndDateTimeUTC,EntitlementCreationDate,Status,SelectedHour)
	VALUES(SOURCE.BusinessEventID,SOURCE.ReferenceID,SOURCE.GuestID,
	SOURCE.EntertainmentID,SOURCE.ParentLocationID,SOURCE.EntitlementHour,SOURCE.EntitlementDate,
	SOURCE.EntitlementStartDateTimeUTC,SOURCE.EntitlementEndDateTimeUTC,SOURCE.EntitlementCreationDate,SOURCE.Status,
	case when LEN(SOURCE.EntitlementHour) = 4 then left(SOURCE.EntitlementHour,2)
							ELSE left(SOURCE.EntitlementHour,1)
							end);


insert GuestOffersetMappingDelta
select m.GuestId as guestid, m.Status, m.EntitlementDate,
	min(m.EntitlementHour) as minh, 
	max(m.EntitlementHour) as maxh
	from EntitlementMaster(nolock) as m
    JOIN EntitlementMasterDelta (nolock) as d ON m.GuestID = d.GuestID
	where m.Status = 1
	group by m.GuestID, m.Status, m.EntitlementDate 

insert OffersetWorkingDelta
select GuestId, EntitlementDate, OfferSet = min(convert(int, right(label,1))) 
from GuestOffersetMappingDelta t1
	join OffersetWindow o on EntitlementDate = dateActive
		where minh between hourStart and hourEnd
			AND maxh between hourStart and hourEnd
	group by GuestId, EntitlementDate
	
				
update t1			
set Offerset = t2.OfferSet
from EntitlementMaster (nolock) t1
join OffersetWorkingDelta (nolock) t2 on t1.guestID = t2.GuestID
							and t1.EntitlementDate = t2.EntitlementDate
							
--entitlements end

--redemptions start
							
insert RedemptionEventCacheRedeemed
select t1.*, GuestID
 	from gxp.RedemptionEvent t1 (nolock) 
	join gxp.BusinessEvent b1 (NOLOCK) on b1.BusinessEventID = t1.RedemptionEventID
 	where t1.CreatedDate between @startTime and @cutofftime 
	and AppointmentStatusID = 1
	--and b1.LocationID = 123123123 
	order by AppointmentID, CacheXpassAppointmentID

insert RedemptionEventCacheValidated
select RedemptionEventID = MAX(r2.RedemptionEventID),  r2.AppointmentID, r2.CacheXpassAppointmentID, TapDate = MAX(r2.TapDate),
	AppointmentReasonID = case when COUNT(*) > 1 then 3
		else max(r2.AppointmentReasonID)
		end,
		ValidationCount = COUNT(*)
	from RedemptionEventCacheRedeemed (nolock) r1
	join gxp.RedemptionEvent (nolock) r2 on r1.AppointmentID = r2.AppointmentID 
										and r1.CacheXpassAppointmentID = r2.CacheXpassAppointmentID
										and r2.AppointmentStatusID = 2
	group by r2.AppointmentID, r2.CacheXpassAppointmentID
				

insert RedemptionMasterDelta (
ValidationID,
RedemptionEventID,
GuestID,
ReferenceID,
FacilityID,
ParentLocationID,
ValidationReason,
RedemptionReason,
ValidationTime,
RedemptionTime)
select ValidationID = isnull(r2.RedemptionEventID,r1.RedemptionEventID), r1.RedemptionEventID, 
	r1.GuestID, ReferenceID = r1.AppointmentID, 
	x.FacilityID, x.parkFacilityID,
	ValidationReason = 
	case when r4.AppointmentReason is NULL and isnull(FacilityConfigurationID,1) = 2 then r3.AppointmentReason
		when r4.AppointmentReason is NULL and isnull(FacilityConfigurationID,1) = 1 then 'NA'
		else r4.AppointmentReason
	end,
	RedemptionReason = r3.AppointmentReason, 
	ValidationTime = dateadd(HH, @UTCCurrentOffset, r2.tapdate), RedemptionTime =  dateadd(HH, @UTCCurrentOffset, r1.tapdate)
 		from RedemptionEventCacheRedeemed (nolock) r1 
	left join RedemptionEventCacheValidated (nolock) r2 on r1.AppointmentID = r2.AppointmentID 
										and r1.CacheXpassAppointmentID = r2.CacheXpassAppointmentID
	join gxp.AppointmentReason (nolock) r3 on r1.AppointmentReasonID = r3.AppointmentReasonID									
	left join gxp.AppointmentReason (nolock) r4 on r2.AppointmentReasonID = r4.AppointmentReasonID
	left join dbo.xiFacilities x (nolock) on x.GXPEntertainmentID = r1.FacilityID
  order by 2,1
	

update r
	set GuestID = e.GuestID 
	from RedemptionMasterDelta r
	join EntitlementMaster e (nolock) on r.ReferenceID = e.ReferenceID	

update r
	set GuestID = e.GuestID 
	from RedemptionMasterDelta r
	join gxp.BusinessEvent e (nolock) on r.ReferenceID = e.ReferenceID	
	and LocationID = 123123123	
	and r.GuestID not in (select e.GuestID 
	from RedemptionMasterDelta r
	join EntitlementMaster e (nolock) on r.ReferenceID = e.ReferenceID)	


insert RedemptionMasterDeltaMapping
select RedemptionEventID, ValidationID = max(ValidationID) 
	from RedemptionMasterDelta
	group by RedemptionEventID
	
	
MERGE RedemptionMaster as TARGET
USING (select t1.RedemptionEventID,GuestID,ReferenceID,FacilityID,ParentLocationID,
			ValidationReason,RedemptionReason,ValidationTime,RedemptionTime, t1.CreatedDate 
			from RedemptionMasterDelta t1 (nolock) 
			join RedemptionMasterDeltaMapping t2 (nolock) 
			on t1.RedemptionEventID = t2.RedemptionEventID
			and t1.ValidationID = t2.ValidationID) AS SOURCE
on (TARGET.RedemptionEventID = SOURCE.RedemptionEventID)
WHEN MATCHED 
	THEN UPDATE 
	SET 
	TARGET.GuestID = SOURCE.GuestID
	,TARGET.ReferenceID = SOURCE.ReferenceID
	,TARGET.FacilityID = SOURCE.FacilityID
	,TARGET.ParentLocationID = SOURCE.ParentLocationID
	,TARGET.ValidationReason = SOURCE.ValidationReason
	,TARGET.RedemptionReason = SOURCE.RedemptionReason
	,TARGET.ValidationTime = SOURCE.ValidationTime
	,TARGET.RedemptionTime = SOURCE.RedemptionTime
	,TARGET.UpdatedDate = SOURCE.CreatedDate
WHEN NOT MATCHED BY TARGET
	THEN INSERT (RedemptionEventID,GuestID,ReferenceID,FacilityID,ParentLocationID,
	ValidationReason,RedemptionReason,ValidationTime,RedemptionTime)
	VALUES(SOURCE.RedemptionEventID,SOURCE.GuestID,SOURCE.ReferenceID,SOURCE.FacilityID,SOURCE.ParentLocationID,
	SOURCE.ValidationReason,SOURCE.RedemptionReason,SOURCE.ValidationTime,SOURCE.RedemptionTime);


--redemptions end

--blue lanes start

insert BlueLaneMasterDelta(
BlueLaneEventID,
GuestID,
FacilityID,
ParentLocationID,
BlueLineCode,
BlueLineTime)
select BlueLaneEventID, GuestID, t5.FacilityID, t5.parkFacilityID, BlueLineCode = ReasonCode, BlueLineTime = TapTime
from gxp.bluelaneevent t1 (NOLOCK)
join gxp.BusinessEvent t2 (NOLOCK) ON t2.[BusinessEventID] = t1.[BlueLaneEventID]
join gxp.ReasonCode t3 (NOLOCK) on t1.ReasonCodeID = t3.ReasonCodeID
join xiFacilities t5 on t1.EntertainmentID = t5.FacilityID
where t1.CreatedDate between @startTime and @cutofftime
--and t2.LocationID = 123123123 

insert BlueLaneMasterDelta(
BlueLaneEventID,
GuestID,
FacilityID,
ParentLocationID,
BlueLineCode,
BlueLineTime)
select BlueLaneEventID,
GuestID,
FacilityID,
ParentLocationID,
BlueLineCode = case when Offset <= 0 then 'Early'
		when Offset > 0 then 'Late'
		else 'No Xpass'	
		end,
BlueLineTime
	 from (
 select distinct BlueLaneEventID = RedemptionEventID, 
 t1.GuestID, t1.FacilityID, t1.ParentLocationID, BlueLineTime = isnull(ValidationTime, RedemptionTime),
	Offset = case when isnull(ValidationTime, RedemptionTime) >  dateadd(HH, @UTCCurrentOffset, EntitlementStartDateTimeUTC)
	then datediff(MINUTE, dateadd(HH, @UTCCurrentOffset, EntitlementEndDateTimeUTC), isnull(ValidationTime, RedemptionTime))
	else datediff(MINUTE, dateadd(HH, @UTCCurrentOffset, EntitlementStartDateTimeUTC), isnull(ValidationTime, RedemptionTime))
	end
	from RedemptionMaster t1 (nolock)
	join EntitlementMaster t2 (nolock) on t1.GuestID = t2.GuestID
	and t1.ReferenceID = t2.ReferenceID 
	where ValidationReason in ('ACS','SWP','OTH','OVR')
	and t1.CreatedDate between @startTime and @cutofftime
	) as t1

MERGE BlueLaneMaster as TARGET
USING BlueLaneMasterDelta AS SOURCE
on (TARGET.BlueLaneEventID = SOURCE.BlueLaneEventID)
WHEN MATCHED 
	THEN UPDATE 
	SET 
	TARGET.GuestID = SOURCE.GuestID
	,TARGET.FacilityID = SOURCE.FacilityID
	,TARGET.ParentLocationID = SOURCE.ParentLocationID
	,TARGET.BlueLineCode = SOURCE.BlueLineCode
	,TARGET.BlueLineTime = SOURCE.BlueLineTime
	,TARGET.UpdatedDate = SOURCE.CreatedDate	
WHEN NOT MATCHED BY TARGET
	THEN INSERT (BlueLaneEventID,GuestID,FacilityID,ParentLocationID,BlueLineCode,BlueLineTime)
	VALUES(SOURCE.BlueLaneEventID,SOURCE.GuestID,SOURCE.FacilityID,
	SOURCE.ParentLocationID,SOURCE.BlueLineCode,SOURCE.BlueLineTime);
	
truncate table EntitlementMasterDelta
truncate table OffersetWorkingDelta
truncate table RedemptionMasterDelta
truncate table GuestOffersetMappingDelta
truncate table RedemptionMasterDeltaMapping
truncate table BlueLaneMasterDelta
truncate table RedemptionEventCacheRedeemed
truncate table RedemptionEventCacheValidated

--blue lanes end
--ETL End

set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'ETL End'
print @controlOffset
--Reports Start

print 'Reports Start'

truncate table RedemptionsCache

--Cache Results

insert RedemptionsCache
--redemptions w/o entitlement
select MetricType = 'RedNoEnt', EntitlementDate = CONVERT(date,RedemptionTime), 
	FacilityID, t1.ParentLocationID,
	SelectedHour = DATEPART(HH,RedemptionTime),	
	Selected = 0,
	Redeemed = COUNT(distinct RedemptionEventID),
	OfferSet = 0
	from RedemptionMaster t1 (nolock) 
	left join EntitlementMaster t2 (nolock) on t1.GuestID = t2.GuestID
	and t1.ReferenceID = t2.ReferenceID
	left join guestFilter g1 on g1.guestID = t1.GuestID
	where RedemptionTime >= convert(date,getdate())
	and t2.ReferenceID is NULL
	and g1.guestID is NULL	
	group by CONVERT(date,RedemptionTime), FacilityID, t1.ParentLocationID,
	DATEPART(HH,RedemptionTime)
	order by 1,2,3


set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'redemptions 1'
print @controlOffset 
--redemptions

truncate table RedemptionCacheStep01
truncate table RedemptionCacheStep02
truncate table RedemptionCacheStep03
truncate table RedemptionCacheStep04

insert RedemptionCacheStep01		
select  MetricType = 'Red', EntitlementDate, 
	FacilityID = EntertainmentID,
	ParkID = ParentLocationID, 
	SelectedHour,
	OfferSet,	
	Selected = COUNT(distinct BusinessEventID)
	from  EntitlementMaster t1 (nolock) 
	left join guestFilter g1 on g1.guestID = t1.GuestID
	where EntitlementDate >= convert(date,getdate())
	and Status = 1
	and g1.guestID is NULL
	group by EntitlementDate, EntertainmentID, ParentLocationID, OfferSet,
	SelectedHour		


insert RedemptionCacheStep02
select MetricType = case 
	when ValidationReason in ('ACS','SWP','OTH','OVR') then 'RedOvr'
	else 'Red'
	end,
EntitlementDate, FacilityID = isnull(FacilityID, EnterTainmentID), 
	ParkID = isnull(t1.ParentLocationID, t2.ParentLocationID),
	SelectedHour, 
	Redeemed = COUNT(distinct RedemptionEventID),
	OfferSet

	from  EntitlementMaster t2 (nolock)
	join RedemptionMaster t1 (nolock) on t1.GuestID = t2.GuestID
	and t1.ReferenceID = t2.ReferenceID 
	and Status = 1
	left join guestFilter g1 on g1.guestID = t2.GuestID
	where EntitlementDate >= convert(date,getdate())
	and g1.guestID is NULL
	group by case 
	when ValidationReason in ('ACS','SWP','OTH','OVR') then 'RedOvr'
	else 'Red'
	end,
	EntitlementDate, 
	isnull(FacilityID, EnterTainmentID), 
	isnull(t1.ParentLocationID, t2.ParentLocationID),
		SelectedHour,
		OfferSet

insert RedemptionCacheStep03		
select  MetricType = 'Red', EntitlementDate, 
	FacilityID = EntertainmentID,
	ParkID = ParentLocationID, 
	SelectedHour,
	OfferSet,	
	Selected = COUNT(distinct BusinessEventID)
	from  EntitlementMaster t1 (nolock) 
	join XrefGuestIDPublicID t2 on t1.GuestID = t2.GuestID
	left join guestFilter g1 on g1.guestID = t1.GuestID
	where EntitlementDate >= convert(date,getdate())
	and Status = 1
	and g1.guestID is NULL
	group by EntitlementDate, EntertainmentID, ParentLocationID, OfferSet, SelectedHour		
	


insert RedemptionCacheStep04
select MetricType = case 
	when ValidationReason in ('ACS','SWP','OTH','OVR') then 'RedOvr'
	else 'Red'
	end,
EntitlementDate, FacilityID = isnull(FacilityID, EnterTainmentID), 
	ParkID = isnull(t1.ParentLocationID, t2.ParentLocationID),
	SelectedHour, 
	Redeemed = COUNT(distinct RedemptionEventID),
	OfferSet

	from  EntitlementMaster t2 (nolock)
	join RedemptionMaster t1 (nolock) on t1.GuestID = t2.GuestID
	join XrefGuestIDPublicID t3 on t3.GuestID = t2.GuestID
	and t1.ReferenceID = t2.ReferenceID 
	and Status = 1
	left join guestFilter g1 on g1.guestID = t2.GuestID
	where EntitlementDate >= convert(date,getdate())
	and g1.guestID is NULL
	group by case 
	when ValidationReason in ('ACS','SWP','OTH','OVR') then 'RedOvr'
	else 'Red'
	end,
	EntitlementDate, 
	isnull(FacilityID, EnterTainmentID), 
	isnull(t1.ParentLocationID, t2.ParentLocationID),
		SelectedHour,
		OfferSet
	
insert RedemptionsCache
select MetricType = ISNULL(t2.MetricType, t1.MetricType),
t1.EntitlementDate,
t1.FacilityID,
t1.ParkID,
t1.SelectedHour,
t1.Selected,
Redeemed = isnull(t2.Redeemed,0),
t1.OfferSet
from RedemptionCacheStep01 as t1
left join RedemptionCacheStep02 as t2 on t1.ParkID = t2.ParkID
			and t1.EntitlementDate = t2.EntitlementDate
			and t1.FacilityID = t2.FacilityID
			and t1.SelectedHour = t2.SelectedHour
			and t1.OfferSet = t2.OfferSet

insert RedemptionsInParkCache
select MetricType = ISNULL(t2.MetricType, t1.MetricType),
t1.EntitlementDate,
t1.FacilityID,
t1.ParkID,
t1.SelectedHour,
t1.Selected,
Redeemed = isnull(t2.Redeemed,0),
t1.OfferSet
from RedemptionCacheStep03 as t1
left join RedemptionCacheStep04 as t2 on t1.ParkID = t2.ParkID
			and t1.EntitlementDate = t2.EntitlementDate
			and t1.FacilityID = t2.FacilityID
			and t1.SelectedHour = t2.SelectedHour
			and t1.OfferSet = t2.OfferSet

set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'redemptions 2'
print @controlOffset 
			
--Publish Results

BEGIN TRAN PUBLISH
truncate table Redemptions

insert Redemptions (MetricType,
EntitlementDate,
FacilityID,
ParkID,
SelectedHour,
Selected,
Redeemed,
OfferSet)
select * from RedemptionsCache (nolock)

truncate table RedemptionsInPark

insert RedemptionsInPark (MetricType,
EntitlementDate,
FacilityID,
ParkID,
SelectedHour,
Selected,
Redeemed,
OfferSet)
select * from RedemptionsInParkCache (nolock)

COMMIT TRAN PUBLISH

truncate table RedemptionsCache
truncate table RedemptionsInParkCache

truncate table BlueLanesCache

insert BlueLanesCache
--blue lanes
select MetricType = 'BlueLane', BlueLineCode, ReasonCodeID, EntitlementDate = CONVERT(date,BlueLineTime), 
	FacilityID, t1.ParentLocationID,
	SelectedHour = DATEPART(HH,BlueLineTime),	
	Redeemed = COUNT(distinct BlueLaneEventID)
	from BlueLaneMaster t1 (nolock) 
	join gxp.ReasonCode t2 on t1.BlueLineCode = t2.ReasonCode
	left join guestFilter g1 on g1.guestID = t1.GuestID
	where BlueLineTime >= convert(date,getdate())
	and g1.guestID is NULL	
	group by CONVERT(date,BlueLineTime), FacilityID, t1.ParentLocationID,
	DATEPART(HH,BlueLineTime),BlueLineCode, ReasonCodeID
	order by 4,5
		
BEGIN TRAN PUBLISH0

truncate table BlueLanes

insert BlueLanes (MetricType,
BlueLineCode,
ReasonCodeID,
EntitlementDate,
FacilityID,
ParentLocationID,
SelectedHour,
Redeemed) 
select * from BlueLanesCache (nolock)

COMMIT TRAN PUBLISH0	

truncate table BlueLanesCache

set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'bluelanes 1'
print @controlOffset 

--Reports End

--Recruitment	

truncate table RecrutmentDetailCache
truncate table RecruitmentCache

-- not required for current dashboards features
--insert RecrutmentDetailCache
--select MetricType = 'RecruitPreArival', EntitlementCreationDate, FacilityID = 0, ParkID = t1.ParentLocationID, 
--	BookedGuests = COUNT(distinct T1.GuestID),
--	0,0,0
--	from  EntitlementMaster t1 (nolock) 
--	left join guestFilter g1 on g1.guestID = t1.GuestID
--	where Status = 1
--	and g1.guestID is NULL	
--	group by EntitlementCreationDate, t1.ParentLocationID
--	order by 1,2,3	
	


truncate table RecruitmentCacheStep01
insert RecruitmentCacheStep01
select  MetricType = 'Visits', EntitlementDate, EntertainmentID = 0,
	t1.ParentLocationID, 
	BookedGuests = COUNT(distinct T1.GuestID)
	from  EntitlementMaster t1 (nolock) 
	left join guestFilter g1 on g1.guestID = t1.GuestID
	where EntitlementDate <= convert(date,getdate()+6)
	and Status = 1
	and g1.guestID is NULL
	group by EntitlementDate,
	t1.ParentLocationID
	
truncate table RecruitmentCacheStep02
insert RecruitmentCacheStep02
select EntitlementDate,	t1.ParentLocationID, 
	RedeemedGuests = COUNT(distinct t2.GuestID)
	from  EntitlementMaster t1 (nolock) 
	left join RedemptionMaster t2 (nolock) on t1.GuestID = t2.GuestID
	and t1.ReferenceID = t2.ReferenceID 
	left join guestFilter g1 on g1.guestID = t1.GuestID
	where EntitlementDate <= convert(date,getdate()+6)
	and Status = 1
	and g1.guestID is NULL
	group by EntitlementDate, 
	t1.ParentLocationID
 	
insert RecruitmentCache
select t1.MetricType, t1.EntitlementDate, t1.EntertainmentID, t1.ParentLocationID, 
	BookedGuests, RedeemedGuests = ISNULL(RedeemedGuests,0),0
from RecruitmentCacheStep01 as t1
left join RecruitmentCacheStep02 as t2 
	on t1.EntitlementDate = t2.EntitlementDate
	and t1.ParentLocationID = t2.ParentLocationID
order by 1,2,3

set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'recruitment 1'
print @controlOffset 

insert RecruitmentCache
select t1.MetricType, t1.EntitlementDate, t1.EntertainmentID, t1.ParentLocationID, 
	BookedGuests, RedeemedGuests = ISNULL(RedeemedGuests,0), t1.PreArrival
from (
select  MetricType = 'PreArrival', EntitlementDate, EntertainmentID = 0,
	t1.ParentLocationID, 
	BookedGuests = COUNT(distinct T1.GuestID),
	PreArrival = DATEDIFF(DD, EntitlementDate, EntitlementCreationDate)
	from  EntitlementMaster t1 (nolock) 
	left join guestFilter g1 on g1.guestID = t1.GuestID
	where EntitlementDate <= convert(date,getdate()+6)
	and Status = 1
	and g1.guestID is NULL
	group by EntitlementDate,
	t1.ParentLocationID,
	DATEDIFF(DD, EntitlementDate, EntitlementCreationDate)) as t1
left join (
select EntitlementDate,	t1.ParentLocationID, 
	RedeemedGuests = COUNT(distinct T1.GuestID),
	PreArrival = DATEDIFF(DD, EntitlementDate, EntitlementCreationDate)
	from  EntitlementMaster t1 (nolock) 
	join RedemptionMaster t2 (nolock) on t1.GuestID = t2.GuestID
	and t1.ReferenceID = t2.ReferenceID 
	left join guestFilter g1 on g1.guestID = t1.GuestID
	where EntitlementDate <= convert(date,getdate()+6)
	and Status = 1
	and g1.guestID is NULL
	group by EntitlementDate, 
	t1.ParentLocationID,
	DATEDIFF(DD, EntitlementDate, EntitlementCreationDate)) as t2 
	on t1.EntitlementDate = t2.EntitlementDate
	and t1.ParentLocationID = t2.ParentLocationID
	and t1.PreArrival = t2.PreArrival 
order by 1,2,3


set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'recruitment 2'
print @controlOffset 

insert RecruitmentCache
select  MetricType = 'InPark', EntitlementDate, EntertainmentID = 0,
	t1.ParentLocationID, 
	BookedGuestsInPark = COUNT(distinct T1.GuestID),
	SelectedInPark = COUNT(distinct T1.BusinessEventID),
	0
	from  EntitlementMaster t1 (nolock) 
	join XrefGuestIDPublicID t2 on t1.GuestID = t2.GuestID
	left join guestFilter g1 on g1.guestID = t1.GuestID
	where EntitlementDate <= convert(date,getdate()+1)
	and Status = 1
	and g1.guestID is NULL
	group by EntitlementDate,
	t1.ParentLocationID
set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'recruitment 3'
print @controlOffset 



--END
--print 'Pre Arrival End'

BEGIN TRAN PUBLISH2

truncate table RecruitmentDetail
truncate table Recruitment

insert Recruitment(MetricType,
EntitlementDate,
FacilityID,
ParkID,
BookedGuests,
RedeemedGuests,
PreArrival)
select * from RecruitmentCache (nolock)

COMMIT TRAN PUBLISH2

truncate table RecrutmentDetailCache
truncate table RecruitmentCache

set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))

print 'Reports End'
print @controlOffset 
--Recruitment End
--MEHA

set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))
print 'MEHA Start'
print @controlOffset 

declare @lastBubbleTime datetime
select top 1 @lastBubbleTime = UpdatedDate from bubbles

IF (select DATEDIFF(SECOND, ISNULL(@lastBubbleTime,'1980-01-01') ,GETUTCDATE())) > 300
BEGIN


truncate table bubblesCache

insert bubblesCache
select GuestID = t.GuestID, 
	'M' =case when t1.ParentLocationID is NULL then '0' else '1' end,
	'E' = case when t2.ParentLocationID is NULL then '0' else '1' end,
	'H' = case when t3.ParentLocationID is NULL then '0' else '1' end,
	'A' = case when t4.ParentLocationID is NULL then '0' else '1' end

from (
select distinct GuestID
	from EntitlementMaster
	where Status = 1
	and EntitlementDate < CONVERT(date,getdate()+5)) as t
left join (	
select distinct ParentLocationID, GuestID
	from EntitlementMaster
	where ParentLocationID = 80007944 --MK
	and Status = 1
	and EntitlementDate < CONVERT(date,getdate()+5)) as t1 on t.GuestID = t1.GuestID
left join (
select distinct ParentLocationID, GuestID
	from EntitlementMaster
	where ParentLocationID = 80007838 --Epcot
	and Status = 1
	and EntitlementDate < CONVERT(date,getdate()+5)) as t2 on t.GuestID = t2.GuestID
left join (
select distinct ParentLocationID, GuestID
	from EntitlementMaster
	where ParentLocationID = 80007998 --HS
	and Status = 1
	and EntitlementDate < CONVERT(date,getdate()+5)) as t3 on t.GuestID = t3.GuestID
	left join (
select distinct ParentLocationID, GuestID
	from EntitlementMaster
	where ParentLocationID = 80007823 --AK
	and Status = 1
	and EntitlementDate < CONVERT(date,getdate()+5)) as t4 on t.GuestID = t4.GuestID

BEGIN TRAN PUBLISH4
truncate table bubbles 
insert bubbles (GuestID,
M,
E,
H,
A,
ParkVisitCode)	
select *, ParkVisitCode = convert(int,'1'+M+E+H+A) 
from bubblesCache

truncate table bubblesCache

COMMIT TRAN PUBLISH4

END

set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))
print 'MEHA End'
print @controlOffset 


print 'Queue Counts Start'
/*
--exec sp_callQueueCountsETL
truncate table EventDelta
truncate table QueueCountsCache

insert EventDelta
select EventId,
	GuestID,
	RideNumber,
	xPass,
	x.FacilityID,
	EventTypeID,
	ReaderLocation = case when ReaderLocation = 'FPP-Merge' then 0 else 1 end,
	Timestamp,
	BandTypeID 
	from rdr.Event e (nolock)
	join rdr.Facility f (nolock) on f.FacilityID = e.FacilityID
	join xiFacilities x on x.FacilityID = f.FacilityName
	where CreatedDate between DATEADD(MINUTE,-15,GETUTCDATE()) and GETUTCDATE()
--	where TimeStamp between DATEADD(MINUTE,-15,GETUTCDATE()) and GETUTCDATE()

insert QueueCountsCache
select x.parkFacilityID, x.facilityID, EntryCount = ISNULL(EntryCount,0), MergeCount = ISNULL(MergeCount,0)
from xiFacilities x (nolock)
left join(
SELECT t1.facilityID, EntryCount = count(distinct t1.GuestID) 
from (
-- all eligible entry events
select guestID, RideNumber, facilityID, xPass, Timestamp
	from EventDelta (nolock)
	where xPass = 1
	and EventTypeID = 1 --'Entry'
	and  ReaderLocationFlag = 1 --'FPP-Merge'
) as t1
left join (
-- minus all guests who have hit merge or abandon state
select GuestID, RideNumber, facilityID, xPass, Timestamp
		from EventDelta (nolock)
	where xPass = 1
	and EventTypeID in (2,3)--('Merge','Abandon')
) as t2 on t1.RideNumber = t2.RideNumber		
	and t1.guestID = t2.guestID
	and t1.facilityID = t2.facilityID
	where t2.GuestID is NULL
	group by t1.facilityID )as t1 on t1.facilityID = x.FacilityID
left join(
SELECT facilityID, MergeCount = count(distinct GuestID)
	from EventDelta (nolock)
	where xPass = 1
    and TimeStamp >= DATEADD(MINUTE,-5, GETUTCDATE())
    group by facilityID) as t2 on t2.facilityID = x.FacilityID

BEGIN TRAN PUBLISH3


truncate table QueueCounts

insert QueueCounts (ParkFacilityID,
FacilityID,
EntryCount,
MergeCount) 
select * from QueueCountsCache (nolock)

COMMIT TRAN PUBLISH3	

truncate table QueueCountsCache


set @controlOffset = convert(varchar, DATEDIFF(MILLISECOND, @cutofftime, GETUTCDATE()))
*/
print 'Queue Counts End'
print @controlOffset 


--Wait Times Historical 
insert WaitTimesActualHistorical (Parkdate
,TimeSlice
,ParkID
,FacilityID
,E2L
,E2M
,CreateDate)
select Parkdate = convert(DATE,DATEADD(HH, @UTCCurrentOffset,t1.UpdatedDate)),
TimeSlice = TimeSliceBeg,
ParkID,
FacilityID,
E2L = E2L_SB,
E2M = E2M_SB,
getutcdate()
	from WaitTimes t1 (nolock) 
	join TimeSlices t2 (nolock) on convert(time,DATEADD(HH, @UTCCurrentOffset,t1.UpdatedDate)) between t2.TimeSliceBeg and t2.TimeSliceEnd
	and TimeSlicesType = '15Mins'
	and DATEADD(HH, -1*@UTCCurrentOffset,t2.TimeSliceBeg) between convert(time,@startTime) and convert(time,@cutofftime)
	
	

update syncControl
set TimeCompleted = getutcdate(), Status = 1
where JobID = (select max(JobID) from syncControl (nolock) where JobTypeID = 1)

print 'END'
END
ELSE
Select 'Wait'

END TRY
BEGIN CATCH

insert ETL_ExecutionErorrs
select ProcedureName = 'sp_PullAndSyncReportingDataUTC', 
TimeStamp = GETUTCDATE(), 
ERROR_NUMBER() AS ErrorNumber,
 ERROR_SEVERITY() AS ErrorSeverity,
 ERROR_STATE() AS ErrorState,
 ERROR_PROCEDURE() AS ErrorProcedure,
 ERROR_LINE() AS ErrorLine,
 ERROR_MESSAGE() AS ErrorMessage;

END CATCH

SET NOCOUNT OFF
GO
PRINT N'Altering [rdr].[usp_Event_Create]...';


GO
-- =============================================
-- Author:		Ted Crane
-- Create date: 07/20/2011
-- Description:	Creates an Event
-- Update date: 01/25/2012
-- Author:		Ted Crane
-- Description:	Changed @BandID to @GuestID.
--              Changed RideID to RideNumber.
--              Changed Attraction to Facility.
-- Update date: 07/09/2012
-- Author:		Ted Crane
-- Update Version: 1.3.0.0003
-- Description:	Added BandType.
--              Added RawMessage.
-- Update date: 07/22/2012
-- Author:		Ted Crane
-- Update Version: 1.3.0.0007
-- Description:	Checked for null value from
--              @BandType.
-- Update date: 07/19/2013
-- Author:		Ted Crane
-- Update Version: 1.7.0.0004
-- Description:	Replace GuestID with PublicID.
-- =============================================
ALTER PROCEDURE [rdr].[usp_Event_Create] 
	@GuestID bigint, 
	@xPass bit,
	@FacilityName nvarchar(20),
	@FacilityTypeName nvarchar(20),
	@EventTypeName nvarchar(20),
	@ReaderLocation nvarchar(20),
	@Timestamp nvarchar(25),
	@BandType nvarchar(50),
	@RawMessage nvarchar(MAX),
	@EventId int OUTPUT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	BEGIN TRY
	
		DECLARE @InternalTransaction bit
		
		SET @InternalTransaction = 0
	
		--If there's no transaction create one.
		IF @@TRANCOUNT = 0
		BEGIN
			BEGIN TRANSACTION
			SET @InternalTransaction = 1
		END
		
		DECLARE @FacilityID int
		DECLARE @FacilityTypeID int
		DECLARE @EventTypeID int
		DECLARE @BandTypeID int
		
		SELECT	@FacilityTypeID = [FacilityTypeID] 
		FROM	[rdr].[FacilityType]
		WHERE	[FacilityTypeName] = @FacilityTypeName
		
		IF @FacilityTypeID IS NULL
		BEGIN

			INSERT INTO [rdr].[FacilityType]
				   ([FacilityTypeName])
			VALUES 
					(@FacilityTypeName)
					
			SET @FacilityTypeID = @@IDENTITY
					
		END
		
		SELECT	@FacilityID = [FacilityID] 
		FROM	[rdr].[Facility] 
		WHERE	[FacilityName] = @FacilityName
		AND		[FacilityTypeID] = @FacilityTypeID
				
		IF @FacilityID IS NULL
		BEGIN
			INSERT INTO [rdr].[Facility]
				   ([FacilityName]
				   ,[FacilityTypeID])
			VALUES 
					(@FacilityName
					,@FacilityTypeID)

			SET @FacilityID = @@IDENTITY
			
		END
		
		SELECT	@EventTypeID = [EventTypeID] 
		FROM	[rdr].[EventType]
		WHERE	[EventTypeName] = @EventTypeName

		IF @EventTypeID IS NULL
		BEGIN
		
			INSERT INTO [rdr].[EventType]
				   ([EventTypeName])
			VALUES (@EventTypeName)
			
			SET @EventTypeID = @@IDENTITY
	    
		END

		IF @BandType = '' OR @BandType IS NULL OR @BandType = 'NULL'
		BEGIN
		
			SELECT	@BandTypeID = [BandTypeID] 
			FROM	[rdr].[BandType]
			WHERE	[BandTypeName] = 'Unknown'

		END
		ELSE
		BEGIN

			SELECT	@BandTypeID = [BandTypeID] 
			FROM	[rdr].[BandType]
			WHERE	[BandTypeName] = @BandType
		
		END
		
		IF @BandTypeID IS NULL
		BEGIN

			INSERT INTO [rdr].[BandType]
				   ([BandTypeName])
			VALUES 
					(@BandType)
					
			SET @BandTypeID = @@IDENTITY
					
		END

		IF PATINDEX('%.%',@Timestamp) = 0
		BEGIN
		
			SET @Timestamp = SUBSTRING(@Timestamp,1,19) + '.' + SUBSTRING(@Timestamp,21,3)
		
		END

--default to Public IDs
		declare @GuestID_PublicID_Temp nvarchar(256), @GuestID_PublicID bigint
		
		set @GuestID_PublicID = @GuestID
		
		if exists (select top 1 FacilityID from rdr.Facility (nolock) where FacilityName = @FacilityName and FacilityName not like '%[a-z]%')
		begin
		set @GuestID_PublicID_Temp = (
		select pref.value('(publicid/text())[1]', 'nvarchar(128)') as publicid
		from (select RawMessage = convert(xml, @RawMessage)) as t1
		cross apply RawMessage.nodes('/venue/message') as nodeData(pref))
			
			if ISNUMERIC(@GuestID_PublicID_Temp) = 1
			begin 
			set @GuestID_PublicID  = @GuestID_PublicID_Temp
			end
		
		end
		

		DECLARE @RideNumber int, @RideNumberMax int

		SELECT @RideNumber = ISNULL(MAX([RideNumber]),0)
		FROM [rdr].[Event] 
		WHERE [GuestID] = @GuestID_PublicID
		and xPass = @xPass

		SELECT @RideNumberMax = ISNULL(MAX([RideNumber]),0)
		FROM [rdr].[Event] 
		WHERE [GuestID] = @GuestID_PublicID

		IF @EventTypeName = 'Entry'
		BEGIN
			SET @RideNumber = @RideNumberMax + 1 
		END

		INSERT INTO [rdr].[Event]
			   ([GuestID]
			   ,[xPass]
			   ,[FacilityID]
			   ,[RideNumber]
			   ,[EventTypeID]
			   ,[ReaderLocation]
			   ,[Timestamp]
			   ,[BandTypeID]
			   ,[RawMessage])
		VALUES (@GuestID_PublicID--@GuestID
				,@xPass
				,@FacilityID
				,@RideNumber
				,@EventTypeID
				,@ReaderLocation
				,CONVERT(datetime,@Timestamp,126)
				,@BandTypeID
				,@RawMessage)			
	    
		SELECT @EventId = @@IDENTITY

		IF @InternalTransaction = 1
		BEGIN
			COMMIT TRANSACTION
		END

	END TRY
	BEGIN CATCH
	   
		IF @InternalTransaction = 1
		BEGIN
			ROLLBACK TRANSACTION
		END
	   
        -- Call the procedure to raise the original error.
		insert ETL_ExecutionErorrs
		select ProcedureName = 'usp_Event_Create', 
		TimeStamp = GETUTCDATE(), 
		ERROR_NUMBER() AS ErrorNumber,
		 ERROR_SEVERITY() AS ErrorSeverity,
		 ERROR_STATE() AS ErrorState,
		 ERROR_PROCEDURE() AS ErrorProcedure,
		 ERROR_LINE() AS ErrorLine,
		 ERROR_MESSAGE() AS ErrorMessage;

	END CATCH	   

END
GO
PRINT N'Refreshing [rdr].[usp_AbandonEvent_Create]...';


GO
EXECUTE sp_refreshsqlmodule N'[rdr].[usp_AbandonEvent_Create]';


GO
PRINT N'Refreshing [rdr].[usp_ExitEvent_Create]...';


GO
EXECUTE sp_refreshsqlmodule N'[rdr].[usp_ExitEvent_Create]';


GO
PRINT N'Refreshing [rdr].[usp_InVehicleEvent_Create]...';


GO
EXECUTE sp_refreshsqlmodule N'[rdr].[usp_InVehicleEvent_Create]';


GO
PRINT N'Refreshing [rdr].[usp_LoadEvent_Create]...';


GO
EXECUTE sp_refreshsqlmodule N'[rdr].[usp_LoadEvent_Create]';


GO
PRINT N'Refreshing [rdr].[usp_ReaderEvent_Create]...';


GO
EXECUTE sp_refreshsqlmodule N'[rdr].[usp_ReaderEvent_Create]';


GO
PRINT N'Refreshing [dbo].[sp_callXIETL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[sp_callXIETL]';


GO


update [dbo].[schema_version] 
	set [version]= N'1.7.0.0004', [script_name] = N'dbdash-1.7.0.0004.sql', [date_applied] = GETUTCDATE()


PRINT N'Update complete.';


GO
