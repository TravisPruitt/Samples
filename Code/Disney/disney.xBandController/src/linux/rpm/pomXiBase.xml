<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<artifactId>xi</artifactId>
	<packaging>rpm</packaging>
	<parent>
		<groupId>com.disney.xband</groupId>
		<artifactId>xBandParent</artifactId>
		<version>1.0-SNAPSHOT</version>
	</parent>
	<description>
		Disney/Synapse xi Services. Supports xi and xGS visualization components.
	</description>
	<organization>
		<name>Walt Disney Corporation></name>
		<url>www.disney.com</url>
	</organization>
	<dependencies>
		<dependency>
			<groupId>com.disney.xband</groupId>
			<artifactId>xiwar</artifactId>
			<version>1.0-SNAPSHOT</version>
			<type>war</type>
		</dependency>
	</dependencies>
 	<build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>rpm-maven-plugin</artifactId>
                <version>2.1-alpha-2</version>
				<extensions>true</extensions>
                <executions>
                    <execution>
                        <goals>
                            <goal>rpm</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <copyright>2012, Walt DisneyCorporation</copyright>
                    <distribution>Proprietary</distribution>
                    <group>Applications/System</group>
					<version>${XBAND_BUILD_SHORT_VERSION}</version>
					<release>${XBAND_BUILD_RELEASE}</release>
					<needarch>i386</needarch>
					<provides>
						<provide>xi</provide>
					</provides>
					<requires>
						<require>java-1.6.0-openjdk &gt;= 1.6.0.0</require>						
						<require>tcserver-nge-ssp1 &gt;= 2.6.5</require>
					</requires>
                    <mappings>
                        <mapping>
                            <directory>/opt/apps/tcserverApp/tcServer-2.6.5/ssp-tcserver1/webapps</directory>
                            <directoryIncluded>false</directoryIncluded>
                            <filemode>755</filemode>
                            <username>root</username>
                            <groupname>tcapp</groupname>
							<sources>
								<source>
									<location>
										${settings.localRepository}/com/disney/xband/xiwar/1.0-SNAPSHOT/xiwar-1.0-SNAPSHOT.war
									</location>
									<destination>xi.war</destination>
								</source>
							</sources>
                        </mapping>
                        <mapping>
                            <directory>/opt/apps/tcserverApp/tcServer-2.6.5/ssp-tcserver1/webapps/ROOT</directory>
                            <directoryIncluded>false</directoryIncluded>
                            <filemode>755</filemode>
                            <username>root</username>
                            <groupname>tcapp</groupname>
							<sources>
								<source>
									<location>
										${xbandhome-1.7}/src/linux/xi/crossdomain.xml
									</location>
								</source>
							</sources>
                        </mapping>

                    </mappings>
                    <postinstallScriptlet>
						<script>
LOG=/var/log/xbrms-install.log
TLOG=/tmp/xbrms-install.tmp

# Display to screen and log file with a blank line between entries.
log()
{
    echo $@
    echo
    echo $@ &gt;&gt; $LOG
    echo &gt;&gt; $LOG
}

# Display to screen and log file with no blank line.
_log()
{
    echo $@
    echo $@ &gt;&gt; $LOG
}

# Display to file.
logfile()
{
    echo $@ &gt;&gt; $LOG
    echo &gt;&gt; $LOG
}

# Execute command.
# If successful, note in log file.
# If not successful, note on screen and log file.
run()
{
    "$@" &gt; $TLOG 2&gt;&amp;1
    err=$?
    if [ $err -eq 0 ]; then
        echo "Success: $@" >> $LOG
        cat $TLOG >> $LOG
        echo >> $LOG
    else
        _log "Error: $@ returned $err"
        _log `cat $TLOG`
        _log
    fi
    rm -f $TLOG &gt; /dev/null 2&gt;&amp;1
    return $err
}

# Execute command.
# Log only to file.
run_quiet()
{
    "$@" &gt; $TLOG 2&gt;&amp;1
    err=$?
    if [ $err -eq 0 ]; then
        echo "Success: $@" &gt;&gt; $LOG
    else
        echo "Error: $@ returned $err  (ignoring and continuing)" &gt;&gt; $LOG
    fi
    cat $TLOG &gt;&gt; $LOG
    echo &gt;&gt; $LOG
    rm -f $TLOG &gt; /dev/null 2&gt;&amp;1
    return $err
}

# Execute command.
# If successful, note in log file.
# If not successful, note on screen and log file and then exit.
run_or_fail()
{
    "$@" &gt; $TLOG 2&gt;&amp;1
    err=$?
    if [ $err -eq 0 ]; then
        echo "Success: $@" &gt;&gt; $LOG
        cat $TLOG &gt;&gt; $LOG
        echo &gt;&gt; $LOG
    else
        _log "Error: $@ returned $err  (aborting this script)"
        _log `cat $TLOG`
        _log
        rm -f $TLOG &gt; /dev/null 2&gt;&amp;1
        exit 1
    fi
    rm -f $TLOG &gt; /dev/null 2&gt;&amp;1
    return $err
}

run_or_fail /etc/init.d/bootssptcserver1 stop

if [ -d /opt/apps/tcserverApp/tcServer-2.6.5/ssp-tcserver1/webapps/xi ]; then
    run_or_fail rm -rf /opt/apps/tcserverApp/tcServer-2.6.5/ssp-tcserver1/webapps/xi;
fi;

run_or_fail /etc/init.d/bootssptcserver1 start
						</script>
                    </postinstallScriptlet>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
