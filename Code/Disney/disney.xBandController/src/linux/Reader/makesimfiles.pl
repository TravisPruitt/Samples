#!/usr/bin/perl

package xband;
use strict;

#
# This scritp analyzes the eventdump.txt file generated by the xBRC.
# The output are xml configuation files for the Reader simulator.
# The Reader simulator can be then used to play back all the events from the eventdump.txt file.
#
# Usage: makesimfiles.pl <eventdump.txt file path> [<dest dir>] [<start line>] [<end line>]
#

my ($file, $destdir, $startline, $endline) = @ARGV;
my %readers;
my $starttime;
my $endtime;
my %days;

defined($file) || die "Usage: makesimfiles.pl <eventdump.txt file path> [<dest dir>] [<start line>] [<end line>]\n";
if (defined($destdir) && !(-d $destdir)) {
	mkdir($destdir) || die "$destdir: $!\n";
}

#
# First pass through the file.
#
# Find all readers and their types.
#
sub getReaders()
{
	my ($evtime, $evtype, $evname, $guestname, $lrid, $pno, $ss, $freq, $chan, $locname, $readername, $port, $mac, $macstr, $lineno, $vehid, $vehtime);

	open(my $fh, '<', $file) || die "$file: $!\n";

	$lineno = 0;
	while (my $line = <$fh>)
	{
		chomp($line);
		$lineno++;

		if (defined($startline) && $lineno < $startline)
		{
			next;
		}

		if (defined($endline) && $lineno > $endline)
		{
			last;
		}

		($evtime, $evtype) = split( /,/, $line );

		# Long range reader

		if ($evtype eq "LRR" || $evtype eq "VEHICLE" || $evtype eq "GPIO" || $evtype eq "TAP")
		{
			# count number of events in each day
			my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($evtime/1000);
			my $day = sprintf("%d-%02d-%02d", $year + 1900, $mon + 1, $mday);
			my $time = sprintf("%02d:%02d:%02d", $hour, $min, $sec);

			my $type = "";

			if ($evtype eq "LRR")
			{
				($evtime, $evtype, $evname) = split( /,/, $line );
				($locname, $readername) = split(/\./, $evname);
				$type = "lrr";

				if (defined($days{"$day"}{LRR})) {
					$days{"$day"}{LRR}{count}++;
					$days{"$day"}{LRR}{end} = $time;
					$days{"$day"}{LRR}{endline} = $lineno;
				}
				else {
					$days{"$day"}{LRR} = {count => 1, start => $time, startline => $lineno, end => $time, endline => $lineno};
				}
			}
			elsif ($evtype eq "VEHICLE")
			{
				($evtime, $evtype, $vehid, $readername, $vehtime) = split( /,/, $line );
				$type = "car";

				if (defined($days{"$day"}{VEHICLE})) {
					$days{"$day"}{VEHICLE}{count}++;
					$days{"$day"}{VEHICLE}{end} = $time;
					$days{"$day"}{VEHICLE}{endline} = $lineno;
				}
				else {
					$days{"$day"}{VEHICLE} = {count => 1, start => $time, startline => $lineno, end => $time, endline => $lineno};
				}
			}
			elsif ($evtype eq "GPIO")
			{
				($evtime, $evtype, $evname) = split( /,/, $line );
				($locname, $readername) = split(/\./, $evname);
				$type = "xtpra";

				if (defined($days{"$day"}{GPIO})) {
					$days{"$day"}{GPIO}{count}++;
					$days{"$day"}{GPIO}{end} = $time;
					$days{"$day"}{GPIO}{endline} = $lineno;
				}
				else {
					$days{"$day"}{GPIO} = {count => 1, start => $time, startline => $lineno, end => $time, endline => $lineno};
				}
			}
			elsif ($evtype eq "TAP")
			{
				($evtime, $evtype, $evname) = split( /,/, $line );
				($locname, $readername) = split(/\./, $evname);
				$type = "tap";

				if (defined($days{"$day"}{TAP})) {
					$days{"$day"}{TAP}{count}++;
					$days{"$day"}{TAP}{end} = $time;
					$days{"$day"}{TAP}{endline} = $lineno;
				}
				else {
					$days{"$day"}{TAP} = {count => 1, start => $time, startline => $lineno, end => $time, endline => $lineno};
				}
			}

			if (!defined($readers{$readername}))
			{
				if (!defined($starttime))
				{
					$starttime = $evtime;
				}
				$readers{$readername} = {type => $type, name => $readername};
			}

			$endtime = $evtime;
		}
	}

	close $fh;

	my $outfile;
	if (defined($destdir)) {
		$outfile = "$destdir/simulation.xml";
	}
	else {
		$outfile = "simulation.xml";
	}
	open( my $fh2, '>', $outfile) || die "$outfile: $!\n";
	
	print $fh2 "<?xml version=\"1.0\"?>\n";
	print $fh2 "<configuration>\n";
    print $fh2 "\t<controller url=\"http://localhost:8080\" />\n";
    print $fh2 "\t<readers start=\"0\" end=\"" . ($endtime - $starttime ) . "\">\n";

	$port = 8010;
	$mac = 1;
	while ( my($key, $r) = each %readers )
	{
		$macstr = sprintf("00:00:00:00:00:%02X",$mac);
		${$r}{filename} = "${$r}{name}_events.txt";

		if (defined($destdir)) {
			$outfile = "$destdir/${$r}{filename}";
		}
		else {
			$outfile = ${$r}{filename};
		}

		print $fh2 "\t\t<reader name=\"${$r}{name}\" webport=\"$port\" mac=\"$macstr\" type=\"${$r}{type}\" fileformat=\"json\" file=\"$outfile\"/>\n";	
		$port++;
		$mac++;
	}
	
	print $fh2 "\t</readers>\n";
	print $fh2 "</configuration>\n";
	
	close $fh2;
}

#
# Second pass through the file.
#
# Write reader events.
#
sub writeEvents()
{
	my ($evtime, $evtype, $evname, $guestname, $lrid, $pno, $ss, $freq, $chan, $locname, $readername, $port, $mac, $macstr, $lineno, $vehid, $vehtime);

	#
	# Create event output files for each reader.
	#
	while ( my($key, $r) = each %readers )
	{
		my $outfile;
		if (defined($destdir)) {
			$outfile = "$destdir/${$r}{filename}";
		}
		else {
			$outfile = "${$r}{filename}";
		}
		open(my $efh, '>', $outfile) || die "$outfile: $!\n";
		${$r}{fh} = $efh;
		${$r}{count} = 0;

		print $efh "{ \"events\" :\n";
 		print $efh "["; 
	}

	open(my $fh, '<', $file) || die "$file: $!\n";
	
	$lineno = 0;
	while (my $line = <$fh>)
	{
		chomp($line);
		$lineno++;

		if (defined($startline) && $lineno < $startline)
		{
			next;
		}

		if (defined($endline) && $lineno > $endline)
		{
			last;
		}

		($evtime, $evtype) = split( /,/, $line );

		# Long range reader
		if ($evtype eq "LRR")
		{
			($evtime, $evtype, $evname, $guestname, $lrid, $pno, $ss, $freq, $chan) = split( /,/, $line );
			($locname, $readername) = split(/\./, $evname);

			my $r = $readers{"$readername"};
			my $efh = ${$r}{fh};

			if (${$r}{count} > 0)
			{
				print $efh ",";
			}
			
			$evtime = $evtime - $starttime;
			print $efh "\n{ \"lrid\":\"$lrid\", \"pno\":\"$pno\", \"ss\":\"$ss\", \"chan\":\"$chan\", \"freq\":\"$freq\", \"dt\":\"$evtime\" }";

			${$r}{count}++;
		}

		# vehicle reader
		if ($evtype eq "VEHICLE")
		{
			($evtime, $evtype, $vehid, $readername, $vehtime) = split( /,/, $line );

			my $r = $readers{"$readername"};
			my $efh = ${$r}{fh};
			my ($sceid, $locid) = split(/\-/,$readername);

			if (${$r}{count} > 0)
			{
				print $efh ",";
			}
			
			$evtime = $evtime - $starttime;
			print $efh "\n{ \"CarID\":\"$vehid\", \"dt\":\"$evtime\", \"sceid\":\"$sceid\", \"locid\":\"$locid\"} ";

			${$r}{count}++;
		}

		# xtpra reader
		if ($evtype eq "GPIO")
		{
			($evtime, $evtype, $evname) = split( /,/, $line );
			($locname, $readername) = split(/\./, $evname);

			my $r = $readers{"$readername"};
			my $efh = ${$r}{fh};

			if (${$r}{count} > 0)
			{
				print $efh ",";
			}
			
			$evtime = $evtime - $starttime;
			print $efh "\n{ \"dt\":\"$evtime\", \"channel\":\"0\" }";

			${$r}{count}++;
		}

		# Tap reader
		if ($evtype eq "TAP")
		{
			($evtime, $evtype, $evname, $guestname, $lrid) = split( /,/, $line );
			($locname, $readername) = split(/\./, $evname);

			my $r = $readers{"$readername"};
			my $efh = ${$r}{fh};

			if (${$r}{count} > 0)
			{
				print $efh ",";
			}
			
			$evtime = $evtime - $starttime;
			print $efh "\n{ \"rfid\":\"$lrid\", \"uid\":\"$lrid\", \"sid\":\"$lrid\", \"pid\":\"$lrid\", \"iin\":\"$lrid\", \"dt\":\"$evtime\" }";

			${$r}{count}++;
		}
	}

	close $fh;

	#
	# Close event output files for each reader.
	#
	while ( my($key, $r) = each %readers )
	{
		my $efh = ${$r}{fh};
		print $efh "\n]\n";
		print $efh "}\n"; 
		close $efh;
	}
}

sub printStats()
{
	print "Found the following events.\n";
	print "Day\t\tType\tCount\tStart\t  Start Line\tEnd\t\tEnd Line\n";
	while ( my($day, $s) = each %days )
	{
		if (defined(${$s}{LRR})) {
			print "$day\tLRR\t${$s}{LRR}{count}\t${$s}{LRR}{start}\t${$s}{LRR}{startline}\t${$s}{LRR}{end}\t${$s}{LRR}{endline}\n";
		} else {
			print "$day\tLRR\t0\n";
		}
		if (defined(${$s}{TAP})) {
			print "$day\tTAP\t${$s}{TAP}{count}\t${$s}{TAP}{start}\t${$s}{TAP}{startline}\t${$s}{TAP}{end}\t${$s}{TAP}{endline}\n";
		} else {
			print "$day\tTAP\t0\n";
		}
		if (defined(${$s}{VEHICLE})) {
			print "$day\tVEHICLE\t${$s}{VEHICLE}{count}\t${$s}{VEHICLE}{start}\t${$s}{VEHICLE}{startline}\t${$s}{VEHICLE}{end}\t${$s}{VEHICLE}{endline}\n";
		} else {
			print "$day\tVEHICLE\t0\n";
		}
		if (defined(${$s}{GPIO})) {
			print "$day\tGPIO\t${$s}{GPIO}{count}\t${$s}{GPIO}{start}\t${$s}{GPIO}{startline}\t${$s}{GPIO}{end}\t${$s}{GPIO}{endline}\n";
		} else {
			print "$day\tGPIO\t0\n";
		}
		print "\n";
	}
}

getReaders();
writeEvents();
printStats();
